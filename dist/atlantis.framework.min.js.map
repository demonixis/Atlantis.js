{"version":3,"sources":["atlantis.framework.min.js"],"names":["Atlantis","window","events","ContentPreloading","ResolutionChanged","ajax","parameters","params","url","callback","success","xhr","XMLHttpRequest","method","open","onreadystatechange","readyState","status","responseText","send","data","gUrl","join","notify","name","event","document","createEvent","initEvent","Object","i","dispatchEvent","isMobileDevice","navigator","userAgent","match","_createProperty","object","property","fn0","fn1","defineProperty","get","set","enumerable","configurable","ContentManager","rootDirectory","this","_assets","preloader","PreloadTimerInterval","prototype","preload","progressCallback","doneCallback","countAssets","length","nbLoaded","onLoaded","asset","load","that","progress","timer","setInterval","clearInterval","assetName","temp","split","ext","loadImage","loadAudio","loadVideo","loadResource","imageName","image","Image","onload","style","position","left","body","appendChild","removeChild","src","audioName","audio","createElement","controls","videoName","video","resourceUrl","response","result","JSON","parse","dispose","GameComponent","game","enabled","initialized","initialize","update","gameTime","isEnabled","isInitialized","setEnabled","DrawableGameComponent","call","visible","assetLoaded","loadContent","unloadContent","draw","context","isVisible","setVisible","GameComponentCollection","components","drawables","content","l","add","gameComponent","indexOf","push","remove","index","splice","component","pIndex","GameTime","reset","elapsedTime","totalGameTime","currentTime","Date","fps","now","getElapsedTime","getTotalGameTime","getFPS","MathHelper","Pi","Math","PI","PiOver2","PiOver4","TwoPi","clamp","value","min","max","distance","value1","value2","abs","hermite","tangent1","tangent2","amount","sCubed","sSquared","lerp","smoothStep","toDegrees","radians","toRadians","degrees","isPowerOfTwo","Rectangle","x","y","width","height","rectangle","divide","fromRectangle","multiply","subtract","contains","getRight","getBottom","intersects","getLeft","getTop","toString","toVector2","Vector2","toPoint","Point","getCenter","getWidth","getHeight","getTopCenter","getBottomCenter","getLeftCenter","getRightCenter","setPosition","setSize","Matrix","values","toArray","Array","M11","M12","M13","M14","M21","M22","M23","M24","M31","M32","M33","M34","M41","M42","M43","M44","getIdentityValues","getZeroValues","setIdentity","getMatrixIdentity","matrix","setLeft","vector","z","Vector3","setRight","setUp","getUp","setDown","getDown","setBackward","getBackward","setForward","getForward","setTranslation","mValues","eValues","matA","matB","createRotationX","rotation","cos","sin","createRotationY","createRotationZ","createScale","sx","sy","sz","createTranslation","Atantis","createLookAt","target","upVector","zAxis","normalize","xAxis","cross","yAxis","dot","createOrthographic","zNear","zFar","createOrthographicOffCenter","right","bottom","top","createPerspectiveFieldOfView","fov","aspect","yScale","tan","xScale","halfWidth","halfHeight","createPerspectiveOffCenter","createPerspetiveFieldOfViewRH","createPerspectiveOffCenterRH","zRange","invert","b0","b1","b2","b3","b4","b5","d11","d12","d13","d14","det","a0","a1","a2","a3","a4","a5","d21","d22","d23","d24","d31","d32","d33","d34","d41","d42","d43","d44","mat","createWorld","forward","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","matrixA","matrixB","matrixC","builder","Quaternion","w","Identity","quaternion","quaternion1","quaternion2","conjugate","createFromYawPitchRoll","yaw","pitch","roll","halfYaw","halfPitch","halfRoll","sinYaw","cosYaw","sinPitch","cosPitch","sinRoll","cosRoll","fromPoint","point","fromVector","Zero","One","UnitX","UnitY","vec1","vec2","addToRef","subtractToRef","divideToRef","multiplyToRef","vector2","v1","v2","sqrt","lerpToRef","minToRef","maxToRef","negate","vec","normalizeToRef","reflect","normal","ReflectToRef","reflectToRef","val","smoothStepToRef","transform","transformToRef","transformNormal","transformNormalToRef","UnitZ","Up","Down","Right","Left","Forward","Backward","distanceSquared","dx","dy","dz","factor","transformCoordinate","Vector4","KeyboardState","keys","clone","Input","isKeyDown","key","isKeyUp","Keyboard","maxKeys","onKeyStateChange","preventDefault","keyCode","type","addEventListener","getState","ButtonState","Released","Pressed","MouseState","scrollWheelValue","buttons","leftButton","rightButton","middleButton","Mouse","domElement","HTMLElement","_x","_y","_scroll","_buttons","resetButtonState","onMouseEvent","pageX","offsetLeft","Game","scaleFactor","pageY","offsetTop","button","onMouseScroll","wheelDelta","detail","TouchLocationState","Invalid","Moved","TouchCollection","touchStates","TouchPanelState","create","states","panelState","state","TouchPanel","_states","eventNames","up","down","cancel","move","lastEventType","isPointerEvent","wrapEvent","id","touches","clientX","clientY","onTouchHandler","onPointerHandler","maxTouchPoints","msMaxTouchPoints","PointerEvent","MSPointerEvent","getCapabilities","hasTouch","GamepadButton","A","B","X","Y","LeftShoulder","RightShoulder","LeftTrigger","RightTrigger","Select","Start","L3","R3","DPadUp","DPadDown","DPadLeft","DPadRight","GamepadAxis","Horizontal","Vertical","HorizontalRight","VerticalRight","GamepadState","axis","isButtonDown","isButtonUp","getAxis","Gamepad","_gamepads","getGamepads","webkitGetGamepads","msGetGamepads","webkitGamepads","_gamepadsSupported","_addGamepad","gamepad","_removeGamepad","_updateGamepads","gamepads","j","m","btnVal","pressed","axes","Keys","BackSpace","Tab","Enter","Shift","Control","Alt","Pause","Escape","Space","Home","End","Suppr","PageUp","PageDown","Insert","Num0","Num1","Num2","Num3","Num4","Num5","Num6","Num7","Num8","Num9","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","Z","Super","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","ScaleMode","ScaleToFit","ConserveAspectRatio","NoScaleCenter","GraphicsDevice","settings","webGL","preferredBackBufferWidth","backBufferWidth","preferredBackBufferHeight","backBufferHeight","disableSmoothing","forceDisableSmoothing","viewport","scaleMode","_backBufferCache","_frontBuffer","RenderTarget","canvas","_fbContext","getContext","_backBuffer","_bbCanvas","getCanvas","msTouchAction","backgroundColor","applyChanges","fbWidth","fbHeight","diffPercent","getBackBuffer","getFrontBuffer","clear","color","imageSmoothingEnabled","present","_resizePixelCanvas","drawImage","widthScaled","heightScaled","origPixels","getImageData","scaled","scaledCtx","scaledPixels","floor","indexScaled","putImageData","toggleFullscreen","element","fs","isFullscreen","requestFullScreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","cancelFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","SpriteSortMode","BackToFront","FrontToBack","Immediate","SpriteEffect","None","FlipHorizontaly","FlipVerticaly","BatchItemType","Texture","Font","SpriteBatch","graphicsDevice","_graphicsDevice","_viewport","_canvas","_context","_batchItems","_batchStarted","_spriteSortMode","_transformMatrix","_cacheColoredTextures","_batchRect","_onResize","bind","begin","spriteSortMode","transformMatrix","save","texture2D","destinationRectangle","sourceRectangle","origin","scale","effect","layerDepth","_drawBatchItem","drawString","spriteFont","text","end","sort","_sortBatchItem","restore","drawTexture","texture","fillStyle","font","getFont","strokeStyle","lineWidth","wrapText","strokeText","_wrapText","size","fillText","oX","oY","translate","rotate","_colorizeTexture","_searchColoredTexture","imageData","cColor","_hexaToBytes","r","g","b","a","hexa","bColor","parseInt","slice","itemA","itemB","maxWidth","lineHeight","words","line","n","testLine","metrics","measureText","testWidth","is3D","_data","_needUpdate","isWebGLCanvas","fromImage","rt","setData","getData","getPixelData","_is3DCanvas","clearColor","enable","DEPTH_TEST","depthFunc","LEQUAL","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","clearRect","saveAsPng","toDataURL","saveAsJpg","SpriteFont","fontName","sClone","Preloader","screenWidth","screenHeight","screenWidthPerTwo","screenHeightPerTwo","onProgress","progressMessage","round","mainLoop","_instance","afterDraw","_paused","requestAnimationFrame","onResize","innerWidth","innerHeight","replace","getElementsByClassName","getElementById","HTMLCanvasElement","version","keyboard","mouse","touchPanel","frontBuffer","_internalIntialize","resizeEnabled","autoClear","run","startProcess","focus","pause","cancelAnimationFrame","resume"],"mappings":"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","file":"atlantis.framework.min.js","sourcesContent":["/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\nAtlantis.events = {\r\n    ContentPreloading: \"atlantis.preloading\",\r\n    ResolutionChanged: \"atlantis.graphics.resize\"\r\n};\r\n\r\n/**\r\n * Ajax method for POST and GET calls.\r\n * @method ajax\r\n * @exemple Atlantis.ajax({ url: http://foo.php, data: \"level_id=2&layer=3\", method: \"GET\", async: false, success: myCallback });\r\n */\r\nAtlantis.ajax = function(parameters) {\r\n    var params = parameters || {};\r\n    var url = parameters.url;\r\n    var callback = parameters.success || function () {};\r\n    var xhr = new XMLHttpRequest();\r\n    \r\n    if (params.method === \"POST\") {\r\n        xhr.open(\"POST\", url);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4 && xhr.status == 200) {\r\n                callback(xhr.responseText);\r\n            }\r\n        };\r\n        xhr.send(params.data);\r\n    }\r\n    else {\r\n        var gUrl = params.data ? ([url, \"?\", params.data].join(\"\")) : url;\r\n            \r\n        xhr.open(\"GET\", gUrl);\r\n        xhr.onreadystatechange = function() { \r\n            if(xhr.readyState == 4) {\r\n                callback(xhr.responseText);\r\n            }    \r\n        };\r\n        xhr.send(null);\r\n    }\r\n};\r\n\r\n/**\r\n * An event notifier.\r\n * @method notify\r\n * @param {String} name The name of the event to send.\r\n * @param {Object} params An object to send for registered handlers.\r\n */\r\nAtlantis.notify = function (name, params) {\r\n    var event = document.createEvent(\"HTMLEvents\");\r\n    event.initEvent(name, true, false);\r\n    \r\n    if (params instanceof Object) {\r\n        for(var i in params) {\r\n            event[i] = params[i];\r\n        }\r\n    }\r\n\r\n    document.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Determine whether the current device is a mobile or not by using the userAgent string (They said that's bad)\r\n * @method isMobileDevice\r\n * @return {Boolean} Returns `true` for a mobile device otherwise it returns `false`.  \r\n */\r\nAtlantis.isMobileDevice = function () {\r\n    return navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);\r\n};\r\n\r\n/**\r\n * Create a property\r\n * @method _createProperty\r\n * @private\r\n */\r\nAtlantis._createProperty = function (object, property, fn0, fn1) {\r\n    Object.defineProperty(object, property, {\r\n        get: fn0,\r\n        set: fn1,\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n}\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n      * Create a content manager that manage _assets.\r\n      * @constructor\r\n      * @class ContentManager\r\n      * @param {String} rootDirectory The root folder to load _assets (default is the current folder).\r\n      */\r\nAtlantis.ContentManager = function (rootDirectory) {\r\n    this.rootDirectory = rootDirectory || \"\";\r\n    this._assets = {};\r\n    this.preloader = [];\r\n};\r\n\r\nAtlantis.ContentManager.PreloadTimerInterval = 250;\r\n\r\n/**\r\n * Start the preloading process by using the `preloader` Array.\r\n * @method preload\r\n * @param {Function} progressCallback The callback to call when an asset has been loaded.\r\n * @param {Function} doneCallback The callback to call when all the assets are loaded.\r\n */\r\nAtlantis.ContentManager.prototype.preload = function (progressCallback, doneCallback) {\r\n    var countAssets = this.preloader.length,\r\n        nbLoaded = 0;\r\n\r\n    var progressCallback = (typeof(progressCallback) === \"function\") ? progressCallback : function () {};\r\n    var doneCallback = (typeof(doneCallback) === \"function\") ? doneCallback : function () {};\r\n    var onLoaded = function (asset) { nbLoaded++; };\r\n\r\n    for (var i = 0; i < countAssets; i++) {\r\n        this.load(this.preloader[i], onLoaded);\r\n    }\r\n\r\n    var that = this;\r\n    var progress = { status: \"Loading\", progress: 0 };\r\n\r\n    var timer = setInterval(function () {\r\n        progress.progress = (nbLoaded * 100.0) / countAssets;\r\n        \r\n        if (nbLoaded === countAssets) {\r\n            clearInterval(timer);\r\n            progress.status = \"Complete\";\r\n            that.preloader.length = 0;\r\n            doneCallback();\r\n        }\r\n        \r\n        Atlantis.notify(Atlantis.events.ContentPreloading, progress);\r\n        progressCallback(progress);\r\n    }, Atlantis.ContentManager.PreloadTimerInterval);\r\n};\r\n\r\n/**\r\n * Load an asset from the root directory.\r\n * Supported formats are :\r\n *      - Images : png, jpg, bmp\r\n *      - Audio : mp3, ogg, wav\r\n *      - Video : mp4, ogv\r\n *      - Data : xml, json, js\r\n *\r\n *  The type is define with the file extension.\r\n *\r\n * @method load\r\n * @param {String} assetName The asset name\r\n * @param {Function} callback A callback function called when the asset is loaded.\r\n */\r\nAtlantis.ContentManager.prototype.load = function (assetName, callback) {\r\n    var callback = (typeof(callback) === \"function\") ? callback : function() {};\r\n\r\n    var temp = assetName.split(\".\");\r\n    var ext = temp[(temp.length - 1)];\r\n    assetName = this.rootDirectory + assetName;\r\n\r\n    if (this._assets[assetName]) { \r\n        callback(this._assets[assetName]);\r\n        return this._assets[assetName];\r\n    }\r\n    else {\r\n        switch (ext) {\r\n            case \"png\":\r\n            case \"jpg\":\r\n            case \"bmp\":\r\n                this.loadImage(assetName, callback);\r\n                break;\r\n            case \"mp3\":\r\n            case \"ogg\":\r\n            case \"wav\":\r\n                this.loadAudio(assetName, callback);\r\n                break;\r\n            case \"mp4\":\r\n            case \"ogv\":\r\n                this.loadVideo(assetName, callback);\r\n            case \"xml\":\r\n            case \"json\":\r\n            case \"js\":\r\n                this.loadResource(assetName, ext, callback);\r\n                break;\r\n        }\r\n\r\n        return this._assets[assetName];\r\n    }\r\n};\r\n\r\n/**\r\n * Load and store an image.\r\n * @method loadImage\r\n * @param {String} imageName The path of the image.\r\n * @param {Function} callback (optional) The callback to call when the image is loaded.\r\n * @return {Image} Returns the image.\r\n */\r\nAtlantis.ContentManager.prototype.loadImage = function (imageName, callback) {\r\n    var image = new Image();\r\n    image.onload = function () {\r\n        this.style.position = \"absolute\";\r\n        this.style.left = \"-9999px\";\r\n\r\n        document.body.appendChild(image);\r\n        document.body.removeChild(image);\r\n\r\n        this.style.position = \"\";\r\n        this.style.left = \"\";\r\n        callback(this);\r\n    };\r\n    image.src = imageName;\r\n    this._assets[imageName] = image;\r\n    return image;\r\n};\r\n\r\n/**\r\n * Load and store a sound or a music.\r\n * @method loadAudio\r\n * @param {String} audioName The path of the media.\r\n * @param {Function} callback (optional) The callback to call when the media is loaded.\r\n * @return {HTMLAudioElement} Returns the image.\r\n */\r\nAtlantis.ContentManager.prototype.loadAudio = function (audioName, callback) {\r\n    var audio = document.createElement(\"audio\");\r\n    audio.src = audioName;\r\n    audio.load();\r\n    audio.controls = false; \r\n    this._assets[audioName] = audio;\r\n    callback(audio);\r\n    return audio;\r\n};\r\n\r\n\r\n/**\r\n * Load and store a video.\r\n * @method loadVideo\r\n * @param {String} videoName The path of the video.\r\n * @param {Function} callback (optional) The callback to call when the video is loaded.\r\n * @return {HTMLVideoElement} Returns the video.\r\n */\r\nAtlantis.ContentManager.prototype.loadVideo = function (videoName, callback) {\r\n    var video = document.createElement(\"video\");\r\n    video.onload = callback;\r\n    video.src = videoName;\r\n    this._assets[videoName] = video;\r\n    return video;\r\n};\r\n\r\n/**\r\n * Load and store a resources file. If the file's extension is `.json` then it's parsed using `JSON.parse` function.\r\n * @method loadResource\r\n * @param {String} resourceUrl The path of the resource file.\r\n * @param {String} ext The extension of the resource file.\r\n * @param {Function} callback (optional) The callback to call when the resource file is loaded.\r\n * @return {HTMLVideoElement} Returns the resource.\r\n */\r\nAtlantis.ContentManager.prototype.loadResource = function (resourceUrl, ext, callback) {\r\n    var that = this;\r\n    Atlantis.ajax({\r\n        method: \"GET\",\r\n        url: resourceUrl,\r\n        success: function (response) {\r\n            var result = response;\r\n            if (ext == \"json\") {\r\n                result = JSON.parse(response);\r\n            }\r\n            that._assets[resourceUrl] = result;\r\n            callback(result);   \r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Dispose all assets\r\n * @method dispose\r\n */\r\nAtlantis.ContentManager.prototype.dispose = function () {\r\n    this._assets.length = 0;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n// ---------------------- //\r\n// --- Game Component --- //\r\n// ---------------------- //\r\n\r\n/**\r\n* Create a game component.\r\n* @constructor\r\n* @class GameComponent\r\n* @param {Atlantis.Game} game A game instance.\r\n*/\r\nAtlantis.GameComponent = function (game) {\r\n    this.game = game;\r\n    this.enabled = true;\r\n    this.initialized = false;\r\n};\r\n\r\n/**\r\n* Initialize the logic of the component.\r\n* @method initialize\r\n*/\r\nAtlantis.GameComponent.prototype.initialize = function () {\r\n    this.initialized = true;\r\n};\r\n\r\n/**\r\n* Update the logic of the component.\r\n* @method update\r\n* @param {Atlantis.GameTime} gameTime\r\n*/\r\nAtlantis.GameComponent.prototype.update = function (gameTime) { };\r\n\r\n// ---\r\n// --- Getters and setters\r\n// ---\r\n\r\n/**\r\n * Gets the status of the component.\r\n * @method isEnabled\r\n * @return {Boolean} The status of the component.\r\n */\r\nAtlantis.GameComponent.prototype.isEnabled = function () {\r\n    return this.enabled;\r\n};\r\n\r\n/**\r\n * Flags used to determine if the initialization processes is done.\r\n * @method isInitialized\r\n * @return {Boolean}\r\n */\r\nAtlantis.GameComponent.prototype.isInitialized = function () {\r\n    return this.initialized;\r\n};\r\n\r\n/**\r\n * Gets the status of the component.\r\n * @method @setEnabled\r\n * @param {Boolean} enabled Sets to true to enable\r\n */\r\nAtlantis.GameComponent.prototype.setEnabled = function (enabled) {\r\n    this.enabled = enabled;\r\n};\r\n\r\n// ------------------------------------------------ //\r\n// ---  Drawable Game Component implementation  --- //\r\n// ------------------------------------------------ //\r\n\r\n/**\r\n* Create a drawable game component.\r\n* @constructor\r\n* @class DrawableGameComponent\r\n* @extends Atlantis.GameComponent\r\n* @param {Atlantis.Game} game A game instance.\r\n*/\r\nAtlantis.DrawableGameComponent = function (game) {\r\n    Atlantis.GameComponent.call(this, game);\r\n    this.visible = true;\r\n    this.assetLoaded = false;\r\n};\r\n\r\nAtlantis.DrawableGameComponent.prototype = new Atlantis.GameComponent();\r\n\r\n/**\r\n* Load assets of the component.\r\n* @method loadContent\r\n*/\r\nAtlantis.DrawableGameComponent.prototype.loadContent = function () {\r\n    this.assetLoaded = true;\r\n};\r\n\r\n/**\r\n* Unload and dispose all assets of the component.\r\n* @method unloadContent\r\n*/\r\nAtlantis.DrawableGameComponent.prototype.unloadContent = function () {\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/** \r\n* Draw the component on screen.\r\n* @method draw\r\n* @param {Atlantis.GameTime} gameTime\r\n* @param {Object} context The canvas context.\r\n*/\r\nAtlantis.DrawableGameComponent.prototype.draw = function (gameTime, context) { };\r\n\r\n/**\r\n * Gets the visibility of the component.\r\n * @method isVisible\r\n * @return {Boolean} Return true if visible otherwise return false\r\n */\r\nAtlantis.DrawableGameComponent.prototype.isVisible = function () {\r\n    return this.isVisible;\r\n};\r\n\r\n/**\r\n * Set the component visible or invisible\r\n * @method setVisible\r\n * @param visible\r\n */\r\nAtlantis.DrawableGameComponent.prototype.setVisible = function (visible) {\r\n    this.isVisible = visible;\r\n};\r\n\r\n// ------------------------------------------------ //\r\n// --- Game Component Collection implementation --- //\r\n// ------------------------------------------------ //\r\n\r\n/**\r\n* Create a collection of game components.\r\n* @constructor\r\n*/\r\nAtlantis.GameComponentCollection = function () {\r\n    this.components = [];\r\n    this.drawables = [];\r\n    this.initialized = false;\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/**\r\n* Initialize logic.\r\n* @method initialize\r\n*/\r\nAtlantis.GameComponentCollection.prototype.initialize = function (content) {\r\n    for (var i = 0, l = this.components.length; i < l; i++) {\r\n        this.components[i].initialize();\r\n    }\r\n    this.initialized = true;\r\n};\r\n\r\n/**\r\n* Load assets\r\n* @method loadContent\r\n*/\r\nAtlantis.GameComponentCollection.prototype.loadContent = function () {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        this.drawables[i].loadContent();\r\n    }\r\n    this.assetLoaded = true;\r\n};\r\n\r\n/**\r\n* Unload assets\r\n* @method unloadContent\r\n*/\r\nAtlantis.GameComponentCollection.prototype.unloadContent = function () {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        this.drawables[i].unloadContent();\r\n    }\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/**\r\n* Update all components\r\n* @method update\r\n* @param {Atlantis.GameTime} gameTime\r\n*/\r\nAtlantis.GameComponentCollection.prototype.update = function (gameTime) {\r\n    for (var i = 0, l = this.components.length; i < l; i++) {\r\n        if (this.components[i].isEnabled()) {\r\n            this.components[i].update(gameTime);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Draw all components\r\n* @method draw\r\n*/\r\nAtlantis.GameComponentCollection.prototype.draw = function (gameTime, context) {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        if (this.drawables[i].isVisible()) {\r\n            this.drawables[i].draw(gameTime, context);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Add a component to the collection\r\n* @method add\r\n* @param {Atlantis.GameComponent} A component or drawable gameComponent to add.\r\n*/\r\nAtlantis.GameComponentCollection.prototype.add = function (gameComponent) {\r\n    if (this.components.indexOf(gameComponent) == -1) {\r\n        this.components.push(gameComponent);\r\n\r\n        if (this.initialized) {\r\n            gameComponent.initialize();\r\n        }\r\n\r\n        if (gameComponent instanceof Atlantis.DrawableGameComponent) {\r\n            this.drawables.push(gameComponent);\r\n\r\n            if (this.assetLoaded) {\r\n                gameComponent.loadContent();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n* Remove a component from the collection\r\n* @method remove\r\n* @return {Boolean} Return true if the component has been successfully removed.\r\n*/\r\nAtlantis.GameComponentCollection.prototype.remove = function (gameComponent) {\r\n    var index = this.components.indexOf(gameComponent);\r\n    if (index > -1) {\r\n        this.components.splice(index, 1);\r\n        if (gameComponent instanceof Atlantis.DrawableGameComponent) {\r\n            index = this.drawables.indexOf(gameComponent);\r\n            if (index > -1) {\r\n                this.drawables.splice(index, 1);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n* Get a component from the collection\r\n* @method get\r\n*/\r\nAtlantis.GameComponentCollection.prototype.get = function (index) {\r\n    var component = null;\r\n    var pIndex = this.components.indexOf(gameComponent);\r\n    if (pIndex > -1) {\r\n        component = this.components[index];\r\n    }\r\n\r\n    return null;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n* Create a game time object who's responsible to get time informations.\r\n* @constructor\r\n* @class GameTime\r\n*/\r\nAtlantis.GameTime = function () {\r\n    this.reset();\r\n};\r\n\r\n/**\r\n* Reset the game timer.\r\n* @method reset\r\n*/\r\nAtlantis.GameTime.prototype.reset = function () {\r\n    this.elapsedTime = 0;\r\n    this.totalGameTime = 0;\r\n    this.currentTime = +new Date();\r\n    this.fps = 0;\r\n};\r\n\r\n/**\r\n* Update the game time.\r\n* @method update\r\n*/\r\nAtlantis.GameTime.prototype.update = function () {\r\n    var now = +new Date();\r\n    this.elapsedTime = now - this.currentTime;\r\n    this.totalGameTime += this.elapsedTime;\r\n    this.fps = 1000 / (now - this.currentTime);\r\n    this.currentTime = now;\r\n};\r\n\r\n/**\r\n* Gets the elapsed time since last frame.\r\n* @method getElapsedTime\r\n* @return {Number} The elapsed time since last frame.\r\n*/\r\nAtlantis.GameTime.prototype.getElapsedTime = function () {\r\n    return this.elapsedTime;\r\n};\r\n\r\n/**\r\n* Gets the total elapsed time since the begining.\r\n* @method getTotalGameTime\r\n* @return {Number} The total elapsed time.\r\n*/\r\nAtlantis.GameTime.prototype.getTotalGameTime = function () {\r\n    return this.totalGameTime;\r\n};\r\n\r\n/**\r\n * Gets the current FPS indice.\r\n * @method getFPS\r\n * @return {Number} Return the current FPS.\r\n */\r\nAtlantis.GameTime.prototype.getFPS = function () {\r\n    return this.fps;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * @class MathHelpers\r\n */\r\nAtlantis.MathHelper = {\r\n    /**\r\n\t * Gets PI value.\r\n\t * @attribute Pi\r\n\t * @readOnly\r\n\t * @type {Number}\r\n\t */\r\n    Pi: Math.PI,\r\n\r\n    /**\r\n\t * Gets PI over 2 value.\r\n\t * @attribute PiOver2\r\n\t * @readOnly\r\n\t * @type {Number}\r\n\t */\r\n    PiOver2: Math.PI / 2,\r\n\r\n    /**\r\n\t * Gets PI over 4 value.\r\n\t * @attribute PiOver4\r\n\t * @readOnly\r\n\t * @type {Number}\r\n\t */\r\n    PiOver4: Math.PI / 4,\r\n\r\n    /**\r\n\t * Gets PI * 2 value.\r\n\t * @attribute TwoPi\r\n\t * @readOnly\r\n\t * @type {Number}\r\n\t */\r\n    TwoPi: Math.PI * 2,\r\n\r\n    /**\r\n\t *\r\n\t * @method clamp\r\n\t */\r\n    clamp: function (value, min, max) {\r\n        value = (value > max) ? max : value;\r\n        value = (value < min) ? min : value;\r\n        return value;\r\n    },\r\n\r\n    /**\r\n\t *\r\n\t * @method distance\r\n\t */\r\n    distance: function (value1, value2) {\r\n        return Math.abs(value1 - value2);\r\n    },\r\n\r\n    hermite: function (value1, tangent1, value2, tangent2, amount) {\r\n        var sCubed = amount * amount * amount;\r\n        var sSquared = amount * amount;\r\n\r\n        if (amount === 0) {\r\n            return value1;\r\n        }\r\n        else if (amount === 1) {\r\n            return value2;\r\n        }\r\n\r\n        return (2 * value1 - 2 * value2 + tangent2 + tangent1) * sCubed + (3 * value2 - 3 * value1 - 2 * tangent1 - tangent2) * sSquared + tangent1 * amount + value1;\r\n    },\r\n\r\n    /**\r\n\t *\r\n\t * @method lerp\r\n\t */\r\n    lerp: function (value1, value2, amount) {\r\n        amount = amount < 0 ? 0 : amount;\r\n        amount = amount > 1 ? 1 : amount;\r\n        return value1 + (value2 - value1) * amount;\r\n    },\r\n\r\n    smoothStep: function (value1, value2, amount) {\r\n        var result = this.clamp(amount, 0, 1);\r\n        result = this.hermite(value1, 0, value2, 0, result);\r\n        return result;\r\n    },\r\n\r\n    /**\r\n\t *\r\n\t * @method toDegrees\r\n\t */\r\n    toDegrees: function (radians)\t{ \r\n        return (radians * (180 / Math.PI));\r\n    },\r\n\r\n    /**\r\n\t *\r\n\t * @method toRadians\r\n\t */\r\n    toRadians: function (degrees) { \r\n        return (degrees * (Math.PI / 180));\r\n    },\r\n\r\n    /**\r\n\t *\r\n\t * @method isPowerOfTwo\r\n\t */\r\n    isPowerOfTwo:function (value) {\r\n        return (value > 0) && ((value & (value - 1)) == 0);\r\n    }\r\n};\r\n\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = Atlantis || {};\r\n\r\n /**\r\n * Create a rectangle structure.\r\n * @constructor\r\n * @class Rectangle\r\n * @param {Number} x A value for X coordinate.\r\n * @param {Number} y A value for Y coordinate.\r\n * @param {Number} width A value for the width of the rectangle.\r\n * @param {Number} height A value for the height of the rectangle\r\n */\r\nAtlantis.Rectangle = function (x, y, width, height) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n};\r\n\r\n/**\r\n* Add a rectangle to this rectangle.\r\n* @method add\r\n* @param {Atlantis.Rectangle} rectangle The rectangle to add.\r\n*/\r\nAtlantis.Rectangle.prototype.add = function (rectangle) {\r\n    this.x += rectangle.x;\r\n    this.y += rectangle.y;\r\n    this.width += rectangle.width;\r\n    this.height += rectangle.height;\r\n};\r\n\r\n/**\r\n* Divide a rectangle to this rectangle.\r\n* @method divide\r\n* @param {Atlantis.Rectangle} rectangle The rectangle to divide.\r\n*/\r\nAtlantis.Rectangle.prototype.divide = function (rectangle) {\r\n    this.x /= rectangle.x;\r\n    this.y /= rectangle.y;\r\n    this.width /= rectangle.width;\r\n    this.height /= rectangle.height;\r\n};\r\n\r\nAtlantis.Rectangle.prototype.fromRectangle = function (rectangle) {\r\n    this.x = rectangle.x ? +rectangle.x : 0;\r\n    this.y = rectangle.y ? +rectangle.y : 0;\r\n    this.width = rectangle.width ? +rectangle.width : 0;\r\n    this.height = rectangle.height ? +rectangle.height : 0;\r\n};\r\n\r\n/**\r\n* Multiply a rectangle to this rectangle.\r\n* @method multiply\r\n* @param {Atlantis.Rectangle} rectangle The rectangle to multiply.\r\n*/\r\nAtlantis.Rectangle.prototype.multiply = function (rectangle) {\r\n    this.x *= rectangle.x;\r\n    this.y *= rectangle.y;\r\n    this.width *= rectangle.width;\r\n    this.height *= rectangle.height;\r\n};\r\n\r\n/**\r\n* Subtract a rectangle to this rectangle.\r\n* @method subtract\r\n* @param {Atlantis.Rectangle} rectangle The rectangle to subtract.\r\n*/\r\nAtlantis.Rectangle.prototype.subtract = function (rectangle) {\r\n    this.x -= rectangle.x;\r\n    this.y -= rectangle.y;\r\n    this.width -= rectangle.width;\r\n    this.height -= rectangle.height;\r\n};\r\n\r\n/**\r\n* Determine if a Rectangle, Point or coordinates are contains in rectangle\r\n* @method contains\r\n* @param {Number|Point|Rectangle} X coordinate or an instance of Point or an instance of Rectangle.\r\n* @param {Number} Y coordinate.\r\n*/\r\nAtlantis.Rectangle.prototype.contains = function (value1, value2) { \r\n    if (value1 instanceof Atlantis.Rectangle) {\r\n        return (this.x <= value1.x) && (value1.getRight() <= this.getRight()) && (this.y <= value1.y) && (value1.getBottom() <= this.getBottom());\r\n    }\r\n    else {\r\n        return (this.x <= value1) && (value1 < this.getRight()) && (this.y <= value2) && (value2 < this.getBottom());\r\n    }\r\n};\r\n\r\n/**\r\n*\r\n* @method contains\r\n*/\r\nAtlantis.Rectangle.prototype.intersects = function (rectangle) {\r\n    return (rectangle.getLeft() < this.getRight()) && (this.getLeft() < rectangle.getRight()) && (rectangle.getTop() < this.getBottom()) && (this.getTop() < rectangle.getBottom());\r\n};\r\n\r\nAtlantis.Rectangle.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" width: \", this.width, \" height: \", this.height].toString();\r\n}\r\n\r\n/**\r\n* gets the position.\r\n* @return The position.\r\n*/\r\nAtlantis.Rectangle.prototype.toVector2 = function () {\r\n    return new Atlantis.Vector2(this.x, this.y);\r\n};\r\n\r\n/**\r\n* Gets the position.\r\n* @return The position.\r\n*/\r\nAtlantis.Rectangle.prototype.toPoint = function () {\r\n    return new Atlantis.Point(this.x, this.y);\r\n}\r\n\r\n// ---\r\n// --- Getters and setters\r\n// ---\r\n\r\n/**\r\n* Gets the top value.\r\n* @method getTop\r\n* @return {Number} Top coordinate (y)\r\n*/\r\nAtlantis.Rectangle.prototype.getTop = function () {\r\n    return this.y;\r\n};\r\n\r\n/**\r\n* Gets the bottom value.\r\n* @method getBottom\r\n* @return {Number} Bottom coordinate (y + height)\r\n*/\r\nAtlantis.Rectangle.prototype.getBottom = function () {\r\n    return this.y + this.height;\r\n};\r\n\r\n/**\r\n* Gets the left value.\r\n* @method getLeft\r\n* @return {Number} Left coordinate (x)\r\n*/\r\nAtlantis.Rectangle.prototype.getLeft = function () {\r\n    return this.x;\r\n};\r\n\r\n/**\r\n* Gets the right value.\r\n* @method getRight\r\n* @return {Number} Right value (x + width)\r\n*/\r\nAtlantis.Rectangle.prototype.getRight = function () {\r\n    return this.x + this.width;\r\n};\r\n\r\n/**\r\n* Gets the center of the rectangle.\r\n* @method getCenter\r\n* @return {Number} Center of the rectangle.\r\n* @return {Atlantis.Point} A point of the center of the rectangle.\r\n*/\r\nAtlantis.Rectangle.prototype.getCenter = function () {\r\n    return new Atlantis.Point(this.x + (this.width / 2), this.y + (this.height / 2));\r\n};\r\n\r\n/**\r\n* Gets width\r\n* @return {Number} Return the with.\r\n*/\r\nAtlantis.Rectangle.prototype.getWidth = function () {\r\n    return this.width;\r\n};\r\n\r\n/**\r\n* Gets height\r\n* @return {Number} Return the height\r\n*/\r\nAtlantis.Rectangle.prototype.getHeight = function () {\r\n    return this.height;\r\n};\r\n\r\n/**\r\n* Gets the top center.\r\n* @return {Atlantis.Vector2} The top center of the rectangle\r\n*/\r\nAtlantis.Rectangle.prototype.getTopCenter = function () {\r\n    return new Atlantis.Vector2(this.x + this.width / 2, this.y);\r\n};\r\n\r\n/**\r\n* Gets the bottom center.\r\n* @return {Atlantis.Vector2} The bottom center.\r\n*/\r\nAtlantis.Rectangle.prototype.getBottomCenter = function () {\r\n    return new Atlantis.Vector2(this.x + this.width / 2, this.y + this.height);\r\n};\r\n\r\n/**\r\n* Gets the left center.\r\n* @return {Atlantis.Vector2} The left center.\r\n*/\r\nAtlantis.Rectangle.prototype.getLeftCenter = function () {\r\n    return new Atlantis.Vector2(this.x, this.y + this.height / 2);\r\n};\r\n\r\n/**\r\n* Gets the right center.\r\n* @return {Atlantis.Vector2} The right center.\r\n*/\r\nAtlantis.Rectangle.prototype.getRightCenter = function () {\r\n    return new Atlantis.Vector2(this.x + this.width, this.y + this.height / 2);\r\n};\r\n\r\n/**\r\n* Sets values to rectangle.\r\n* @param {Number} x\r\n* @param {Number} y\r\n* @param {Number} width\r\n* @param {Number} height\r\n*/\r\nAtlantis.Rectangle.prototype.set = function (x, y, width, height) {\r\n    if (x instanceof Atlantis.Rectangle) {\r\n        this.x = x.x;\r\n        this.y = x.y;\r\n        this.width = x.width;\r\n        this.height = x.height;\r\n    }\r\n    else {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n};\r\n\r\n/**\r\n* Sets the position of the rectangle\r\n* @param {Number|Altantis.Vector2|Atlantis.Point} x\r\n* @param {Number} y\r\n*/\r\nAtlantis.Rectangle.prototype.setPosition = function (x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\n\r\n/**\r\n* Sets the size of the rectangle.\r\n* @param {Number} width\r\n* @param {Number} height\r\n*/\r\nAtlantis.Rectangle.prototype.setSize = function (width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n};\r\n\r\n/**\r\n* Gets a string from this object.\r\n* @method toString\r\n* @return {String}\r\n*/\r\nAtlantis.Rectangle.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" width: \", this.width, \" height: \", this.height].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n* Create a matrix. Parameter can be a matrix, an array of 16 floats or nothing (all fields case are sets to 0).\r\n* @class Matrix\r\n* @constructor\r\n* @param {Atlantis.Matrix|Array} \r\n*/\r\nAtlantis.Matrix = function (values) {\r\n    if (values instanceof Atlantis.Matrix) {\r\n        var values = values.toArray();\r\n        this.set(values);\r\n    }\r\n    else if (values instanceof Array && values.length == 16) {\r\n        this.set(values);\r\n    }\r\n    else {\r\n        this.M11 = 0; this.M12 = 0; this.M13 = 0; this.M14 = 0;\r\n        this.M21 = 0; this.M22 = 0; this.M23 = 0; this.M24 = 0;\r\n        this.M31 = 0; this.M32 = 0; this.M33 = 0; this.M34 = 0;\r\n        this.M41 = 0; this.M42 = 0; this.M43 = 0; this.M44 = 0;\r\n    }\r\n};\r\n\r\n/**\r\n* Set all values of the matrix.\r\n* @method set\r\n* @param {Array} values An array of 16 values who start at M11 and stop at M44\r\n*/\r\nAtlantis.Matrix.prototype.set = function (values) {\r\n    if (values.length == 16) {\r\n        this.M11 = values[0]; this.M12 = values[1]; this.M13 = values[2]; this.M14 = values[3];\r\n        this.M21 = values[4]; this.M22 = values[5]; this.M23 = values[6]; this.M24 = values[7];\r\n        this.M31 = values[8]; this.M32 = values[9]; this.M33 = values[10]; this.M34 = values[11];\r\n        this.M41 = values[12]; this.M42 = values[13]; this.M43 = values[14]; this.M44 = values[15];\r\n    }\r\n};\r\n\r\n/**\r\n* Gets identity value for push it into matrix.\r\n* @method getIdentityValues\r\n* @return {Array} Return an array that correspond of identity matrix.\r\n*/\r\nAtlantis.Matrix.prototype.getIdentityValues = function () {\r\n    var values = [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    ];\r\n    return values;\r\n};\r\n\r\n/**\r\n * Gets an array of values setted to 0.\r\n * @method getZeroValues\r\n * @return {Array} Return an array with 0.\r\n */\r\nAtlantis.Matrix.prototype.getZeroValues = function () {\r\n    var values = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        values.push(0.0);\r\n    }\r\n    return values;\r\n};\r\n\r\n/**\r\n* Sets the matrix to identity.\r\n* @method setIdentity\r\n*/\r\nAtlantis.Matrix.prototype.setIdentity = function () {\r\n    this.set(this.getIdentityValues());\r\n};\r\n\r\n/**\r\n* Gets an identity matrix.\r\n* @method getMatrixIdentity\r\n* @static\r\n* @return {Atlantis.Matrix} Return an identity matrix.\r\n*/\r\nAtlantis.Matrix.getMatrixIdentity = function () {\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.setIdentity();\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Gets values of matrix in array. Start at M11 to M44.\r\n* @method toArray\r\n* @return {Array} An array of values.\r\n*/\r\nAtlantis.Matrix.prototype.toArray = function () {\r\n    var values = [];\r\n    values.push(this.M11);\r\n    values.push(this.M12);\r\n    values.push(this.M13);\r\n    values.push(this.M14);\r\n    values.push(this.M21);\r\n    values.push(this.M22);\r\n    values.push(this.M23);\r\n    values.push(this.M24);\r\n    values.push(this.M31);\r\n    values.push(this.M32);\r\n    values.push(this.M33);\r\n    values.push(this.M34);\r\n    values.push(this.M41);\r\n    values.push(this.M42);\r\n    values.push(this.M43);\r\n    values.push(this.M44);\r\n    return values;\r\n};\r\n\r\n/**\r\n * Sets the left of the matrix.\r\n * @method setLeft\r\n * @param {Atlantis.Vector3} vector A vector to use.\r\n */\r\nAtlantis.Matrix.prototype.setLeft = function (vector) {\r\n    this.M11 = -vector.x;\r\n    this.M12 = -vector.y;\r\n    this.M13 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the left of the matrix.\r\n * @method getLeft\r\n * @return {Atlantis.Matrix} Return a the left vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getLeft = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M11;\r\n    vector.y = -this.M12;\r\n    vector.z = -this.M13;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the right of the matrix.\r\n * @method setRight\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setRight = function (vector) {\r\n    this.M11 = vector.x;\r\n    this.M12 = vector.y;\r\n    this.M13 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the right of the matrix.\r\n * @method getRight\r\n * @return {Atlantis.Matrix} Return a the right vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getRight = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M11;\r\n    vector.y = this.M12;\r\n    vector.z = this.M13;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the up of the matrix.\r\n * @method setUp\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setUp = function (vector) {\r\n    this.M21 = vector.x;\r\n    this.M22 = vector.y;\r\n    this.M23 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the up of the matrix.\r\n * @method getUp\r\n * @return {Atlantis.Matrix} Return a the up vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getUp = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M21;\r\n    vector.y = this.M22;\r\n    vector.z = this.M23;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the down of the matrix.\r\n * @method setDown\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setDown = function (vector) {\r\n    this.M21 = -vector.x;\r\n    this.M22 = -vector.y;\r\n    this.M23 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the down of the matrix.\r\n * @method getDown\r\n * @return {Atlantis.Matrix} Return a the down vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getDown = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M21;\r\n    vector.y = -this.M22;\r\n    vector.z = -this.M23;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the backward of the matrix.\r\n * @method setBackward\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setBackward = function (vector) {\r\n    this.M31 = vector.x;\r\n    this.M32 = vector.y;\r\n    this.M33 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the backward of the matrix.\r\n * @method getBackward\r\n * @return {Atlantis.Matrix} Return a the backward vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getBackward = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M31;\r\n    vector.y = this.M32;\r\n    vector.z = this.M33;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the forward of the matrix.\r\n * @method setForward\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setForward = function (vector) {\r\n    this.M31 = -vector.x;\r\n    this.M32 = -vector.y;\r\n    this.M33 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the forward of the matrix.\r\n * @method getForward\r\n * @return {Atlantis.Matrix} Return a the forward vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getForward = function () {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M31;\r\n    vector.y = -this.M32;\r\n    vector.z = -this.M33;\r\n    return vector;\r\n};\r\n\r\n/**\r\n* Sets translation.\r\n* @method setTranslation\r\n* @param {Atlantis.Vetor3} position The position to set.\r\n*/\r\nAtlantis.Matrix.prototype.setTranslation = function (position) {\r\n    this.M41 = position.x;\r\n    this.M42 = position.y;\r\n    this.M43 = position.z;\r\n};\r\n\r\n/**\r\n* Add a matrix to this matrix.\r\n* @method add\r\n* @param {Atlantis.Matrix} matrix A matrix to add.\r\n*/\r\nAtlantis.Matrix.prototype.add = function (matrix) {\r\n    var mValues = this.toArray();\r\n    var eValues = matrix.toArray();\r\n\r\n    for (var i = 0; i < 16; i++) {\r\n        mValues[i] += eValues[i];\r\n    }\r\n    this.set(mValues);\r\n}\r\n\r\n/**\r\n* Add two matrix.\r\n* @method add\r\n* @static\r\n* @param {Atlantis.Matrix} matA A matrix\r\n* @param {Atlantis.Matrix} matB Another matrix to add with the first\r\n* @return {Atlantis.Matrix} Return a new matrix.\r\n*/\r\nAtlantis.Matrix.add = function (matA, matB) {\r\n    var matrix = new Atlantis.Matrix(matA);\r\n    matrix.add(matB);\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a rotation matrix on X axis.\r\n* @method createRotationX\r\n* @static\r\n* @param {Atlantis.Vector3} rotation An angle in radians\r\n* @return {Atlantis.Matrix} Return a rotation matrix on X axis.\r\n*/\r\nAtlantis.Matrix.createRotationX = function (rotation) {\r\n    var matrix = getMatrixIdentity();\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M22 = cos;\r\n    matrix.M23 = sin;\r\n    matrix.M32 = -sin;\r\n    matrix.M33 = cos;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a rotation matrix on Y axis.\r\n* @method createRotationY\r\n* @static\r\n* @param {Atlantis.Vector3} rotation An angle in radians\r\n* @return {Atlantis.Matrix} Return a rotation matrix on Y axis.\r\n*/\r\nAtlantis.Matrix.createRotationY = function (rotation) {\r\n    var matrix = getMatrixIdentity();\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M11 = cos;\r\n    matrix.M13 = -sin;\r\n    matrix.M31 = sin;\r\n    matrix.M33 = cos;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a rotation matrix on Z axis.\r\n* @method createRotationX\r\n* @static\r\n* @param {Atlantis.Vector3} rotation An angle in radians\r\n* @return {Atlantis.Matrix} Return a rotation matrix on Z axis.\r\n*/\r\nAtlantis.Matrix.createRotationZ = function (rotation) {\r\n    var matrix = this.getMatrixIdentity();\r\n\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M11 = cos;\r\n    matrix.M13 = sin;\r\n    matrix.M31 = -sin;\r\n    matrix.M33 = cos;\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a scale matrix.\r\n* @method createScale\r\n* @static\r\n* @param {Number} sx Desired scale on X axis.\r\n* @param {Number} sy Desired scale on Y axis.\r\n* @param {Number} sz Desired scale on Z axis.\r\n* @return {Atlantis.Matrix} Return a scale matrix.\r\n*/\r\nAtlantis.Matrix.createScale = function (sx, sy, sz) {\r\n    var matrix = Atlantis.Matrix.getMatrixIdentity();\r\n    matrix.M11 = sx;\r\n    matrix.M22 = sy || sx;\r\n    matrix.M33 = sz || sx;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a translation matrix.\r\n* @method createTranslation\r\n* @static\r\n* @param x Position on X axis.\r\n* @param y Position on Y axis.\r\n* @param z Position on Z axis.\r\n* @return Return a matrix translation.\r\n*/\r\nAtlantis.Matrix.createTranslation = function (x, y, z) {\r\n    var matrix = Atantis.Matrix.getMatrixIdentity();\r\n    matrix.M41 = x;\r\n    matrix.M42 = y || x;\r\n    matrix.M43 = z || x;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a view matrix.\r\n* @metod createLookAt\r\n* @static\r\n* @param {Atlantis.Vector3} position The position of the camera.\r\n* @param Atlantis.Vector3} target The target of the camera.\r\n* @param Atlantis.Vector3} upVector Vector up\r\n* @return {Atlantis.Matrix} Return a view camera.\r\n*/\r\nAtlantis.Matrix.createLookAt = function (position, target, upVector) {\r\n    var zAxis = Atlantis.Vector3.subtract(target, position);\r\n    zAxis.normalize();\r\n    var xAxis = Atlantis.Vector3.cross(upVector, zAxis);\r\n    xAxis.normalize();\r\n    var yAxis = Atlantis.Vector3.cross(zAxis, xAxis);\r\n    yAxis.normalize();\r\n\r\n    var matrix = Atlantis.Matrix.getMatrixIdentity();\r\n\r\n    matrix.M11 = xAxis.x;\r\n    matrix.M21 = xAxis.y;\r\n    matrix.M31 = xAxis.z;\r\n\r\n    matrix.M12 = yAxis.x;\r\n    matrix.M22 = yAxis.y;\r\n    matrix.M32 = yAxis.z;\r\n\r\n    matrix.M13 = zAxis.x;\r\n    matrix.M23 = zAxis.y;\r\n    matrix.M33 = zAxis.z;\r\n\r\n    matrix.M41 = -Atlantis.Vector3.dot(xAxis, position);\r\n    matrix.M42 = -Atlantis.Vector3.dot(yAxis, position);\r\n    matrix.M43 = -Atlantis.Vector3.dot(zAxis, position);\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create an orthogonal projection matrix.\r\n * @method createOrthograhic\r\n * @static\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Number} zNear\r\n * @param {Number} zFar\r\n * @return {Atlantis.Matrix}\r\n */\r\nAtlantis.Matrix.createOrthographic = function (width, height, zNear, zFar) {\r\n    var matrix = new Matrix();\r\n    matrix.M11 = 2.0 / width;\r\n    matrix.M12 = matrix.M13 = matrix.M14 = 0.0;\r\n    matrix.M22 = 2.0 / height;\r\n    matrix.M21 = matrix.M23 = matrix.M24 = 0.0;\r\n    matrix.M33 = 1.0 / (zNear - zFar);\r\n    matrix.M31 = matrix.M32 = matrix.M34 = 0.0;\r\n    matrix.M41 = matrix.M42 = 0.0;\r\n    matrix.M43 = zNear / (zNear - zFar);\r\n    matrix.M44 = 1.0;\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Create a customized orthogonal projection matrix.\r\n * @method createOrthographicOffCenter\r\n * @static\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Number} zNear\r\n * @param {Number} zFar\r\n * @return {Atlantis.Matrix}\r\n */\r\nAtlantis.Matrix.createOrthographicOffCenter = function (left, right, bottom, top, zNear, zFar) {\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.M11 = (2.0 / (right - left));\r\n    matrix.M12 = 0.0;\r\n    matrix.M13 = 0.0;\r\n    matrix.M14 = 0.0;\r\n    matrix.M21 = 0.0;\r\n    matrix.M22 = (2.0 / (top - bottom));\r\n    matrix.M23 = 0.0;\r\n    matrix.M24 = 0.0;\r\n    matrix.M31 = 0.0;\r\n    matrix.M32 = 0.0;\r\n    matrix.M33 = (1.0 / (zNear - zFar));\r\n    matrix.M34 = 0.0;\r\n    matrix.M41 = ((left + right) / (left - right));\r\n    matrix.M42 = ((top + bottom) / (bottom - top));\r\n    matrix.M43 = (zNear / (zNear - zFar));\r\n    matrix.M44 = 1.0;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a perspective field of view matrix with Left hand notation.\r\n * @method createPerspectiveFieldOfView\r\n * @static\r\n * @param {Number} fov Desired field of view (Math.PI / 4 is a good value)\r\n * @param {Number} aspect Desired aspect ratio (Screen width / height)\r\n * @param {Number} near Near clip\r\n * @param {Number} far Far clip\r\n * @return {Atlantis.Matrix} Return a matrix of this type of perspective.\r\n */\r\nAtlantis.Matrix.createPerspectiveFieldOfView = function (fov, aspect, zNear, zFar) {\r\n    var yScale = (1.0 / Math.tan(fov * 0.5));\r\n    var xScale = yScale / aspect;\r\n    var halfWidth = zNear / xScale;\r\n    var halfHeight = zNear / yScale;\r\n\r\n    return Atlantis.Matrix.createPerspectiveOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, zNear, zFar);\r\n};\r\n\r\n/**\r\n * Create a perspective field of view matrix with Right hand notation.\r\n * @method createPerspectiveFieldOfViewRH\r\n * @static\r\n * @param {Number} fov Desired field of view (Math.PI / 4 is a good value)\r\n * @param {Number} aspect Desired aspect ratio (Screen width / height)\r\n * @param {Number} near Near clip\r\n * @param {Number} far Far clip\r\n * @return {Atlantis.Matrix} Return a matrix of this type of perspective.\r\n */\r\nAtlantis.Matrix.createPerspetiveFieldOfViewRH = function (fov, aspect, zNear, zFar) {\r\n    var yScale = (1.0 / Math.tan(fov * 0.5));\r\n    var xScale = yScale / aspect;\r\n    var halfWidth = zNear / xScale;\r\n    var halfHeight = zNear / yScale;\r\n\r\n    return Matrix.createPerspectiveOffCenterRH(-halfWidth, halfWidth, -halfHeight, halfHeight, zNear, zFar);\r\n};\r\n\r\n/**\r\n* Create a custom perspective matrix.\r\n* @method createPerspectiveOffCenter\r\n* @static\r\n* @param {Number} left Minimum X value of the viewing volume.\r\n* @param {Number} right Maximum X value of the viewing volume.\r\n* @param {Number} bottom Minimum Y value of the viewing volume.\r\n* @param {Number} top Maximum Y value of the viewing volume.\r\n* @param {Number} zNear Minimum Z value of the viewing volume.\r\n* @param {Number} zFar Maximum Z value of the viewing volume.\r\n* @return {Atlantis.Matrix} Return a new custom perspective matrix.\r\n*/\r\nAtlantis.Matrix.createPerspectiveOffCenter = function (left, right, bottom, top, zNear, zFar) {\r\n    var zRange = zFar / (zFar - zNear);\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.M11 = 2.0 * zNear / (right - left);\r\n    matrix.M22 = 2.0 * zNear / (top - bottom);\r\n    matrix.M31 = (left + right) / (left - right);\r\n    matrix.M32 = (top + bottom) / (bottom - top);\r\n    matrix.M33 = zRange;\r\n    matrix.M34 = 1.0;\r\n    matrix.M43 = -zNear * zRange;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Create a custom perspective matrix (Right hand).\r\n* @method createPerspectiveOffCenter\r\n* @static\r\n* @param {Number} left Minimum X value of the viewing volume.\r\n* @param {Number} right Maximum X value of the viewing volume.\r\n* @param {Number} bottom Minimum Y value of the viewing volume.\r\n* @param {Number} top Maximum Y value of the viewing volume.\r\n* @param {Number} zNear Minimum Z value of the viewing volume.\r\n* @param {Number} zFar Maximum Z value of the viewing volume.\r\n* @return {Atlantis.Matrix} Return a new custom perspective matrix.\r\n*/\r\nAtlantis.Matrix.createPerspectiveOffCenterRH = function (left, right, bottom, top, zNear, zFar) {\r\n    var matrix = createPerspectiveOffCenter(left, right, bottom, top, zNear, zFar);\r\n    matrix.M31 *= -1.0;\r\n    matrix.M32 *= -1.0;\r\n    matrix.M33 *= -1.0;\r\n    matrix.M34 *= -1.0;\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Invert the current Matrix.\r\n * @method invert\r\n */\r\nAtlantis.Matrix.prototype.invert = function () {\r\n    var b0 = (this.M31 * this.M42) - (this.M32 * this.M41);\r\n    var b1 = (this.M31 * this.M43) - (this.M33 * this.M41);\r\n    var b2 = (this.M34 * this.M41) - (this.M31 * this.M44);\r\n    var b3 = (this.M32 * this.M43) - (this.M33 * this.M42);\r\n    var b4 = (this.M34 * this.M42) - (this.M32 * this.M44);\r\n    var b5 = (this.M33 * this.M44) - (this.M34 * this.M43);\r\n\r\n    var d11 = this.M22 * b5 + this.M23 * b4 + this.M24 * b3;\r\n    var d12 = this.M21 * b5 + this.M23 * b2 + this.M24 * b1;\r\n    var d13 = this.M21 * -b4 + this.M22 * b2 + this.M24 * b0;\r\n    var d14 = this.M21 * b3 + this.M22 * -b1 + this.M23 * b0;\r\n\r\n    var det = this.M11 * d11 - this.M12 * d12 + this.M13 * d13 - this.M14 * d14;\r\n\r\n    if (Math.abs(det) == 0.0) {\r\n        this.set(this.getZeroValues());\r\n        return;\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    var a0 = (this.M11 * this.M22) - (this.M12 * this.M21);\r\n    var a1 = (this.M11 * this.M23) - (this.M13 * this.M21);\r\n    var a2 = (this.M14 * this.M21) - (this.M11 * this.M24);\r\n    var a3 = (this.M12 * this.M23) - (this.M13 * this.M22);\r\n    var a4 = (this.M14 * this.M22) - (this.M12 * this.M24);\r\n    var a5 = (this.M13 * this.M24) - (this.M14 * this.M23);\r\n\r\n    var d21 = this.M12 * b5 + this.M13 * b4 + this.M14 * b3;\r\n    var d22 = this.M11 * b5 + this.M13 * b2 + this.M14 * b1;\r\n    var d23 = this.M11 * -b4 + this.M12 * b2 + this.M14 * b0;\r\n    var d24 = this.M11 * b3 + this.M12 * -b1 + this.M13 * b0;\r\n\r\n    var d31 = this.M42 * a5 + this.M43 * a4 + this.M44 * a3;\r\n    var d32 = this.M41 * a5 + this.M43 * a2 + this.M44 * a1;\r\n    var d33 = this.M41 * -a4 + this.M42 * a2 + this.M44 * a0;\r\n    var d34 = this.M41 * a3 + this.M42 * -a1 + this.M43 * a0;\r\n\r\n    var d41 = this.M32 * a5 + this.M33 * a4 + this.M34 * a3;\r\n    var d42 = this.M31 * a5 + this.M33 * a2 + this.M34 * a1;\r\n    var d43 = this.M31 * -a4 + this.M32 * a2 + this.M34 * a0;\r\n    var d44 = this.M31 * a3 + this.M32 * -a1 + this.M33 * a0;\r\n\r\n    this.M11 = +d11 * det; this.M12 = -d21 * det; this.M13 = +d31 * det; this.M14 = -d41 * det;\r\n    this.M21 = -d12 * det; this.M22 = +d22 * det; this.M23 = -d32 * det; this.M24 = +d42 * det;\r\n    this.M31 = +d13 * det; this.M32 = -d23 * det; this.M33 = +d33 * det; this.M34 = -d43 * det;\r\n    this.M41 = -d14 * det; this.M42 = +d24 * det; this.M43 = -d34 * det; this.M44 = +d44 * det;\r\n};\r\n\r\n/**\r\n * Calculate the inverse of the specified matrix.\r\n * @method invert\r\n * @static\r\n * @param matrix The matrix to use.\r\n * @return {Atlantis.Matrix} Return the inverse of the matrix.\r\n */\r\nAtlantis.Matrix.invert = function (matrix) {\r\n    var mat = new Matrix(matrix);\r\n    mat.invert();\r\n    return mat;\r\n};\r\n\r\n/**\r\n * Create a world matrix.\r\n * @method createWorld\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Vector3} forward\r\n * @param {Atlantis.Vector3} upVector\r\n * @return {Atlantis.Matrix} Return a world matrix.\r\n */\r\nAtlantis.Matrix.createWorld = function (position, forward, upVector) {\r\n    var matrix = new Atlantis.Matrix();\r\n\r\n    var x = Atlantis.Vector3.cross(forward, upVector);\r\n    var y = Atlantis.Vector3.cross(x, forward);\r\n    var z = Atlantis.Vector3.normalize(forward);\r\n    x.normalize();\r\n    y.normalize();\r\n\r\n    //matrix.setRight(x);\r\n    //matrix.setUp(y);\r\n    //matrix.setForward(z);\r\n    matrix.setTranslation(position);\r\n    matrix.M44 = 1.0;\r\n\r\n    return matrix;\r\n}\r\n\r\n/**\r\n* Multiply this matrix by another matrix.\r\n* @method multiply\r\n* @param {Atlantis.Matrix} matrix A matrix to multiply.\r\n*/\r\nAtlantis.Matrix.prototype.multiply = function (matrix) {\r\n    var m11 = (((this.M11 * matrix.M11) + (this.M12 * matrix.M21)) + (this.M13 * matrix.M31)) + (this.M14 * matrix.M41);\r\n    var m12 = (((this.M11 * matrix.M12) + (this.M12 * matrix.M22)) + (this.M13 * matrix.M32)) + (this.M14 * matrix.M42);\r\n    var m13 = (((this.M11 * matrix.M13) + (this.M12 * matrix.M23)) + (this.M13 * matrix.M33)) + (this.M14 * matrix.M43);\r\n    var m14 = (((this.M11 * matrix.M14) + (this.M12 * matrix.M24)) + (this.M13 * matrix.M34)) + (this.M14 * matrix.M44);\r\n    var m21 = (((this.M21 * matrix.M11) + (this.M22 * matrix.M21)) + (this.M23 * matrix.M31)) + (this.M24 * matrix.M41);\r\n    var m22 = (((this.M21 * matrix.M12) + (this.M22 * matrix.M22)) + (this.M23 * matrix.M32)) + (this.M24 * matrix.M42);\r\n    var m23 = (((this.M21 * matrix.M13) + (this.M22 * matrix.M23)) + (this.M23 * matrix.M33)) + (this.M24 * matrix.M43);\r\n    var m24 = (((this.M21 * matrix.M14) + (this.M22 * matrix.M24)) + (this.M23 * matrix.M34)) + (this.M24 * matrix.M44);\r\n    var m31 = (((this.M31 * matrix.M11) + (this.M32 * matrix.M21)) + (this.M33 * matrix.M31)) + (this.M34 * matrix.M41);\r\n    var m32 = (((this.M31 * matrix.M12) + (this.M32 * matrix.M22)) + (this.M33 * matrix.M32)) + (this.M34 * matrix.M42);\r\n    var m33 = (((this.M31 * matrix.M13) + (this.M32 * matrix.M23)) + (this.M33 * matrix.M33)) + (this.M34 * matrix.M43);\r\n    var m34 = (((this.M31 * matrix.M14) + (this.M32 * matrix.M24)) + (this.M33 * matrix.M34)) + (this.M34 * matrix.M44);\r\n    var m41 = (((this.M41 * matrix.M11) + (this.M42 * matrix.M21)) + (this.M43 * matrix.M31)) + (this.M44 * matrix.M41);\r\n    var m42 = (((this.M41 * matrix.M12) + (this.M42 * matrix.M22)) + (this.M43 * matrix.M32)) + (this.M44 * matrix.M42);\r\n    var m43 = (((this.M41 * matrix.M13) + (this.M42 * matrix.M23)) + (this.M43 * matrix.M33)) + (this.M44 * matrix.M43);\r\n    var m44 = (((this.M41 * matrix.M14) + (this.M42 * matrix.M24)) + (this.M43 * matrix.M34)) + (this.M44 * matrix.M44);\r\n\r\n    this.M11 = m11;\r\n    this.M12 = m12;\r\n    this.M13 = m13;\r\n    this.M14 = m14;\r\n    this.M21 = m21;\r\n    this.M22 = m22;\r\n    this.M23 = m23;\r\n    this.M24 = m24;\r\n    this.M31 = m31;\r\n    this.M32 = m32;\r\n    this.M33 = m33;\r\n    this.M34 = m34;\r\n    this.M41 = m41;\r\n    this.M42 = m42;\r\n    this.M43 = m43;\r\n    this.M44 = m44;\r\n};\r\n\r\n/**\r\n* Multiply a two matrix.\r\n* @method multiply\r\n* @static\r\n* @param {Atlantis.Matrix} matrixA A matrix.\r\n* @param {Atlantis.Matrix} matrixB Another matrix.\r\n* @param {Atlantis.Matrix} matrixC Another matrix (optional).\r\n* @return {Atlantis.Matrix} Return a new matrix.\r\n*/\r\nAtlantis.Matrix.multiply = function (matrixA, matrixB, matrixC) {\r\n    var matrix = new Atlantis.Matrix(matrixA);\r\n    matrix.multiply(matrixB);\r\n\r\n    if (matrixC instanceof Atlantis.Matrix) {\r\n        matrix.multiply(matrixC);\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n* Subtract a matrix to this matrix.\r\n* @method subtract\r\n* @param {Atlantis.Matrix} matrix A matrix to add.\r\n*/\r\nAtlantis.Matrix.prototype.subtract = function (matrix) {\r\n    var mValues = this.toArray();\r\n    var eValues = matrix.toArray();\r\n\r\n    for (var i = 0; i < 16; i++) {\r\n        mValues[i] -= eValues[i];\r\n    }\r\n    this.set(mValues);\r\n}\r\n\r\n/**\r\n* Subtract two matrix.\r\n* @method subtract\r\n* @static\r\n* @param {Atlantis.Matrix} matA A matrix.\r\n* @param {Atlantis.Matrix} matB Another matrix to use to subtract with the first matrix.\r\n* @return {Atlantis.Matrix} Return a new matrix.\r\n*/\r\nAtlantis.Matrix.subtract = function (matA, matB) {\r\n    var mat = new Atlantis.Matrix(matA);\r\n    mat.subtract(matB);\r\n    return mat;\r\n}\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Matrix.prototype.toString = function () {\r\n    var values = this.toArray();\r\n    var builder = [];\r\n\r\n    for (var i = 0; i < 16; i += 4) {\r\n        builder.push(\"[\");\r\n        builder.push(values[i] + \" \");\r\n        builder.push(values[i + 1] + \" \");\r\n        builder.push(values[i + 2] + \" \");\r\n        builder.push(values[i + 3]);\r\n        builder.push(\"] \");\r\n    }\r\n    return builder.join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = Atlantis || {};\r\n\r\n/**\r\n  * Define a quaternion.\r\n  * @class Quaternion\r\n  * @constructor\r\n  * @param {Number|Quaternion} x Value for X coordinate.\r\n  * @param {Quaternion} y Value for Y coordinate.\r\n  * @param {Quaternion} z Value for Z coordinate.\r\n  * @param {Quaternion} w Value for W coordinate.\r\n  */\r\nAtlantis.Quaternion = function (x, y, z, w) {\r\n    if (x instanceof Atlantis.Quaternion) {\r\n        this.x = x.x;\r\n        this.y = y.x;\r\n        this.z = z.x;\r\n        this.w = w.x;\r\n    }\r\n    else {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.z = z;\r\n        this.w = w;\r\n    }\r\n};\r\n\r\n/**\r\n* Gets an Quaternion sets to identity.\r\n* @method Identity\r\n* @return {Atlantis.Quaternion} Return a new Quaternion sets to identity.\r\n*/\r\nAtlantis.Quaternion.Identity = function () {\r\n    return new Atlantis.Quaternion(0, 0, 0, 1);\r\n};\r\n\r\n/**\r\n* Add a Quaternion to this quaternion.\r\n* @method add\r\n*/\r\nAtlantis.Quaternion.prototype.add = function (quaternion) {\r\n    this.x += quaternion.x;\r\n    this.y += quaternion.y;\r\n    this.z += quaternion.z;\r\n    this.w += quaternion.w;\r\n};\r\n\r\n/**\r\n * Add two quaternions.\r\n * @method add\r\n * @static\r\n * @method {Atlantis.Quaternion} quaternion1\r\n * @method {Atlantis.Quaternion} quaternion1\r\n * @return {Atlantis.Quaternion} Return a new quaternion.\r\n */\r\nAtlantis.Quaternion.add = function (quaternion1, quaternion2) {\r\n    var result = new Quaternion(quaternion1);\r\n    result.add(quaternion2);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Conjugate the Quaternion.\r\n * @method conjugate\r\n */\r\nAtlantis.Quaternion.prototype.conjugate = function () {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n};\r\n\r\n/**\r\n * Gets a quaternion who's the conjugate of the quaternion passed to parameter.\r\n * @method conjugate\r\n * @static\r\n * @param {Atlantis.Quaternion} A quaterion to conjugate.\r\n * @return {Atlantis.Quaternion} Return a new conjugate Quaternion.\r\n */\r\nAtlantis.Quaternion.conjugate = function (quaternion) {\r\n    var result = new Quaternion(quaternion);\r\n    result.conjugate();\r\n    return result;\r\n};\r\n\r\n/**\r\n * Create a quaternion with three rotations\r\n * @param yaw Value of yaw rotation (Y)\r\n * @param pitch Value of pitch rotation (X)\r\n * @param roll Value of roll rotation (Z)\r\n * @return Return a quaternion with three rotations.\r\n */\r\nAtlantis.Quaternion.createFromYawPitchRoll = function (yaw, pitch, roll) {\r\n    var result = new Quaternion();\r\n\r\n    var halfYaw = yaw * 0.5;\r\n    var halfPitch = pitch * 0.5;\r\n    var halfRoll = roll * 0.5;\r\n\r\n    var sinYaw = Math.sin(halfYaw);\r\n    var cosYaw = Math.cos(halfYaw);\t\r\n    var sinPitch = Math.sin(halfPitch);\r\n    var cosPitch = Math.cos(halfPitch);\t\r\n    var sinRoll = Math.sin(halfRoll);\r\n    var cosRoll = Math.cos(halfRoll);\r\n\r\n    result.x = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    result.y = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    result.z = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    result.w = (cosYaw * cosPitch * cosRoll) - (sinYaw * sinPitch * sinRoll);\r\n\r\n    return result;\r\n};\r\n\r\n/**\r\n  * Gets a string from this object.\r\n  * @method toString\r\n  * @return {String}\r\n  */\r\nAtlantis.Quaternion.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z, \" w: \", this.w].join(\"\");\r\n};\r\n\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a point structure.\r\n * @constructor\r\n * @class Point\r\n * @param {Number} x A value for X coordinate.\r\n * @param {Number} y A value for Y coordinate.\r\n */\r\nAtlantis.Point = function (x, y) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n};\r\n\r\nAtlantis.Point.fromPoint = function (x, y) {\r\n    return new Atlantis.Point(point.x, point.y);\r\n};\r\n\r\n/**\r\n* Gets a string from this object.\r\n* @method toString\r\n* @return {String}\r\n*/\r\nAtlantis.Point.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y].join(\"\");\r\n};\r\n\r\n/**\r\n* Create a new Vector2\r\n* @constructor\r\n* @class Vector2\r\n*/\r\nAtlantis.Vector2 = function (x, y) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n};\r\n\r\nAtlantis.Vector2.fromVector = function (vector) {\r\n    return new Atlantis.Vector2(vector.x, vector.y);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to zero.\r\n * @method Zero\r\n */\r\nAtlantis.Vector2.Zero = function () {\r\n    return new Vector2();\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to one.\r\n * @method One\r\n */\r\nAtlantis.Vector2.One = function () {\r\n    return new Vector2(1.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method UnitX\r\n */\r\nAtlantis.Vector2.UnitX = function () {\r\n    return new Vector2(1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method UnitY\r\n */\r\nAtlantis.Vector2.UnitY = function () {\r\n    return new Vector2(0.0, 1.0);\r\n};\r\n\r\n/**\r\n* Add this vector by another vector or value.\r\n* @method add\r\n* @param {Atlantis.Vector2} value A vector or a value to add to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.add = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x += value;\r\n        this.y += value;\r\n    }\r\n    else {\r\n        this.x += value.x;\r\n        this.y += value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Add two vectors.\r\n* @method add\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.add = function (vec1, vec2) {\r\n    var vector = Atlantis.Vector2.fromVector(vec1);\r\n    vector.add(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.addToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x + vec2.x;\r\n    result.y = vec1.y + vec2.y;\r\n};\r\n\r\n/**\r\n* Substract this vector by another vector or value.\r\n* @method subtract\r\n* @param {Atlantis.Vector2} value A vector or a value to subtract to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.subtract = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x -= value;\r\n        this.y -= value;\r\n    }\r\n    else {\r\n        this.x -= value.x;\r\n        this.y -= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Subtract two vectors.\r\n* @method subtract\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.subtract = function (vec1, vec2) {\r\n    var vector = Atlantis.Vector2.fromVector(vec1);\r\n    vector.subtract(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.subtractToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x - vec2.x;\r\n    result.y = vec1.y - vec2.y;\r\n};\r\n\r\n/**\r\n* Divide this vector by another vector\r\n* @method divide\r\n* @param {Atlantis.Vector2} value A vector or a value to divide to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.divide = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x /= value;\r\n        this.y /= value;\r\n    }\r\n    else {\r\n        this.x /= value.x;\r\n        this.y /= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Divide two vectors.\r\n* @method divide\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.divide = function (vec1, vec2) {\r\n    var vector = Atlantis.Vector2.fromVector(vec1);\r\n    vector.divide(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.divideToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x / vec2.x;\r\n    result.y = vec1.y / vec2.y;\r\n};\r\n\r\n/**\r\n* Multiply this vector by another vector or a value.\r\n* @method multiply\r\n* @param {Atlantis.Vector2} value A vector or a value to multiply to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.multiply = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x *= value;\r\n        this.y *= value;\r\n    }\r\n    else {\r\n        this.x *= value.x;\r\n        this.y *= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Multiply two vectors.\r\n* @method multiply\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.multiply = function (vec1, vec2) {\r\n    var vector = Atlantis.Vector2.fromVector(vec1);\r\n    vector.multiply(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.multiplyToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x * vec2.x;\r\n    result.y = vec1.y * vec2.y;\r\n};\r\n\r\n/**\r\n* Gets distance between this vector and the vector passed in parameter.\r\n* @method getDistance\r\n* @param {Atlantis.Vector2} vector2 The vector2 to use to determine the distance.\r\n* @return {Number} The distance between this vector and the vector passed in parameter.\r\n*/\r\nAtlantis.Vector2.prototype.distance = function (vector2) {\r\n    return Atlantis.Vector2.distance(this, vector2);\r\n};\r\n\r\n/**\r\n* Gets the distance between two vectors.\r\n* @method distance\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.distance = function (vec1, vec2) {\r\n    var v1 = vec1.x - vec2.x;\r\n    var v2 = vec1.y - vec2.y;\r\n    return Math.sqrt((v1 * v1) + (v2 * v2));\r\n};\r\n\r\nAtlantis.Vector2.prototype.dot = function (vec2) {\r\n    return Atlantis.Vector2.dot(this, vec2);\r\n};\r\n\r\n/**\r\n* Calculate the dot product of two vectors.\r\n* @method dot\r\n* @static\r\n* @param {Atlantis.Vector2} First vector to use.\r\n* @param {Atlantis.Vector2} Second vector to use.\r\n* @return {Number} Return the dot product of the two vectors.\r\n*/\r\nAtlantis.Vector2.dot = function (vec1, vec2) {\r\n    return (vec1.x * vec2.x) + (vec1.y * vec2.y);\r\n};\r\n\r\n/**\r\n* Gets the length of the vector.\r\n* @return {Number} Return the length of the vector.\r\n*/\r\nAtlantis.Vector2.prototype.length = function () {\r\n    return Atlantis.Vector2.length(this);\r\n};\r\n\r\nAtlantis.Vector2.length = function (vec2) {\r\n    return Math.sqrt((vec2.x * vec2.x) + (vec2.y * vec2.y));\r\n};\r\n\r\n/**\r\n* Performs a linear interpolation between to vectors.\r\n* @method lerp\r\n* @static\r\n* @param {Atlantis.Vector2} First vector to use.\r\n* @param {Atlantis.Vector2} Second vector to use.\r\n* @param amount\r\n* @return\r\n*/\r\nAtlantis.Vector2.lerp = function (vec1, vec2, amount) {\r\n    var vector = Atlantis.Vector2.fromVector(vec1);\r\n    Atlantis.Vector2.lerpToRef(vec1, vec2, amount, vector);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.lerpToRef = function (vec1, vec2, amount, result) {\r\n    result.x = Atlantis.MathHelper.lerp(vec1.x, vec2.x, amount);\r\n    result.y = Atlantis.MathHelper.lerp(vec1.y, vec2.y, amount);\r\n};\r\n\r\n/**\r\n* Gets a vector of the minimum of the two vectors.\r\n* @method min\r\n* @static\r\n* @param vec1\r\n* @param vec2\r\n* @return Return a vector that correspond of the minimum of the two vectors.\r\n*/\r\nAtlantis.Vector2.min = function (vec1, vec2) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.Vector2.minToRef(vec1, vec2, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.minToRef = function (vec1, vec2, result) {\r\n    result.x = (vec1.x < vec2.x) ? vec1.x : vec2.x;\r\n    result.y = (vec1.y < vec2.y) ? vec1.y : vec2.y;\r\n};\r\n\r\n/**\r\n* Gets a vector of the maximum of the two vectors.\r\n* @method max\r\n* @static\r\n* @param vec1\r\n* @param vec2\r\n* @return Return a vector that correspond of the maximum of the two vectors.\r\n*/\r\nAtlantis.Vector2.max = function (vec1, vec2) {\r\n    var result = new Vector2();\r\n    Atlantis.Vector2.maxToRef(vec1, vec2, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.maxToRef = function (vec1, vec2, result) {\r\n    result.x = (vec1.x > vec2.x) ? vec1.x : vec2.x;\r\n    result.y = (vec1.y > vec2.y) ? vec1.y : vec2.y;\r\n};\r\n\r\n/**\r\n* Negate this vector\r\n* @method negate\r\n*/\r\nAtlantis.Vector2.prototype.negate = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x = -value;\r\n        this.y = -value;\r\n    }\r\n    else {\r\n        this.x = -value.x;\r\n        this.y = -value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Negate a vector.\r\n* @method negate\r\n* @static\r\n* @param {Atlantis.Vector2} A vector to use.\r\n* @return {Atlantis.Vector2} Return the negated vector.\r\n*/\r\nAtlantis.Vector2.negate = function (vector) {\r\n    var vec = Atlantis.Vector2.fromVector(vector);\r\n    vec.x *= -1;\r\n    vec.y *= -1;\r\n    return vec;\r\n};\r\n\r\n/**\r\n* Normalize this vector.\r\n* @method normalize\r\n*/\r\nAtlantis.Vector2.prototype.normalize = function () {\r\n    Atlantis.Vector2.normalizeToRef(this);\r\n};\r\n\r\n/** Gets a normalized vector.\r\n* \r\n* @method normalize\r\n* @static\r\n* @param {Atlantis.Vector2} A vector to normalize.\r\n*/\r\nAtlantis.Vector2.normalize = function (vector) {\r\n    var vec = Atlantis.Vector2.fromVector(vector);\r\n    vec.normalize();\r\n    return vec;\r\n};\r\n\r\nAtlantis.Vector2.normalizeToRef = function (vector) {\r\n    var distance = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\r\n\r\n    if (!distance) {\r\n        vector.x = 0;\r\n        vector.y = 0;\r\n    }\r\n\r\n    var value = 1.0 / distance;\r\n    \r\n    vector.x *= value;\r\n    vector.y *= value;\r\n};\r\n\r\nAtlantis.Vector2.reflect = function (vector, normal) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.ReflectToRef(vector, normal, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.reflectToRef = function (vector, normal, result) {\r\n    var val = 2 * ((vector.x * normal.x) + (vector.y * normal.y));\r\n    result.x = vector.x - (normal.x * val);\r\n    result.y = vector.y - (normal.y * val);\r\n};\r\n\r\nAtlantis.Vector2.smoothStep = function (value1, value2, amount) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.Vector2.smoothStepToRef(value1, value2, amount, result);\r\n    return result;\r\n}\r\n\r\nAtlantis.Vector2.smoothStepToRef = function (value1, value2, amount, result) {\r\n    result.x = Atlantis.MathHelper.smoothStep(value1.x, value2.x, amount);\r\n    result.y = Atlantis.MathHelper.smoothStep(value1.y, value2.y, amount);\r\n}\r\n\r\n/**\r\n* Gets a transformed vector from a position and a matrix.\r\n* @method transform\r\n* @param {Atlantis.Vector2} position\r\n* @param {Atlantis.Matrix} matrix\r\n* @return {Atlantis.Vector2} A tranformed vector.\r\n*/\r\nAtlantis.Vector2.transform = function (position, matrix) {\r\n    var vector = new Atlantis.Vector3();\r\n    Atlantis.Vector2.transformToRef(position, matrix, vector);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.transformToRef = function (position, matrix, result) {\r\n    var x = (position.x * matrix.M11) + (position.y * matrix.M21) + matrix.M41;\r\n    var y = (position.x * matrix.M12) + (position.y * matrix.M22) + matrix.M42;\r\n    result.x = x;\r\n    result.x = y;\r\n};\r\n\r\nAtlantis.Vector2.transformNormal = function (normal, matrix) {\r\n    var vector = new Atlantis.Vector3();\r\n    Atlantis.Vector2.transformNormalToRef(normal, matrix, vector);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.transformNormalToRef = function (normal, matrix, result) {\r\n    var x = (normal.x * matrix.M11) + (normal.y * matrix.M21);\r\n    var y = (normal.x * matrix.M12) + (normal.y * matrix.M22);\r\n    result.x = x;\r\n    result.y = y;\r\n};\r\n\r\n/**\r\n* Sets the coordinates.\r\n* @method set\r\n* @param {Number} X value.\r\n* @param {Number} Y value.\r\n*/\r\nAtlantis.Vector2.prototype.set = function (x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector2.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y].join(\"\");\r\n};\r\n\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n* Create a vector with three coordinates. If you pass a Vector3 in first parameter,\r\n* its filed are copied to the new vector (work like a copy constructor).\r\n* @constructor\r\n* @class Vector3\r\n* @param {Number|Atlantis.Vector3} The X value or a Vector3 object     * @param {Number} The Y value.\r\n* @param {Number} The Z value.\r\n*/\r\nAtlantis.Vector3 = function (x, y, z) {\r\n    if (x instanceof Atlantis.Vector3) {\r\n        this.x = x.x;\r\n        this.y = x.y;\r\n        this.z = x.z;\r\n    }\r\n    else {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.z = z || 0;\r\n    }\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to zero.\r\n * @method Zero\r\n */\r\nAtlantis.Vector3.Zero = function () {\r\n    return new Atlantis.Vector3(0, 0, 0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to one.\r\n * @method One\r\n */\r\nAtlantis.Vector3.One = function () {\r\n    return new Atlantis.Vector3(1.0, 1.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method UnitX\r\n */\r\nAtlantis.Vector3.UnitX = function () {\r\n    return new Atlantis.Vector3(1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method UnitY\r\n */\r\nAtlantis.Vector3.UnitY = function () {\r\n    return new Atlantis.Vector3(0.0, 1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to one.\r\n * @method UnitZ\r\n */\r\nAtlantis.Vector3.UnitZ = function () {\r\n    return new Atlantis.Vector3(0.0, 0.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method Up\r\n */\r\nAtlantis.Vector3.Up = function () {\r\n    return new Atlantis.Vector3(0.0, 1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to -1.\r\n * @method Down\r\n */\r\nAtlantis.Vector3.Down = function () {\r\n    return new Atlantis.Vector3(0.0, -1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method Right\r\n */\r\nAtlantis.Vector3.Right = function () {\r\n    return new Atlantis.Vector3(1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to -1.\r\n * @method Left\r\n */\r\nAtlantis.Vector3.Left = function () {\r\n    return new Atlantis.Vector3(-1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to -1.\r\n * @method Forward\r\n */\r\nAtlantis.Vector3.Forward = function () {\r\n    return new Atlantis.Vector3(0.0, 0.0, -1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to one.\r\n * @method Backward\r\n */\r\nAtlantis.Vector3.Backward = function () {\r\n    return new Atlantis.Vector3(0.0, 0.0, 1.0);\r\n};\r\n\r\n/**\r\n* Add a Vector3 to the current vector.\r\n* @method add\r\n* @param {Number|Atlantis.Vector3} vector The Vector3 to add.\r\n*/\r\nAtlantis.Vector3.prototype.add = function (vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n    }\r\n    else {\r\n        this.x += vector;\r\n        this.y += vector;\r\n        this.z += vector;\r\n    }\r\n};\r\n\r\n/**\r\n* Add two vectors.\r\n* @method add\r\n* @static\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Atlantis.Vector3} Return a new Vector3\r\n*/\r\nAtlantis.Vector3.add = function (vec1, vec2) {\r\n    var result = new Vector3(vec1);\r\n    result.add(vec2);\r\n    return result;\r\n};\r\n\r\n/**\r\n* Subtract a Vector3 to the current vector.\r\n* @method subtract\r\n* @param {Number|Atlantis.Vector3} vector The Vector3 to Subtract.\r\n*/\r\nAtlantis.Vector3.prototype.subtract = function (vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n        this.z -= vector.z;\r\n    }\r\n    else {\r\n        this.x -= vector;\r\n        this.y -= vector;\r\n        this.z -= vector;\r\n    }\r\n};\r\n\r\n/**\r\n* Subtract two vectors.\r\n* @method subtract\r\n* @static\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Atlantis.Vector3} Return a news Vector3.\r\n*/\r\nAtlantis.Vector3.subtract = function (vec1, vec2) {\r\n    var result = new Atlantis.Vector3(vec1);\r\n    result.subtract(vec2);\r\n    return result;\r\n}\r\n\r\n/**\r\n* divide a Vector3 to the current vector.\r\n* @method divide\r\n* @param {Atlantis.Vector3} vector The Vector3 to divide.\r\n*/\r\nAtlantis.Vector3.prototype.divide = function (vector) {\r\n    if (vector.x != 0) {\r\n        this.x /= vector.x;\r\n    }\r\n    if (vector.y != 0) {\r\n        this.y /= vector.y;\r\n    }\r\n    if (vector.z != 0) {\r\n        this.z /= vector.z;\r\n    }\r\n};\r\n\r\n/**\r\n* Divide two vectors.\r\n* @method divide\r\n* @static\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Atlantis.Vector3} Return a new Vector3.\r\n*/\r\nAtlantis.Vector3.divide = function (vec1, vec2) {\r\n    var vector = new Atlantis.Vector3(vec1);\r\n    vector.divide(vec2);\r\n    return vector;\r\n}\r\n\r\n/**\r\n* multiply a Vector3 to the current vector.\r\n* @method multiply\r\n* @param {Number|Atlantis.Vector3} vector The Vector3 to multiply.\r\n*/\r\nAtlantis.Vector3.prototype.multiply = function (vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        this.z *= vector.z;\r\n    }\r\n    else {\r\n        this.x *= vector;\r\n        this.y *= vector;\r\n        this.z *= vector;\r\n    }\r\n};\r\n\r\n/**\r\n* Multiply a two vectors.\r\n* @method multiply\r\n* @param {Atlantis.Vector3} A vector.\r\n* @param {Atlantis.Vector3} Another vector.\r\n* @return {Atlantis.Vector3} Return a new vector.\r\n*/\r\nAtlantis.Vector3.multiply = function (vec1, vec2) {\r\n    var vector = new Atlantis.Vector3(vec1);\r\n    vector.multiply(vec2);\r\n    return vector;\r\n};\r\n\r\n/**\r\n* Calculates the cross products of two vectors.\r\n* @method cross\r\n* @static\r\n* @param {Atlantis.Vector3} vec1 Fist vector to use.\r\n* @param {Atlantis.Vector3} vec2 Second vector to use.\r\n* @return {Atlantis.Vector3} the cross products of the two vectors.\r\n*/\r\nAtlantis.Vector3.cross = function (vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.y * vec2.z) - (vec2.y * vec1.z);\r\n    vector.y = -((vec1.x * vec2.z) - (vec2.x * vec1.z));\r\n    vector.z = (vec1.x * vec2.y) - (vec2.x * vec1.y);\r\n    return vector;\r\n};\r\n\r\n/**\r\n* Gets the distance between two vectors.\r\n* @method distance\r\n* @static\r\n* @param {Atlantis.Vector3} vector\r\n* @return {Number} Return the distance between two vectors.\r\n*/\r\nAtlantis.Vector3.distance = function (vec1, vec2) {\r\n    return Math.sqrt(Atlantis.Vector3.distanceSquared(vec1, vec2));\r\n};\r\n\r\n/**\r\n* Gets the distance squared between to vectors.\r\n* @method distanceSquared\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Number}\r\n*/\r\nAtlantis.Vector3.distanceSquared = function (vec1, vec2) {\r\n    var dx = vec1.x - vec2.x;\r\n    var dy = vec1.y - vec2.y;\r\n    var dz = vec1.z - vec2.z;\r\n    return (dx * dx) + (dy * dy) + (dz * dz);\r\n};\r\n\r\n/**\r\n* Calculates the dot product of two vectors.\r\n* @method dot\r\n* @static\r\n* @param {Atlantis.Vector3} vec1 First vector to use.\r\n* @param {Atlantis.Vector3} vec2 Second vector to use.\r\n* @return {Number} Return the dot product of two vectors.\r\n*/\r\nAtlantis.Vector3.dot = function (vec1, vec2) {\r\n    return (vec1.x * vec2.x) + (vec1.y * vec2.y) + (vec1.z * vec2.z);\r\n};\r\n\r\n/**\r\n* Gets the length of the vector.\r\n* @method length\r\n* @return {Number} Return the length of the vector.\r\n*/\r\nAtlantis.Vector3.prototype.length = function () {\r\n    return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));\r\n};\r\n\r\n/**\r\n* Linear interpolation between this vector and the vector passed in parameter.\r\n* @method lerp\r\n* @param {Atlantis.Vector3} vector A vector to use for interpolation\r\n* @param {Number} amount Value between 0 and 1 indicating the weight of vector.\r\n*/\r\nAtlantis.Vector3.prototype.lerp = function (vector, amount) {\r\n    this.x = Atlantis.MathHelper.lerp(this.x, vector.x, amount);\r\n    this.y = Atlantis.MathHelper.lerp(this.y, vector.y, amount);\r\n    this.z = Atlantis.MathHelper.lerp(this.z, vector.z, amount);\r\n};\r\n\r\n/**\r\n* Linearly interpolates between two vectors.\r\n* @method lerp\r\n* @static\r\n* @param {Atlantis.Vector3} vec1 First vector\r\n* @param {Atlantis.Vector3} vec2 Second vector\r\n* @param amount Value between 0 and 1 indicating the weight of vec2.\r\n* @return {Atlantis.Vector3} Return a interpolated Vector3.\r\n*/\r\nAtlantis.Vector3.lerp = function (vec1, vec2) {\r\n    var x = Atlantis.MathHelper.lerp(vec1.x, vec2.x, amount);\r\n    var y = Atlantis.MathHelper.lerp(vec1.y, vec2.y, amount);\r\n    var z = Atlantis.MathHelper.lerp(vec1.z, vec2.z, amount);\r\n    return new Atlantis.Vector3(x, y, z); ;\r\n};\r\n\r\n/**\r\n* Gets a vector of the minimum of the two vectors.\r\n* @method min\r\n* @static\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Atlantis.Vector3} Return a vector that correspond of the minimum of the two vectors.\r\n*/\r\nAtlantis.Vector3.min = function (vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.x < vec2.x) ? vec1.x : vec2.x;\r\n    vector.y = (vec1.y < vec2.y) ? vec1.y : vec2.y;\r\n    vector.z = (vec1.z < vec2.z) ? vec1.z : vec2.z;\r\n    return vector;\r\n};\r\n\r\n/**\r\n* Gets a vector of the maximum of the two vectors.\r\n* @method max\r\n* @static\r\n* @param {Atlantis.Vector3} vec1\r\n* @param {Atlantis.Vector3} vec2\r\n* @return {Atlantis.Vector3} Return a vector that correspond of the maximum of the two vectors.\r\n*/\r\nAtlantis.Vector3.max = function (vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.x > vec2.x) ? vec1.x : vec2.x;\r\n    vector.y = (vec1.y > vec2.y) ? vec1.y : vec2.y;\r\n    vector.z = (vec1.z > vec2.z) ? vec1.z : vec2.z;\r\n    return vector;\r\n}\r\n\r\n/**\r\n* Negate the vector.\r\n* @method negate\r\n*/\r\nAtlantis.Vector3.prototype.negate = function () {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n};\r\n\r\n/**\r\n* Negate a vector.\r\n* @method negate\r\n* @static\r\n* @param {Atlantis.Vector3} vector The vector to negate.\r\n* @return {Atlantis.Vector3} Return a negated vector.\r\n*/\r\nAtlantis.Vector3.negate = function (vector) {\r\n    var vec = new Atlantis.Vector3(vector);\r\n    vec.negate();\r\n    return vec;\r\n};\r\n\r\n/**\r\n * Normalize vector.\r\n * @static\r\n * @method normalize\r\n */\r\nAtlantis.Vector3.prototype.normalize = function () {\r\n    var factor = distance(this, new Atlantis.Vector3());\r\n\r\n    if (factor != 0) {\r\n        factor = 1.0 / factor;\r\n        this.set(this.x * factor, this.y * factor, this.z * factor);\r\n    }\r\n};\r\n\r\n/**\r\n * Normalize a vector.\r\n * @method normalize\r\n * @param {Atlantis.Vector3} vector A vector to normalize.\r\n * @return {Atlantis.Vector3} result A normalized vector.\r\n */\r\nAtlantis.Vector3.normalize = function (vector) {\r\n    var result = new Vector3(vector);\r\n    result.normalize();\r\n    return result;\r\n};\r\n\r\n/**\r\n * Gets a transformed Vector3 from a position and a matrix.\r\n * @method tranform\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Matrix} matrix\r\n * @return {Atlantis.Vector3} A tranformed vector.\r\n */\r\nAtlantis.Vector3.transform = function (position, matrix) {\r\n    var vector = new Vector3(\r\n        (position.x * matrix.M11) + (position.y * matrix.M21) + (position.z * matrix.M31) + matrix.M41,\r\n        (position.x * matrix.M12) + (position.y * matrix.M22) + (position.z * matrix.M32) + matrix.M42,\r\n        (position.x * matrix.M13) + (position.y * matrix.M23) + (position.z * matrix.M33) + matrix.M43 \r\n    );\r\n\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Gets an homogeneous transformed vector from a position and a matrix.\r\n * @method transformCoordinate\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Matrix} matrix\r\n * @return {Atlantis.Vector4} A tranformed vector.\r\n */\r\nAtlantis.Vector3.transformCoordinate = function (position, transform) {\r\n    var vector = new Atlantis.Vector4();\r\n    vector.x = (position.x * transform.M11) + (position.y * transform.M21) + (position.z * transform.M31) + transform.M41;\r\n    vector.y = (position.x * transform.M12) + (position.y * transform.M22) + (position.z * transform.M32) + transform.M42;\r\n    vector.z = (position.x * transform.M13) + (position.y * transform.M23) + (position.z * transform.M33) + transform.M43;\r\n    vector.w = 1.0 / ((position.x * transform.M14) + (position.y * transform.M24) + (position.z * transform.M34) + transform.M44);\r\n    return new Atlantis.Vector3(vector.x * vector.w, vector.y * vector.w, vector.z * vector.w);\r\n};\r\n\r\n/**\r\n * Changes the 3 coordinates.\r\n * @method set\r\n * @param x The new X coordinate.\r\n * @param y The new Y coordinate.\r\n * @param z The new Z coordinate.\r\n */\r\nAtlantis.Vector3.prototype.set = function (x, y, z) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector3.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * A vector4 class.\r\n * @constructor\r\n * @class Vector4\r\n * @param {Number|Atlantis.Vector4} Value for x coordinate or a Vector4 object.\r\n * @param {Number} Value for y coordinate\r\n * @param {Number} Value for z coordinate.\r\n * @param {Number} Value for w coordinate.\r\n */\r\nAtlantis.Vector4  = function (x, y, z, w) {\r\n    if (x instanceof Atlantis.Vector4) {\r\n        this.x = x.x;\r\n        this.y = x.y;\r\n        this.z = x.z;\r\n        this.w = x.w;\r\n    }\r\n    else {\r\n        this.x = x || 0;\r\n        this.y = y || 0;\r\n        this.z = z || 0;\r\n        this.w = w || 0;\r\n    }\r\n};\r\n\r\n/**\r\n * Linear interpolation.\r\n * @method lerp\r\n * @param {Atlantis.Vector4} vector A vector to use for interpolation\r\n * @param {Number} amount Value between 0 and 1 indicating the weight of vector.\r\n */\r\nAtlantis.Vector4.prototype.lerp = function (vector, amount) {\r\n    this.x = Atlantis.MathHelper.lerp(this.x, vector.x, amount);\r\n    this.y = Atlantis.MathHelper.lerp(this.y, vector.y, amount);\r\n    this.z = Atlantis.MathHelper.lerp(this.z, vector.z, amount);\r\n    this.w = Atlantis.MathHelper.lerp(this.w, vector.w, amount);\r\n};\r\n\r\n/**\r\n * Linearly interpolates between two vectors.\r\n * @method lerp\r\n * @static\r\n * @param {Atlantis.Vector4} vec1 First vector\r\n * @param {Atlantis.Vector4} vec2 Second vector\r\n * @param {Number} amount Value between 0 and 1 indicating the weight of vec2.\r\n * @return {Atlantis.Vector4} Return a interpolated Vector3.\r\n */\r\nAtlantis.Vector4.lerp = function (vec1, vec2, amount) {\r\n    var vector = new Vector4(vec1);\r\n    vector.lerp(vec2, amount);\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector4.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z, \" w: \", this.w].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n// --------------------------------------- //\r\n// ---  Keyboard State implementation  --- //\r\n// --------------------------------------- //\r\n\r\n/**\r\n * Define a keyboard state.\r\n * @class KeyboardState\r\n * @constructor\r\n */\r\nAtlantis.KeyboardState = function (keys) {\r\n    this.keys = [];\r\n    // Cloning the array\r\n    for (var i = 0, l = keys.length; i < l; i++) {\r\n        this.keys.push(keys[i]);\r\n    }\r\n};\r\n\r\nAtlantis.KeyboardState.prototype.clone = function () {\r\n    return new Atlantis.Input.KeyboardState(this.keys);\r\n};\r\n\r\n/**\r\n* Determine if the key is pressed.\r\n* @method isKeyDown\r\n* @param {Number} button The button to test.\r\n* @return {Boolean} Return true if the key is pressed.\r\n*/\r\nAtlantis.KeyboardState.prototype.isKeyDown = function (key) {\r\n    return this.keys[key] === true;\r\n};\r\n\r\n/**\r\n* Determine if the key is pressed.\r\n* @method isKeyUp\r\n* @param {Number} button The button to test.\r\n* @return {Boolean} Return true if the key is released.\r\n*/\r\nAtlantis.KeyboardState.prototype.isKeyUp = function (key) {\r\n    return this.keys[key] === false;\r\n};\r\n\r\n// --------------------------------------- //\r\n// --- Keyboard Manager implementation --- //\r\n// --------------------------------------- //\r\n\r\n/**\r\n * A keyboard input manager.\r\n * @constructor\r\n * @class KeyboardManager\r\n */\r\nAtlantis.Keyboard = function (maxKeys) {\r\n    this.keys = [];\r\n    this.maxKeys = maxKeys || 130;\r\n\r\n    for (var i = 0; i < maxKeys; i++) {\r\n        this.keys[i] = false;\r\n    }\r\n\r\n    var that = this;\r\n\r\n    var onKeyStateChange = function (event) {\r\n        if (Atlantis.Keyboard.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        that.keys[event.keyCode] = (event.type === \"keydown\") ? true : false;\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", onKeyStateChange, false);\r\n    document.addEventListener(\"keyup\", onKeyStateChange, false);\r\n};\r\n\r\nAtlantis.Keyboard.preventDefault = false;\r\n\r\n/**\r\n * Gets the current state of the keyboard.\r\n * @method getState\r\n * @return {Atlantis.KeyboardState} Return the state of the keyboard.\r\n */\r\nAtlantis.Keyboard.prototype.getState = function () {\r\n    return new Atlantis.KeyboardState(this.keys);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n* Define a button state which is released or pressed.\r\n* @class ButtonState\r\n* @static\r\n*/\r\nAtlantis.ButtonState = { Released: 0, Pressed: 1 };\r\n\r\n// ---\r\n// --- MouseState implementation\r\n// ---\r\n\r\n/**\r\n * Define a mouse state.\r\n * @class MouseState\r\n * @constructor\r\n * @param {Number} x The position of the cursor on X axis.\r\n * @param {Number} y The position of the cursor on Y axis.\r\n * @param {Number} scroolWheelValue The value of the scroll\r\n * @param {Array} buttons An array with the states of each buttons\r\n */\r\nAtlantis.MouseState = function (x, y, scrollWheelValue, buttons) {\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.scrollWheelValue = scrollWheelValue;\r\n\tthis.leftButton = buttons[0];\r\n\tthis.rightButton = buttons[2];\r\n\tthis.middleButton = buttons[1];\r\n};\r\n\r\n/**\r\n * Clone the current state.\r\n * @method clone\r\n * @return {Atlantis.MouseState} Return a clone of this instance.\r\n */\r\nAtlantis.MouseState.prototype.clone = function () {\r\n    return new Atlantis.MouseState(this.x, this.y, this.scrollWheelValue, [this.leftButton, this.middleButton, this.rightButton]);\r\n};\r\n\r\n// ---\r\n// --- Mouse implementation\r\n// ---\r\n\r\n/**\r\n * The Mouse class is responsible to manage mouse events.\r\n * @class Mouse\r\n * @constructor\r\n * @param {HTMLElement} domElement The DOM element to use (default is document.body).\r\n */\r\nAtlantis.Mouse = function (domElement) {\r\n\tvar domElement = (domElement instanceof HTMLElement) ? domElement : document.body;\r\n\tthis._x = 0;\r\n\tthis._y = 0;\r\n\tthis._scroll = 0;\r\n\tthis._buttons = [];\r\n\tthis._buttons[0] = false; // Left\r\n\tthis._buttons[1] = false; // Middle\r\n\tthis._buttons[2] = false; // Right\r\n    this.preventDefault = true;\r\n\r\n\tvar that = this;\r\n\r\n\tvar resetButtonState = function () {\r\n\t\tthat._buttons[0] = false;\r\n\t\tthat._buttons[1] = false;\r\n\t\tthat._buttons[2] = false;\r\n\t};\r\n\r\n\tvar onMouseEvent = function (event) {\r\n\t\tthat._x = (event.pageX - domElement.offsetLeft) * Atlantis.Game.scaleFactor.x;\r\n\t\tthat._y = (event.pageY - domElement.offsetTop) * Atlantis.Game.scaleFactor.y;\r\n\r\n\t\tif (event.type === \"mousemove\" || event.type === \"pointermove\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresetButtonState();\r\n     \r\n\t\tif ((event.type === \"mousedown\") || (event.type === \"pointerdown\")) {\r\n\t\t\tthat._buttons[event.button] =  true;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthat._buttons[event.button] = false;\r\n\t\t}\r\n\t};\r\n\r\n\tvar onMouseScroll = function (event) {\r\n\t\tthat._scroll = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n\t};\r\n\r\n\tdomElement.addEventListener(\"mousedown\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mousemove\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mouseup\", onMouseEvent, false);\r\n\r\n\t//domElement.addEventListener(\"click\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mousewheel\", onMouseScroll, false);\r\n\tdomElement.addEventListener(\"DOMMouseScroll\", onMouseScroll, false);\r\n};\r\n\r\n/**\r\n * Gets the state of the mouse.\r\n * @method getState\r\n * @return {Atlantis.MouseState} Return the state of the mouse at this time.\r\n */\r\nAtlantis.Mouse.prototype.getState = function () {\r\n\treturn new Atlantis.MouseState(this._x, this._y, this._scroll, this._buttons);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define the type of touch event\r\n * - Invalid\r\n * - Moved\r\n * - Pressed\r\n * - Released\r\n * @class TouchLocationState\r\n * @static\r\n */\r\nAtlantis.TouchLocationState = {\r\n\tInvalid: 1, \r\n    Moved: 2, \r\n    Pressed: 3, \r\n    Released: 4\r\n};\r\n\r\nAtlantis.TouchCollection = function (touchStates) {\r\n\tArray.call(this);\r\n\r\n\tvar touchStates = touchStates || [];\r\n\tfor (var i = 0, l = touchStates.length; i < l; i++) {\r\n\t\tthis.push(new Atlantis.TouchPanelState(touchStates[i]));\r\n\t}\r\n};\r\n\r\nAtlantis.TouchCollection.prototype = Object.create(Array.prototype);\r\n\r\nAtlantis.TouchCollection.prototype.clone = function () {\r\n\tvar states = [];\r\n\r\n\tfor (var i = 0, l = this.length; i < l; i++) {\r\n\t\tstates.push(this[i].clone());\r\n\t}\r\n\r\n\treturn new Atlantis.TouchCollection(states);\r\n};\r\n\r\n/**\r\n * Define a touch state with a position and a touch state.\r\n * @class TouchPanelState\r\n * @constructor\r\n * @param {Object} panelState An object that contains states and position of the touch event.\r\n */\r\nAtlantis.TouchPanelState = function (panelState) {\r\n\tthis.state = panelState.state || Atlantis.TouchLocationState.Invalid;\r\n\tthis.position = panelState.position ? panelState.position : new Atlantis.Vector2(0, 0);\r\n};\r\n\r\n/**\r\n * Gets a clone of this state.\r\n * @method clone\r\n * @return {Atlantis.TouchPanelState} Return a clone of this instance.\r\n */\r\nAtlantis.TouchPanelState.prototype.clone = function () {\r\n\treturn new Atlantis.TouchPanelState({ state: this.state, position: { x: this.position.x, y: this.position.y } });\r\n};\r\n\r\n/**\r\n * This class is responsible to manage touch events.\r\n * @class TouchPanel\r\n * @constructor\r\n * @param {HTMLElement} The DOM element to use for events (default is document.body).\r\n */\r\nAtlantis.TouchPanel = function (domElement) {\r\n\tthis._states = [\r\n\t\tnew Atlantis.TouchPanelState({}),\r\n\t\tnew Atlantis.TouchPanelState({}),\r\n\t\tnew Atlantis.TouchPanelState({})\r\n\t];\r\n\r\n\tvar eventNames = {\r\n\t\tup: \"touchend\",\r\n\t\tdown: \"touchstart\",\r\n\t\tcancel: \"touchcancel\",\r\n\t\tmove: \"touchmove\",\r\n\t\tcallback: null\r\n\t};\r\n\r\n\tvar that = this;\r\n\tvar lastEventType = null;\r\n\tvar isPointerEvent = false;\r\n\r\n\tvar wrapEvent = function (id, event) {\t\t\r\n\t\tif (!that._states[id]) {\r\n\t\t\tthat._states[id] = new Atlantis.TouchPanelState();\r\n\t\t}\r\n\t\t\r\n\t\tif (event.touches) {\r\n\t\t\tthat._states[id].position.x = event.touches[id].pageX - domElement.offsetLeft;\r\n\t\t\tthat._states[id].position.y = event.touches[id].pageY - domElement.offsetTop;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tthat._states[id].position.x = event.clientX - domElement.offsetLeft;\r\n\t\t\tthat._states[id].position.y = event.clientY - domElement.offsetTop;\r\n\t\t}\r\n\r\n\t\tthat._states[id].position.x *= Atlantis.Game.scaleFactor.x;\r\n\t\tthat._states[id].position.y *= Atlantis.Game.scaleFactor.y;\r\n\r\n\t\t// Special hack for pointer event because in lot of cases, a pointermove event\r\n\t\t// is triggered.\r\n\t\tif (isPointerEvent) {\r\n\t\t\tvar result = (lastEventType === eventNames.down && event.type === eventNames.move);\r\n\t\t\tlastEventType = event.type;\r\n\r\n\t\t\tif (result) {\r\n\t\t\t\tlastEventType = null;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.type == eventNames.down) {\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Pressed;\r\n\t\t}\r\n\t\telse if (event.type == eventNames.move) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Moved;\r\n\t\t}\r\n\t\telse if (event.type == eventNames.up) {\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Released;\r\n\t\t}\r\n\t\telse { \r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Invalid;\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar onTouchHandler = function (event) {\r\n\t\tif (event.type === \"touchend\" || event.type === \"touchcancel\") {\r\n\t\t\tfor (var i = 0, l = that._states.length; i < l; i++) {\r\n\t\t\t\tthat._states[i].state = event.type === \"touchend\" ? Atlantis.TouchLocationState.Released : Atlantis.TouchLocationState.Invalid;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tfor (var i = 0, l = event.touches.length; i < l; i++) {\r\n\t\t\t\twrapEvent(i, event);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\t\r\n\tvar onPointerHandler = function (event) {\r\n\t    event.preventDefault();\r\n\t    if (event.type === \"MSPointerUp\" || event.type === \"MSPointerCancel\" || event.type === \"pointerup\" || event.type === \"pointercancel\") {\r\n\t        that._states[0].state = (event.type === \"MSPointerUp\" || event.type === \"pointerup\") ? Atlantis.TouchLocationState.Released : Atlantis.TouchLocationState.Invalid;\r\n\t    }\r\n\t    else {\r\n\t        wrapEvent(0, event);\r\n\t    }\r\n\t};\r\n\r\n\tvar maxTouchPoints = +navigator.maxTouchPoints || +navigator.msMaxTouchPoints;\r\n\tif (maxTouchPoints === 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// IE11+\r\n\tif (window.PointerEvent) { // IE11+\r\n\t\teventNames.up = \"pointerup\";\r\n\t\teventNames.down = \"pointerdown\";\r\n\t\teventNames.move = \"pointermove\";\r\n\t\teventNames.cancel = \"pointercancel\";\r\n\t\teventNames.callback = onPointerHandler;\r\n\t}\r\n\telse if (window.MSPointerEvent) { // IE10\r\n\t\teventNames.up = \"MSPointerUp\";\r\n\t\teventNames.down = \"MSPointerDown\";\r\n\t\teventNames.move = \"MSPointerMove\";\r\n\t\teventNames.cancel = \"MSPointerCancel\";\r\n\t\teventNames.callback = onPointerHandler;\r\n\t}\r\n\telse { // Touch events\r\n\t\teventNames.callback = onTouchHandler;\r\n\t}\r\n\r\n\tisPointerEvent = (eventNames.down !== \"touchstart\");\r\n\r\n\tdomElement.addEventListener(eventNames.down, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.move, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.up, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.cancel, eventNames.callback, false);\r\n};\r\n\r\n/**\r\n * Gets the capabilities of the touch panel.\r\n * @method getCapabilities\r\n * @return {Object} Return an object which contains touch panel capabilities.\r\n */\r\nAtlantis.TouchPanel.prototype.getCapabilities = function () {\r\n    return { hasTouch: !!(\"ontouchstart\" in window) || !!(\"ongesturechange\" in window)  }\r\n};\r\n\r\n/** \r\n * Get the state of the touch panel at this time.\r\n * @method getState\r\n * @param {Number} id (optional) A finger id.\r\n * @return {Atlantis.TouchCollection|Atlantis.TouchPanelState} if no finger is passed, it return an array of Atlantis.TouchPanelState,\r\n *         otherwise it returns an Atlantis.TouchPanelState of the finger id passed in parameter.\r\n */\r\nAtlantis.TouchPanel.prototype.getState = function (id) {\r\n\tif (typeof(id) === \"number\") {\r\n\t\treturn new Atlantis.TouchPanelState(this._states[id] ? this._states[id] : {}) ;\r\n\t}\r\n\telse {\r\n\t\treturn new Atlantis.TouchCollection(this._states);\r\n\t}\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define buttons for the gamepad\r\n * @class GamepadButton\r\n * @static\r\n */\r\nAtlantis.GamepadButton = {\r\n    A: 0, \r\n    B: 1, \r\n    X: 2, \r\n    Y: 3, \r\n    LeftShoulder: 4, \r\n    RightShoulder: 5,\r\n    LeftTrigger: 6, \r\n    RightTrigger: 7,\r\n    Select: 8, \r\n    Start: 9, \r\n    L3: 10, \r\n    R3: 11,\r\n    DPadUp: 12,\r\n    DPadDown: 13,\r\n    DPadLeft: 14,\r\n    DPadRight: 15\r\n};\r\n\r\n/**\r\n * Define axis for the gamepad\r\n * @class GamepadAxis\r\n * @static\r\n */\r\nAtlantis.GamepadAxis = {\r\n    Horizontal: 0,\r\n    Vertical: 1,\r\n    HorizontalRight: 2,\r\n    VerticalRight: 3\r\n};\r\n\r\n// ---\r\n// --- GamepadState implementation\r\n// ---\r\n\r\n/**\r\n * Define the state of the gamepad at a specified time\r\n * @class GamepadState\r\n * @constructor\r\n * @param {Array} axis An array of axis values\r\n * @param {Array} buttons An array of buttons values (true/false)\r\n */\r\nAtlantis.GamepadState = function (axis, buttons) {\r\n    this.axis = [];\r\n    this.buttons = [];\r\n    \r\n    if (axis) {\r\n        for (var i = 0, l = axis.length; i < l; i++) {\r\n            this.axis.push(axis[i]);   \r\n        }\r\n    }\r\n    else {\r\n        for (var i = 0; i < 6; i++) {\r\n            this.axis.push(0);   \r\n        }\r\n    }\r\n    \r\n    if (buttons) {\r\n        for (var i = 0, l = buttons.length; i < l; i++) {\r\n            this.buttons.push(buttons[i]);   \r\n        }\r\n    }\r\n    else {   \r\n        for (var i = 0; i < 15; i++) {\r\n            this.buttons.push(false);   \r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Indicate if the button is down.\r\n * @method isButtonDown\r\n * @param (Number|Atlantis.GamepadButton) The identifier of the button\r\n * @param {Boolean|Number} Return the value of the button.\r\n */\r\nAtlantis.GamepadState.prototype.isButtonDown = function (button) {\r\n    return this.buttons[button];\r\n};\r\n\r\n/**\r\n * Indicate if the button is up.\r\n * @method isButtonUp\r\n * @param (Number|Atlantis.GamepadButton) The identifier of the button\r\n * @param {Boolean|Number} Return the value of the button.\r\n */\r\nAtlantis.GamepadState.prototype.isButtonUp = function (button) {\r\n    return !this.buttons[button];\r\n};\r\n\r\n/**\r\n * Gets the value of an axis.\r\n * @method getAxis\r\n * @param (Number|Atlantis.GamepadAxis) The identifier of the axis\r\n * @param {Number} Return the value of the axis between -1 and 1.\r\n */\r\nAtlantis.GamepadState.prototype.getAxis = function (axis) {\r\n    return this.axis[axis];\r\n};\r\n\r\n// ---\r\n// --- Gamepad implementation\r\n// ---\r\n\r\n/**\r\n * The gamepad class is responsible to manage gamepads connected to the device.\r\n * @class Gamepad\r\n * @constructor\r\n * @extends Atlantis.GameComponent\r\n */\r\nAtlantis.Gamepad = function () {\r\n    Atlantis.GameComponent.call(this);\r\n    this._gamepads = [];\r\n    this._states = {};\r\n};\r\n\r\nAtlantis.Gamepad.prototype = Object.create(Atlantis.GameComponent.prototype);\r\n\r\n/**\r\n * Initialize the component and start event listeners\r\n * @method initialize\r\n */\r\nAtlantis.Gamepad.prototype.initialize = function () {\r\n    var that = this;\r\n\r\n    navigator.getGamepads = navigator.getGamepads || navigator.webkitGetGamepads || navigator.msGetGamepads || navigator.webkitGamepads;\r\n \r\n    this._gamepadsSupported = navigator.getGamepads ? true : false;\r\n\r\n    window.addEventListener(\"gamepadconnected\", function (event) {\r\n        that._addGamepad(event.gamepad);\r\n    }, false);\r\n    \r\n    window.addEventListener(\"gamepaddisconnected\", function (event) {\r\n        that._removeGamepad(event.gamepad);   \r\n    }, false);\r\n};\r\n\r\n// Add a gamepad\r\nAtlantis.Gamepad.prototype._addGamepad = function (gamepad) {\r\n    this._gamepads.push(gamepad);\r\n    this._states[gamepad.index] = new Atlantis.GamepadState();\r\n};\r\n\r\n// Remove a gamepad\r\nAtlantis.Gamepad.prototype._removeGamepad = function (gamepad) {\r\n    delete this._gamepads[gamepad.index];\r\n    delete this._states[gamepad.index];\r\n};\r\n\r\nAtlantis.Gamepad.prototype._updateGamepads = function () {\r\n    var gamepads = navigator.getGamepads();\r\n\r\n    for (var i = 0; i < gamepads.length; i++) {\r\n        if (gamepads[i]) {\r\n            if (this._gamepads.indexOf(gamepads[i]) === -1) {\r\n                this._addGamepad(gamepads[i]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Update states of connected gamepads\r\n * @method update\r\n * @param {Atlantis.GameTime} gameTime\r\n */\r\nAtlantis.Gamepad.prototype.update = function (gameTime) {\r\n    if (this._gamepadsSupported) {\r\n        this._updateGamepads();\r\n\r\n        for (var i = 0, l = this._gamepads.length; i < l; i++) {\r\n            var gamepad = this._gamepads[i];\r\n\r\n            for (var j = 0, m = gamepad.buttons.length; j < m; j++) {\r\n                var btnVal = gamepad.buttons[j];\r\n                var pressed = (btnVal === 1.0) ? true : false;\r\n\r\n                if (typeof (btnVal) == \"object\") {\r\n                    pressed = btnVal.pressed;\r\n                    btnVal = btnVal.value;\r\n                }\r\n\r\n                this._states[gamepad.index].buttons[j] = pressed;\r\n            }\r\n\r\n            for (var j = 0, m = gamepad.axes.length; j < m; j++) {\r\n                this._states[gamepad.index].axis[j] = +gamepad.axes[j]|0;   \r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the state of the gamepad\r\n * @method getState\r\n * @return {Atlantis.GamepadState} Return the state at this time.\r\n */\r\nAtlantis.Gamepad.prototype.getState = function (index) {\r\n    var index = (typeof(index) !== \"undefined\") ? index : 0;\r\n    if (this._gamepads[index]) {\r\n        return new Atlantis.GamepadState(this._states[index].axis, this._states[index].buttons);\r\n    }\r\n    else {\r\n        return new Atlantis.GamepadState()\r\n    };\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * An enumeration of keys who can be pressed/released\r\n * @class Keys\r\n */\r\nAtlantis.Keys = {\r\n    BackSpace: 8,\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Shift: 16,\r\n    Control: 17,\r\n    Alt: 18,\r\n    Pause: 19,\r\n    Escape: 27,\r\n    Space: 32,\r\n    Home: 36,\r\n    End: 35,\r\n    Left: 37,\r\n    Up: 38,\r\n    Right: 39,\r\n    Down: 40,\r\n    Suppr: 46,\r\n    PageUp: 33,\r\n    PageDown: 34,\r\n    Insert: 45,\r\n    Num0: 48,\r\n    Num1: 49,\r\n    Num2: 50,\r\n    Num3: 51,\r\n    Num4: 52,\r\n    Num5: 53,\r\n    Num6: 54,\r\n    Num7: 55,\r\n    Num8: 56,\r\n    Num9: 57,\r\n    A: 65,\r\n\tB: 66,\r\n\tC: 67,\r\n\tD: 68,\r\n\tE: 69,\r\n\tF: 70,\r\n\tG: 71,\r\n\tH: 72,\r\n\tI: 73,\r\n\tJ: 74,\r\n\tK: 75,\r\n\tL: 76,\r\n\tM: 77,\r\n\tN: 78,\r\n\tO: 79,\r\n\tP: 80,\r\n\tQ: 81,\r\n\tR: 82,\r\n\tS: 83,\r\n\tT: 84,\r\n\tU: 85,\r\n\tV: 86,\r\n\tW: 87,\r\n\tX: 88,\r\n\tY: 89,\r\n\tZ: 90,\r\n\tSuper: 91,\r\n\tNumpad0: 96,\r\n\tNumpad1: 97,\r\n    Numpad2: 98,\r\n    Numpad3: 99,\r\n    Numpad4: 100,\r\n    Numpad5: 101,\r\n    Numpad6: 102,\r\n    Numpad7: 103,\r\n    Numpad8: 104,\r\n    Numpad9: 105,\r\n    F1: 112,\r\n    F2: 113,\r\n    F3: 114, \r\n    F4: 115,\r\n    F5: 116,\r\n    F6: 117,\r\n    F7: 118,\r\n    F8: 119,\r\n    F9: 120,\r\n    F10: 121,\r\n    F11: 122,\r\n    F12: 123\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n\r\n/**\r\n * An enumeration to define the scale mode\r\n * - ScaleToFit: Take all the space on the screen.\r\n * - ConserveAspectRatio: Take the maximum space but conserve the ratio.\r\n * - NoScaleCenter: Center the content on the screen.\r\n *\r\n * @static\r\n */\r\nAtlantis.ScaleMode = {\r\n    ScaleToFit: 0, ConserveAspectRatio: 1, NoScaleCenter: 2\r\n};\r\n\r\n/**\r\n* The graphics device is response to manage screen (canvas) and draws (render target).\r\n* @class GraphicsDevice\r\n* @constructor\r\n* @param {Number} width The desired screen width\r\n* @param {Number} height The desired screen height\r\n* @param {Object} settings A list of options (webGL, backBufferWidth/Height, canvas).\r\n*/\r\nAtlantis.GraphicsDevice = function (width, height, settings) {\r\n    var settings = settings || {};\r\n    settings.webGL = settings.webGL ? true : false;\r\n    settings.width = width;\r\n    settings.height = height;\r\n    \r\n    this.preferredBackBufferWidth = settings.backBufferWidth || width;\r\n    this.preferredBackBufferHeight = settings.backBufferHeight || height;\r\n\r\n    this.disableSmoothing = false;\r\n    this.forceDisableSmoothing = false;\r\n  \r\n    this.viewport = new Atlantis.Rectangle();\r\n    this.scaleMode = Atlantis.ScaleMode.ScaleToFit;\r\n    this._backBufferCache = document.createElement(\"canvas\");\r\n    \r\n    if (width && height) {\r\n        // The front buffer (what you see).\r\n        this._frontBuffer = new Atlantis.RenderTarget(width, height, settings.webGL, settings.canvas);\r\n        this._fbContext = this._frontBuffer.getContext();\r\n        \r\n        // The back buffer (what you don't see).\r\n        this._backBuffer = new Atlantis.RenderTarget(this.preferredBackBufferWidth, this.preferredBackBufferHeight, settings.webGL);\r\n        this._bbCanvas = this._backBuffer.getCanvas();\r\n\r\n        var canvas = this._frontBuffer.getCanvas();\r\n        canvas.style.msTouchAction = \"none\";\r\n        canvas.style.backgroundColor = \"#000\";\r\n        canvas.id = canvas.id ? canvas.id : \"AtlantisCanvas\";\r\n        \r\n        this.viewport.setSize(this.preferredBackBufferWidth, this.preferredBackBufferHeight);\r\n    }\r\n};\r\n\r\n/**\r\n * Apply the values of preferredBackBufferWidth/Height to the screen.\r\n * The back buffer is moved according to the scale mode.\r\n * Note that an event of type Atlantis.event.ResolutionChanged is fired at the end of the process.\r\n * @method applyChanges\r\n */\r\nAtlantis.GraphicsDevice.prototype.applyChanges = function () {\r\n    this._backBuffer.setSize(this.preferredBackBufferWidth, this.preferredBackBufferHeight);\r\n    \r\n    var fbWidth = this._frontBuffer.getWidth(),\r\n        fbHeight = this._frontBuffer.getHeight();\r\n        \r\n    // If the screen size AND the backbuffer size are the same OR the scale mode is scale to fit.\r\n    if (this.scaleMode == Atlantis.ScaleMode.ScaleToFit || ((fbWidth === this.preferredBackBufferWidth) && (fbHeight === this.preferredBackBufferHeight))) {\r\n        this.viewport.set(0, 0, fbWidth, fbHeight);\r\n    }\r\n    else if (this.scaleMode == Atlantis.ScaleMode.ConserveAspectRatio) {   \r\n        var diffPercent = 0;\r\n        \r\n        if (this.preferredBackBufferWidth > this.preferredBackBufferHeight) {\r\n            diffPercent = (this.preferredBackBufferWidth / fbWidth);\r\n            this.viewport.width = fbWidth;\r\n            this.viewport.height = this.preferredBackBufferHeight * (1 + diffPercent);\r\n        }\r\n        else {\r\n            diffPercent = (this.preferredBackBufferHeight / fbHeight);\r\n            this.viewport.width = this.preferredBackBufferWidth * (1 + diffPercent);\r\n            this.viewport.height = fbHeight;\r\n        }\r\n        \r\n        this.viewport.x = fbWidth / 2 - this.viewport.width /  2;\r\n        this.viewport.y = fbHeight / 2 - this.viewport.height / 2;\r\n    }\r\n    else if (this.scaleMode == Atlantis.ScaleMode.NoScaleCenter) {\r\n        this.viewport.x = (fbWidth / 2) - (this.preferredBackBufferWidth / 2);\r\n        this.viewport.y =(fbHeight / 2) - (this.preferredBackBufferHeight / 2);\r\n        this.viewport.width = this.preferredBackBufferWidth;\r\n        this.viewport.height = this.preferredBackBufferHeight;\r\n    }\r\n    \r\n    Atlantis.Game.scaleFactor.x = this.preferredBackBufferWidth / this._frontBuffer.getWidth();\r\n    Atlantis.Game.scaleFactor.y = this.preferredBackBufferHeight / this._frontBuffer.getHeight();\r\n\r\n    Atlantis.notify(Atlantis.events.ResolutionChanged, { width: this.preferredBackBufferWidth, height: this.preferredBackBufferHeight });\r\n};\r\n\r\n/**\r\n * Gets the back buffer renderTarget.\r\n * @method getBackBuffer\r\n * @return {Atlantis.RenderTarget} Return the renderTarget of the back buffer.\r\n */\r\nAtlantis.GraphicsDevice.prototype.getBackBuffer = function () {\r\n    return this._backBuffer;\r\n};\r\n\r\n/**\r\n * Gets the front buffer renderTarget.\r\n * @method getFrontBuffer\r\n * @return {Atlantis.RenderTarget} Return the renderTarget of the front buffer.\r\n */\r\nAtlantis.GraphicsDevice.prototype.getFrontBuffer = function () {\r\n    return this._frontBuffer;\r\n};\r\n\r\n/**\r\n * Clear all buffers\r\n * @method clear\r\n * @param {String} color The clear color (default black).\r\n */\r\nAtlantis.GraphicsDevice.prototype.clear = function (color) {\r\n    this._backBuffer.clear(color);\r\n    this._frontBuffer.clear(color);\r\n\r\n    if (this.disableSmoothing) {\r\n        this._backBuffer.getContext().imageSmoothingEnabled = false;\r\n        this._fbContext.imageSmoothingEnabled = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Draw the back buffer into the front buffer.\r\n * @method present\r\n */\r\nAtlantis.GraphicsDevice.prototype.present = function () {\r\n    if (this.forceDisableSmoothing) {\r\n        this._backBufferCache = this._resizePixelCanvas(this._bbCanvas, { x: Atlantis.Game.scaleFactor.x, y: Atlantis.Game.scaleFactor.y });\r\n    }\r\n    else {\r\n        this._backBufferCache = this._bbCanvas;\r\n    }\r\n\r\n    this._fbContext.drawImage(this._backBufferCache, this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);\r\n};\r\n\r\n/**\r\n * Scale an image to the desired size without pixel interpolation.\r\n * Code from http://phoboslab.org/log/2012/09/drawing-pixels-is-hard\r\n * @method _resizePixelCanvas\r\n * @param {Image|HTMLCanvas} image The image to scale\r\n */\r\nAtlantis.GraphicsDevice.prototype._resizePixelCanvas = function(image) {\r\n    // Takes an image and a scaling factor and returns the scaled image\r\n    \r\n    // The original image is drawn into an offscreen canvas of the same size\r\n    // and copied, pixel by pixel into another offscreen canvas with the \r\n    // new size.\r\n    \r\n    var widthScaled = image.width / Atlantis.Game.scaleFactor.x;\r\n    var heightScaled = image.height / Atlantis.Game.scaleFactor.y;\r\n    var origPixels = image.getContext(\"2d\").getImageData(0, 0, image.width, image.height);\r\n    \r\n    var scaled = document.createElement('canvas');\r\n    scaled.width = widthScaled;\r\n    scaled.height = heightScaled;\r\n    var scaledCtx = scaled.getContext('2d');\r\n    var scaledPixels = scaledCtx.getImageData(0, 0, widthScaled, heightScaled);\r\n    \r\n    for (var y = 0; y < heightScaled; y++) {\r\n        for (var x = 0; x < widthScaled; x++) {\r\n            var index = (Math.floor(y * Atlantis.Game.scaleFactor.y) * image.width + Math.floor(x * Atlantis.Game.scaleFactor.x)) * 4;\r\n            var indexScaled = (y * widthScaled + x) * 4;\r\n            scaledPixels.data[indexScaled] = origPixels.data[index];\r\n            scaledPixels.data[indexScaled + 1] = origPixels.data[index + 1];\r\n            scaledPixels.data[indexScaled + 2] = origPixels.data[index + 2];\r\n            scaledPixels.data[indexScaled + 3] = origPixels.data[index + 3];\r\n        }\r\n    }\r\n    scaledCtx.putImageData(scaledPixels, 0, 0);\r\n    return scaled;\r\n};\r\n\r\n/**\r\n * Toggle the passed element in fullscreen mode if the browser support this feature.\r\n * @method toggleFullscreen\r\n * @param {HTMLElement} The node to use (default is the canvas element).\r\n */\r\nAtlantis.GraphicsDevice.prototype.toggleFullscreen = function (element) {\r\n    var element = element instanceof HTMLElement ? element : this._frontBuffer.getCanvas();\r\n    var fs = this.isFullscreen();\r\n\r\n    element.requestFullScreen = element.requestFullScreen || element.webkitRequestFullscreen || element.mozRequestFullScreen || element.msRequestFullscreen || function () { return false; };\r\n    document.cancelFullScreen = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || document.msExitFullscreen || function () { return false; };\r\n\r\n    if (fs) {\r\n        document.cancelFullScreen();\r\n    }\r\n    else { \r\n        element.requestFullScreen();\r\n    }\r\n};\r\n\r\n/**\r\n * Indicate if the fullscreen mode is active\r\n * @method isFullscreen\r\n * @return {Boolean} Return true if the fullscreen mode is active, o\r\n */\r\nAtlantis.GraphicsDevice.prototype.isFullscreen = function () {\r\n    return document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement || false;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define the sort mode of a sprite batch.\r\n * - BackToFront: All items of the batch are drawn to the smallest to the biggest layer depth\r\n * - FrontToBack: All items of the batch are drawn to the biggest to the smallest layer depth\r\n * - Immediate: No sorting, all is drawn without layer depth sorting.\r\n * @class SpriteSortMode\r\n * @static\r\n */\r\nAtlantis.SpriteSortMode = {\r\n    BackToFront: 0,\r\n    FrontToBack: 1,\r\n    Immediate: 2\r\n};\r\n\r\n/**\r\n * Define an effect to apply on a sprite.\r\n * @class SpriteEffect\r\n * @static\r\n */\r\nAtlantis.SpriteEffect = {\r\n    None: 0,\r\n    FlipHorizontaly: 1,\r\n    FlipVerticaly: 2\r\n};\r\n\r\nAtlantis.BatchItemType = {\r\n    Texture: 0,\r\n    Font: 1\r\n};   \r\n\r\n/**\r\n * Define a SpriteBatch that is responsible to draw multiple elements on screen on one pass.\r\n * @class SpriteBatch\r\n * @constructor\r\n * @param {Atlantis.Graphics.GraphicsDevice} The graphics device.\r\n */\r\nAtlantis.SpriteBatch = function (graphicsDevice) {\r\n    this._graphicsDevice = graphicsDevice;\r\n\r\n    // Canvas used to render all item of the batch.\r\n    this._viewport = new Atlantis.Rectangle(0, 0, graphicsDevice.preferredBackBufferWidth, graphicsDevice.preferredBackBufferHeight);\r\n    this._canvas = this._graphicsDevice.getBackBuffer().getCanvas();\r\n    this._context = this._graphicsDevice.getBackBuffer().getContext();\r\n\r\n    this._batchItems = [];\r\n    this._batchStarted = false;\r\n    this._spriteSortMode = Atlantis.SpriteSortMode.Immediate;\r\n    this._transformMatrix = null;\r\n    this._cacheColoredTextures = [];\r\n    this._batchRect = new Atlantis.Rectangle();\r\n    \r\n    document.addEventListener(Atlantis.events.ResolutionChanged, this._onResize.bind(this), false);\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._onResize = function (event) {\r\n    this._viewport.width = event.width;\r\n    this._viewport.height = event.height;\r\n};\r\n\r\n/**\r\n * Begin the batch operation.\r\n * @method begin\r\n * @param {Atlantis.SpriteSortMode} The type of sorting to use (option, default is Immediate).\r\n * @param {Array} A transform matrix to apply for all items (optional). The matrix is a 3x3 matrix in a single array.\r\n *        - [ScaleX, SkewX, SkewY, ScaleY, TranslationX, TranslationY]\r\n */\r\nAtlantis.SpriteBatch.prototype.begin = function (spriteSortMode, transformMatrix) {\r\n    if (!this._batchStarted) {\r\n        this._batchStarted = true;\r\n        this._spriteSortMode = typeof(spriteSortMode) === \"number\" ? spriteSortMode : Atlantis.SpriteSortMode.Immediate;\r\n\r\n        this._transformMatrix = transformMatrix;\r\n\r\n        if (this._transformMatrix) {\r\n            this._context.save();\r\n            \r\n            this._context.transform(\r\n                this._transformMatrix[0], this._transformMatrix[1], this._transformMatrix[2],\r\n                this._transformMatrix[3], this._transformMatrix[4], this._transformMatrix[5]);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a texture on the screen\r\n * @method draw\r\n * @param {Image} The image or canvas to draw.\r\n * @param {Atlantis.Rectangle|Atlantis.Vector2} The position or the rectangle of the image.\r\n * @param {Atlantis.Rectangle} A source rectangle.\r\n * @param {String} A color to apply on the image in hex format.\r\n * @param {Number} Rotation of the image.\r\n * @param {Atlantis.Vector2} Origin of the image (defaut is 0, 0 on top/left).\r\n * @param {Atlantis.Vector2} Scale of the image (default is 1/1);\r\n * @param {Atlantis.SpriteEffect} An effect to apply (default is none).\r\n * @param {Number} The layer depth (Important when SpriteSortMode is set to BackToFront or FrontToBack).\r\n */\r\nAtlantis.SpriteBatch.prototype.draw = function (texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth) {\r\n    if (this._batchStarted) {\r\n        if (!destinationRectangle.width) {\r\n            destinationRectangle.width = texture2D.width;\r\n            destinationRectangle.height = texture2D.height;\r\n        }\r\n\r\n        if (this._spriteSortMode == Atlantis.SpriteSortMode.Immediate) {\r\n            this._drawBatchItem(texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth, Atlantis.BatchItemType.Texture);\r\n        }\r\n        else {\r\n            this._batchItems.push({ \r\n                type: Atlantis.BatchItemType.Texture, \r\n                texture2D: texture2D, \r\n                sourceRectangle: sourceRectangle, \r\n                destinationRectangle: destinationRectangle, \r\n                color: color, \r\n                rotation: rotation,\r\n                origin: origin, \r\n                scale: scale,\r\n                effect: effect ? effect : Atlantis.SpriteEffect.None, \r\n                layerDepth: +layerDepth|0 \r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a string on the screen\r\n * @method drawString\r\n * @param {Atlantis.SpriteFont} The SpriteFont to use.\r\n * @param {String} The string to draw.\r\n * @param {Atlantis.Vector2} The position of the string.\r\n * @param {String} The color of the string in hex format.\r\n * @param {Number} Rotation of the image.\r\n * @param {Atlantis.Vector2} Origin of the image (defaut is 0, 0 on top/left).\r\n * @param {Atlantis.Vector2} Scale of the image (default is 1/1);\r\n * @param {Atlantis.SpriteEffect} An effect to apply (default is none).\r\n * @param {Number} The layer depth (Important when SpriteSortMode is set to BackToFront or FrontToBack).\r\n */\r\nAtlantis.SpriteBatch.prototype.drawString = function (spriteFont, text, position, color, rotation, origin, scale, effect, layerDepth) {\r\n    if (this._batchStarted) {\r\n        if (this._spriteSortMode === Atlantis.SpriteSortMode.Immediate) {\r\n            this._drawBatchItem(spriteFont, position, text, color, rotation, origin, scale, effect, layerDepth, Atlantis.BatchItemType.Font);\r\n        }\r\n        else {\r\n            this._batchItems.push({ \r\n                type: Atlantis.BatchItemType.Font, \r\n                texture2D: spriteFont, \r\n                sourceRectangle: text, \r\n                destinationRectangle: { x: position.x, y: position.y, width: 1, height: 1 }, \r\n                color: color, \r\n                rotation: rotation,\r\n                origin: origin, \r\n                scale: scale,\r\n                effect: effect ? effect : Atlantis.SpriteEffect.None, \r\n                layerDepth: +layerDepth|0 \r\n            });   \r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Execute the batch process and draw the result in the screen.\r\n * @method end\r\n */\r\nAtlantis.SpriteBatch.prototype.end = function () {\r\n    if (this._batchStarted) {\r\n        if (this._spriteSortMode !== Atlantis.SpriteSortMode.Immediate) {\r\n            this._batchItems = this._batchItems.sort(this._sortBatchItem.bind(this));\r\n            \r\n            for (var i = 0, l = this._batchItems.length; i < l; i++) {\r\n                this._drawBatchItem(this._batchItems[i].texture2D, this._batchItems[i].destinationRectangle, this._batchItems[i].sourceRectangle, this._batchItems[i].color, this._batchItems[i].rotation, this._batchItems[i].origin, this._batchItems[i].scale, this._batchItems[i].effect, this._batchItems[i].layerDepth, this._batchItems[i].type);\r\n            }\r\n\r\n            this._batchItems.length = 0;\r\n        }\r\n        \r\n        if (this._transformMatrix) {\r\n            this._context.restore();\r\n        }\r\n\r\n        this._batchStarted = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a texture on the screen\r\n * @method drawTexture\r\n * @static\r\n * @param {CanvasContext} The canvas context.\r\n * @param {Image} The image or canvas to draw.\r\n * @param {Number} x coordinate.\r\n * @param {Number} y coordinate.\r\n * @param {Number} width of the image.\r\n * @param {Number} height of the image.\r\n * @param {Atlantis.Rectangle} A source rectangle.\r\n */\r\nAtlantis.SpriteBatch.drawTexture  = function (context, texture, x, y, width, height, sourceRectangle) {\r\n    if (sourceRectangle) { \r\n        context.drawImage(texture, sourceRectangle.x, sourceRectangle.y, sourceRectangle.width, sourceRectangle.height, x, y, width, height); \r\n    }\r\n    else {\r\n        context.drawImage(texture, x, y, width, height);\r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch.drawString = function (context, spriteFont, text, position, color) {\r\n    context.fillStyle = color;\r\n    context.font = spriteFont.getFont();\r\n\r\n    if (spriteFont.strokeStyle && spriteFont.lineWidth) {\r\n        context.lineWidth = spriteFont.lineWidth;\r\n        context.strokeStyle = spriteFont.strokeStyle\r\n\r\n        if (!spriteFont.wrapText) {\r\n            context.strokeText(text, position.x, position.y);\r\n        }\r\n    }\r\n\r\n    if (!spriteFont.wrapText) {\r\n        context.fillText(text, position.x, position.y);\r\n    }\r\n    else {\r\n        Atlantis.SpriteBatch._wrapText(context, text, position.x, position.y, position.width, spriteFont.size, spriteFont.strokeStyle && spriteFont.lineWidth);  \r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._drawBatchItem = function (texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth, type) {                \r\n    // If the entity is visible on the screen.   \r\n    this._batchRect.fromRectangle(destinationRectangle);\r\n\r\n    if (this._viewport.intersects(this._batchRect)) {\r\n        var oX = origin ? origin.x : 0;\r\n        var oY = origin ? origin.y : 0;\r\n\r\n        this._context.save();\r\n\r\n        this._context.translate(destinationRectangle.x, destinationRectangle.y);\r\n        this._context.translate(oX, oY);\r\n        this._batchRect.x = -oX;\r\n        this._batchRect.y = -oY;\r\n\r\n        if (rotation) {\r\n            this._context.rotate(rotation);    \r\n        }\r\n\r\n        if (scale) {\r\n            this._context.scale(scale.x, scale.y);   \r\n        }\r\n\r\n        if (effect && effect !== Atlantis.SpriteEffect.None) {\r\n            if (effect == Atlantis.SpriteEffect.FlipHorizontaly) {\r\n                this._context.scale(-1, 1);\r\n                this._batchRect.x -= this._batchRect.width;\r\n            }\r\n            else {\r\n                this._context.scale(1, -1);   \r\n                this._batchRect.y -= this._batchRect.height; \r\n            }\r\n        }\r\n\r\n        if (type === Atlantis.BatchItemType.Texture) { \r\n            if (color && texture2D.width && texture2D.height) {\r\n                Atlantis.SpriteBatch.drawTexture(this._context, this._colorizeTexture(texture2D, color), this._batchRect.x, this._batchRect.y, this._batchRect.width, this._batchRect.height, sourceRectangle);  \r\n            }\r\n            else {\r\n                Atlantis.SpriteBatch.drawTexture(this._context, texture2D, this._batchRect.x, this._batchRect.y, this._batchRect.width, this._batchRect.height, sourceRectangle); \r\n            }\r\n        }\r\n        else if (type === Atlantis.BatchItemType.Font) {\r\n            // Because JavaScript is so Magic..\r\n            // The prototype become (spriteFont, text, position, color)\r\n            Atlantis.SpriteBatch.drawString(this._context, texture2D, sourceRectangle, this._batchRect, color); \r\n        }\r\n\r\n        this._context.restore();\r\n    }\r\n};\r\n\r\n// Colorize a texture and put it in a cache.\r\nAtlantis.SpriteBatch.prototype._colorizeTexture = function (texture, color) {\r\n    var canvas = this._searchColoredTexture(texture, color);\r\n    \r\n    if (!canvas) {\r\n        canvas = document.createElement(\"canvas\");\r\n        canvas.width = texture.width;\r\n        canvas.height = texture.height;\r\n\r\n        var context = canvas.getContext(\"2d\");\r\n        context.drawImage(texture, 0, 0);\r\n\r\n        var imageData = context.getImageData(0, 0, texture.width, texture.height);\r\n        var cColor = this._hexaToBytes(color);\r\n        \r\n        for (var i = 0, l = imageData.data.length; i < l; i += 4) {\r\n            imageData.data[i] = cColor.r | imageData.data[i];\r\n            imageData.data[i + 1] = cColor.g | imageData.data[i + 1];\r\n            imageData.data[i + 2] = cColor.b | imageData.data[i + 2]; \r\n            imageData.data[i + 3] = cColor.a | imageData.data[i + 3]; \r\n        }\r\n\r\n        context.putImageData(imageData, 0, 0);\r\n\r\n        this._cacheColoredTextures.push({ texture: texture, color: color, canvas: canvas });\r\n    } \r\n    \r\n    return canvas;\r\n};\r\n\r\n// Convert an hexa color to byte color.\r\nAtlantis.SpriteBatch.prototype._hexaToBytes = function (color) {\r\n    var hexa = color.split(\"#\")[1];\r\n    var bColor = { r: 0, g: 0, b: 0, a: 0 };\r\n    var size = hexa.length;\r\n\r\n    if (size === 3) {\r\n        bColor.r = parseInt((hexa[0] + hexa[0]), 16);\r\n        bColor.g = parseInt((hexa[1] + hexa[1]), 16);\r\n        bColor.b = parseInt((hexa[2] + hexa[2]), 16);\r\n    }\r\n    else if (size === 6) {\r\n        bColor.r = parseInt(hexa.slice(0, 2), 16);\r\n        bColor.g = parseInt(hexa.slice(2, 4), 16);\r\n        bColor.b = parseInt(hexa.slice(4, 6), 16);\r\n    }\r\n    else if (size === 8) {\r\n        bColor.r = parseInt(hexa.slice(0, 2), 16);\r\n        bColor.g = parseInt(hexa.slice(2, 4), 16);\r\n        bColor.b = parseInt(hexa.slice(4, 6), 16);\r\n        bColor.a = parseInt(hexa.slice(6, 8), 16);\r\n    }\r\n\r\n    return bColor;\r\n};\r\n\r\n// Search if a colored texture is already in the cache.\r\nAtlantis.SpriteBatch.prototype._searchColoredTexture = function(texture, color) {\r\n    var i = 0;\r\n    var size = this._cacheColoredTextures.length;\r\n    var canvas = null;\r\n\r\n    while (i < size && canvas === null) {\r\n        canvas = (this._cacheColoredTextures[i].texture === texture && this._cacheColoredTextures[i].color === color) ? this._cacheColoredTextures[i].canvas : null;\r\n        i++;\r\n    }\r\n\r\n    return canvas;\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._sortBatchItem = function (itemA, itemB) {\r\n    if (this._spriteSortMode === Atlantis.SpriteSortMode.BackToFront) {\r\n        if (+itemA.layerDepth > +itemB.layerDepth) {\r\n            return 1;   \r\n        }\r\n        \r\n        if (+itemA.layerDepth < +itemB.layerDepth) {\r\n            return -1;   \r\n        }\r\n        \r\n        return 0;\r\n    }\r\n    else {\r\n        if (+itemA.layerDepth < +itemB.layerDepth) {\r\n            return 1;   \r\n        }\r\n        \r\n        if (+itemA.layerDepth > +itemB.layerDepth) {\r\n            return -1;   \r\n        }\r\n        \r\n        return 0;\r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch._wrapText = function (context, text, x, y, maxWidth, lineHeight, strokeText) {\r\n    var words = text.split(\" \");\r\n    var line = \"\";\r\n\r\n    for (var n = 0; n < words.length; n++) {\r\n        var testLine = line + words[n] + ' ';\r\n        var metrics = context.measureText(testLine);\r\n        var testWidth = metrics.width;\r\n        if (testWidth > maxWidth && n > 0) {\r\n            if (strokeText) {\r\n                context.strokeText(line, x, y);\r\n            }\r\n\r\n            context.fillText(line, x, y);\r\n            line = words[n] + ' ';\r\n            y += lineHeight;\r\n        }\r\n        else {\r\n            line = testLine;\r\n        }\r\n    }\r\n\r\n    if (strokeText) {\r\n        context.strokeText(line, x, y);\r\n    }\r\n\r\n    context.fillText(line, x, y);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * A render target is a graphics surface where we can draw\r\n * @constructor\r\n * @class RenderTarget\r\n * @param {Number} width Desired width.\r\n * @param {Number} height Desired height.\r\n * @param {Boolean} (optional) is3D Define if the surface is a 3D surface (WebGL)\r\n * @param {HTMLCanvas} (optional) A canvas to use with this renderTarget\r\n */\r\nAtlantis.RenderTarget = function (width, height, is3D, canvas) {\r\n    this._canvas = canvas \r\n    \r\n    if (!this._canvas) {\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this.setSize(width, height);\r\n    }\r\n    \r\n    this._context = null;\r\n    this._data = null;\r\n    this._needUpdate = false;\r\n    \r\n    if (is3D) {\r\n        this._context = this._canvas.getContext(\"webgl\") || this._canvas.getContext(\"experimental-webgl\");\r\n    }\r\n    else {\r\n        this._context = this._canvas.getContext(\"2d\");\r\n    }\r\n\r\n    this.isWebGLCanvas = function () {\r\n        return is3D;\r\n    };\r\n   \r\n    this.setSize(width, height);\r\n};\r\n\r\nAtlantis.RenderTarget.fromImage = function (image) {\r\n    var rt = new Atlantis.RenderTarget(image.width, image.height, false);\r\n    rt._context.drawImage(image, 0, 0, image.width, image.height);\r\n    return rt;\r\n};\r\n\r\n/**\r\n* Set the image data of the canvas.\r\n* @method setData\r\n* @param {Object} imageData Data to put in the canvas.\r\n*/\r\nAtlantis.RenderTarget.prototype.setData = function (imageData) {\r\n    this._context.putImageData(imageData, 0, 0);\r\n};\r\n\r\n/**\r\n* Gets the image data of the canvas.\r\n* @method getData\r\n* @return {Object} Return the ImageData of the context.\r\n*/\r\nAtlantis.RenderTarget.prototype.getData = function () {\r\n    if (!this._data || this._needUpdate) {\r\n        this._data = this._context.getImageData(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n    return this._data;\r\n};\r\n\r\nAtlantis.RenderTarget.prototype.getPixelData = function (x, y) {\r\n    var color = this._context.getImageData(x, y, 1, 1).data;\r\n    return { r: color[0], g: color[1], b: color[2], a: color[3] };\r\n};\r\n\r\n/**\r\n* Get the context of the canvas used to draw.\r\n* @method\r\n* @return {CanvasContext} Return the canvas context.\r\n*/\r\nAtlantis.RenderTarget.prototype.getContext = function () {\r\n    return this._context;\r\n};\r\n\r\n/**\r\n* Gets the canvas used to draw.\r\n* @method getCanvas\r\n* @return {HTMLCanvas} Return the canvas used to draw.\r\n*/\r\nAtlantis.RenderTarget.prototype.getCanvas = function () {\r\n    return this._canvas;\r\n};\r\n\r\n/**\r\n* Gets the width of the drawing surface.\r\n* @method getWidth\r\n* @return {Number} Return the width of the drawing surface.\r\n*/\r\nAtlantis.RenderTarget.prototype.getWidth = function () {\r\n    return this._canvas.width;\r\n};\r\n\r\n/**\r\n* Gets the height of the drawing surface.\r\n* @method getHeight\r\n* @return {Number} Return the height of the drawing surface.\r\n*/\r\nAtlantis.RenderTarget.prototype.getHeight = function () {\r\n    return this._canvas.height;\r\n};\r\n\r\n/**\r\n* Change the size of the drawing surface.\r\n* @method setSize\r\n* @param {Number} width The new width.\r\n* @param {Number} height The new height.\r\n*/\r\nAtlantis.RenderTarget.prototype.setSize = function (width, height) {\r\n    this._canvas.width = width;\r\n    this._canvas.height = height;\r\n};\r\n\r\n/**\r\n* Clear the entire surface\r\n* @method clear\r\n*/\r\nAtlantis.RenderTarget.prototype.clear = function (color) {\r\n    if (this._is3DCanvas) {\r\n        this._context.clearColor(color.r, color.g, color.b, color.a);\r\n        this._context.enable(this._context.DEPTH_TEST);\r\n        this._context.depthFunc(this._context.LEQUAL);\r\n        this._context.clear(this._context.COLOR_BUFFER_BIT | this._context.DEPTH_BUFFER_BIT);\r\n    }\r\n    else {\r\n        this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n};\r\n\r\n/**\r\n* Save the content of the renderTarget to an image\r\n* @method saveAsPng\r\n* @return {String} Return a base64 of the image with mime type \"image/png\"\r\n*/\r\nAtlantis.RenderTarget.prototype.saveAsPng = function () {\r\n    return this._canvas.toDataURL(\"image/png\");\r\n};\r\n\r\n/**\r\n* Save the content of the renderTarget to an image\r\n* @method saveAsJpg\r\n* @return {String} Return a base64 of the image with mime type \"image/jpg\"\r\n*/\r\nAtlantis.RenderTarget.prototype.saveAsJpg = function () {\r\n    return this._canvas.toDataURL(\"image/jpg\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n* Define a drawable text.\r\n* @class SpriteFont\r\n* @constructor\r\n* @param {String} The font name to use (default Arial). You can use a webfont loaded in CSS.\r\n* @param {Number} The size of the font.\r\n* @param {String} The style of the font (normal, italic, bold)\r\n*/\r\nAtlantis.SpriteFont = function (fontName, size, style) {\r\n    this.fontName = fontName || \"Arial\";\r\n    this.size = size || 14;\r\n    this.style = style || \"normal\";\r\n    this.strokeStyle = null;\r\n    this.lineWidth = 0;\r\n};\r\n\r\n/**\r\n * Gets the string passed to drawing context.\r\n * @method getFont\r\n * @return {String} Return the string passed to the drawing context.\r\n */\r\nAtlantis.SpriteFont.prototype.getFont = function () {\r\n    return [this.style, \" \", this.size, \"px \", this.fontName].join(\"\");\r\n};\r\n\r\nAtlantis.SpriteFont.prototype.clone = function () {\r\n\tvar sClone = new Atlantis.SpriteFont(this.fontName, this.size, this.style);\r\n\tsClone.strokeStyle = this.strokeStyle;\r\n\tsClone.lineWidth = this.lineWidth;\r\n\treturn sClone;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * The Preloader is used during asset loading in game class.\r\n * @class Preloader\r\n * @constructor\r\n * @param {Atlantis.Game} game\r\n */\r\nAtlantis.Preloader = function (game) {\r\n\tthis.screenWidth = game.graphicsDevice.preferredBackBufferWidth;\r\n\tthis.screenHeight = game.graphicsDevice.preferredBackBufferHeight; \r\n\tthis.screenWidthPerTwo = this.screenWidth / 2;\r\n\tthis.screenHeightPerTwo = this.screenHeight / 2;\r\n\tthis.spriteFont = new Atlantis.SpriteFont(\"Arial\", 32);\r\n};\r\n\r\n/**\r\n * Called when an asset is loaded.\r\n * @method onProgress\r\n * @param {Object} context The canvas context.\r\n * @param {Number} progress The loading progression in percent.\r\n */\r\nAtlantis.Preloader.prototype.onProgress = function (context, progress) {\r\n\tvar progressMessage = [\"Game loading \", Math.round(progress.progress), \"%\"].join(\"\");\r\n    var size = context.measureText(progressMessage),\r\n        x = (this.screenWidthPerTwo) - (size.width / 2),\r\n        y = (this.screenHeightPerTwo) - (this.spriteFont.size / 2);\r\n\r\n    context.clearRect(0, 0, this.screenWidth, this.screenHeight);\r\n    context.fillStyle = \"#fafafa\";\r\n    context.font = this.spriteFont.getFont();\r\n    context.fillText(progressMessage, x, y);\r\n};\r\n\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\nAtlantis.Game = (function () {\r\n    var _instance = null;\r\n    \r\n    /**\r\n    * Create a game instance who is the starting point of the Framework.\r\n    * @constructor\r\n    * @class Game\r\n    * @param {Number} width Desired screen width.\r\n    * @param {height} height Desired screen height.\r\n    * @param {domElement} (optional) domElement Sepecify a DOM element to attach the canvas.\r\n    * @param {params} (optional) params\r\n    */\r\n    var game = function (width, height, domElement, params) {\r\n        this.settings = params || {};\r\n        this.settings.webGL = false; // FIXME\r\n        \r\n        var width = width || window.innerWidth;\r\n        var height = height || window.innerHeight;\r\n        this.domElement = document.body;\r\n        \r\n        // FIXME : This part is totaly awefull\r\n        if (typeof(domElement) instanceof HTMLElement) {\r\n            this.domElement = domElement;    \r\n        }\r\n        else if (typeof(domElement) === \"string\") {\r\n            if (domElement[0] === \".\") {\r\n                domElement = domElement.replace(\".\", \"\");\r\n                this.domElement = document.getElementsByClassName(domElement)[0];\r\n            }\r\n            else {\r\n                domElement = (domElement[0] === \"#\") ? domElement.replace(\"#\", \"\") : domElement;\r\n                this.domElement = document.getElementById(domElement);\r\n            }\r\n        }\r\n\r\n        if (this.domElement instanceof HTMLCanvasElement) {\r\n            this.settings.canvas = this.domElement;\r\n        }\r\n        \r\n        this.version = \"0.0.0.1\";\r\n        this.gameTime = new Atlantis.GameTime();\r\n        this.components = new Atlantis.GameComponentCollection();\r\n        this.content = new Atlantis.ContentManager();\r\n        this.keyboard = null;\r\n        this.mouse = null;\r\n        this.touchPanel = null;\r\n        this.gamepad = null;\r\n        this.preloader = null;\r\n        \r\n        this.graphicsDevice = new Atlantis.GraphicsDevice(width, height, this.settings);\r\n        this.canvas = this.settings.canvas;\r\n        this.frontBuffer = null;\r\n        this.context = null;\r\n        this.initialized = false;\r\n        this._paused = false;\r\n\r\n        _instance = this;\r\n    };\r\n\r\n    /**\r\n     * Gets the scale factor relative to the backbuffer.\r\n     * @property {Atlantis.Vector2} scaleFactor\r\n     */\r\n    game.scaleFactor = new Atlantis.Vector2(1, 1);\r\n\r\n    game.prototype._internalIntialize = function () {\r\n        this.frontBuffer = this.graphicsDevice.getFrontBuffer();\r\n        this.context = this.frontBuffer.getContext();\r\n\r\n        if (!this.canvas) {\r\n            this.canvas = this.frontBuffer.getCanvas();\r\n        }\r\n        \r\n        this.keyboard = new Atlantis.Keyboard();\r\n        this.mouse = new Atlantis.Mouse(this.frontBuffer.getCanvas());\r\n        this.touchPanel = new Atlantis.TouchPanel(this.frontBuffer.getCanvas());\r\n        this.gamepad = new Atlantis.Gamepad();\r\n        \r\n        this.components.add(this.gamepad);\r\n        \r\n        if (this.settings.resizeEnabled) {\r\n            window.addEventListener(\"resize\", onResize, false);\r\n        }\r\n\r\n        if (this.domElement && !this.settings.canvas) {\r\n            this.domElement.appendChild(this.frontBuffer.getCanvas());\r\n        }\r\n    };\r\n\r\n    /**\r\n    * Initialize the game logic and components.\r\n    * @method initialize\r\n    */\r\n    game.prototype.initialize = function () {\r\n        this.components.initialize();\r\n    };\r\n\r\n    /**\r\n    * Load the content.\r\n    * @method loadContent\r\n    */\r\n    game.prototype.loadContent = function () {\r\n        this.components.loadContent(this.content);\r\n    };\r\n\r\n    /**\r\n    * Unload the content.\r\n    * @method unloadContent\r\n    */\r\n    game.prototype.unloadContent = function () {\r\n        this.components.unloadContent();\r\n    };\r\n\r\n    /**\r\n    * Update the logic of the game.\r\n    * @method update\r\n    * @param {GameTime} gameTime The game time.\r\n    */\r\n    game.prototype.update = function (gameTime) {\r\n        this.components.update(gameTime);\r\n    };\r\n\r\n    /**\r\n    * Draw the content on the screen.\r\n    * @method draw\r\n    * @param {GameTime} gameTime The game time.\r\n    * @param {CanvasRenderingContext2D} context The 2D context.\r\n    */\r\n    game.prototype.draw = function (gameTime, context) {\r\n        if (this.settings.autoClear) {\r\n            this.graphicsDevice.clear();   \r\n        }\r\n        \r\n        this.components.draw(gameTime, context);\r\n    };\r\n    \r\n    /**\r\n     * Called when the `draw` method has done its work.\r\n     * @method afterDraw\r\n     * @param {GameTime} gameTime The game time.\r\n     */\r\n    game.prototype.afterDraw = function (gameTime) {\r\n        this.graphicsDevice.present();  \r\n    };\r\n\r\n    /** \r\n    * Start the game by initializing the engine. The preloader is activated \r\n    * afterwards the components are initialized and the main loop is started.\r\n    * @method run\r\n    */\r\n    game.prototype.run = function () {\r\n        var that = this;\r\n        var startProcess = function () {\r\n            that.initialize();\r\n            that.initialized = true;\r\n            that.loadContent();\r\n            that.frontBuffer.getCanvas().focus();\r\n            mainLoop();\r\n        };\r\n\r\n        if (!this.initialized) {\r\n            this.initialized = true;\r\n            this._internalIntialize();\r\n\r\n            if (this.content.preloader.length) {\r\n\r\n                // If user don't use a custom preloader\r\n                if (this.preloader === null) {\r\n                    this.preloader = new Atlantis.Preloader(this);\r\n                }\r\n\r\n                this.content.preload(function (progress) {\r\n                    this.preloader.onProgress(this.context, progress);    \r\n                }.bind(this), function () {\r\n                    this.context.clearRect(0, 0, this.frontBuffer.getWidth(), this.frontBuffer.getHeight());\r\n                    startProcess();\r\n                }.bind(this));\r\n            }\r\n            else {\r\n                startProcess();\r\n            }\r\n        }\r\n    };\r\n    \r\n    /**\r\n     * Sets the game in pause mode.\r\n     * @method pause\r\n     */\r\n    game.prototype.pause = function () {\r\n        cancelAnimationFrame(mainLoop);\r\n        this._paused = true;\r\n    };\r\n    \r\n    /**\r\n     * Resume a paused game.\r\n     * @method resume\r\n     */\r\n    game.prototype.resume = function () {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            mainLoop();\r\n        }\r\n    };\r\n\r\n    // The mainLoop\r\n    function mainLoop() {\r\n        _instance.gameTime.update();\r\n        _instance.update(_instance.gameTime);\r\n        _instance.draw(_instance.gameTime);\r\n        _instance.afterDraw(_instance.gamepad);\r\n        \r\n        if (!_instance._paused) {\r\n            requestAnimationFrame(mainLoop);\r\n        }\r\n    }\r\n\r\n    // Callback for window resize\r\n    function onResize(event) {\r\n        _instance.width = event.target.innerWidth;\r\n        _instance.height = event.target.innerHeight;\r\n        _instance.canvas.width = _instance.width;\r\n        _instance.canvas.height = _instance.height;\r\n    }\r\n\r\n    return game;\r\n})();"],"sourceRoot":"/source/"}