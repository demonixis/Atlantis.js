{"version":3,"sources":["atlantis.framework.min.js"],"names":["Atlantis","window","events","ContentPreloading","ResolutionChanged","ajax","parameters","params","url","callback","success","xhr","XMLHttpRequest","method","open","onreadystatechange","readyState","status","responseText","send","data","gUrl","join","notify","name","event","document","createEvent","initEvent","Object","i","dispatchEvent","isMobileDevice","navigator","userAgent","match","_createProperty","object","property","fn0","fn1","defineProperty","get","set","enumerable","configurable","ContentManager","rootDirectory","this","_assets","preloader","PreloadTimerInterval","prototype","preload","progressCallback","doneCallback","countAssets","length","nbLoaded","onLoaded","asset","load","that","progress","timer","setInterval","clearInterval","assetName","temp","split","ext","loadImage","loadAudio","loadVideo","loadResource","imageName","image","Image","onload","style","position","left","body","appendChild","removeChild","src","audioName","audio","createElement","controls","videoName","video","resourceUrl","response","result","JSON","parse","dispose","GameComponent","game","enabled","initialized","initialize","update","gameTime","isEnabled","isInitialized","setEnabled","DrawableGameComponent","call","visible","assetLoaded","loadContent","unloadContent","draw","context","isVisible","setVisible","GameComponentCollection","components","drawables","content","l","add","gameComponent","indexOf","push","remove","index","splice","component","pIndex","GameTime","reset","elapsedTime","totalGameTime","currentTime","Date","fps","now","getElapsedTime","getTotalGameTime","getFPS","MathHelper","Pi","Math","PI","PiOver2","PiOver4","TwoPi","clamp","value","min","max","distance","value1","value2","abs","hermite","tangent1","tangent2","amount","sCubed","sSquared","lerp","smoothStep","toDegrees","radians","toRadians","degrees","isPowerOfTwo","Rectangle","x","y","width","height","rectangle","divide","fromRectangle","multiply","subtract","contains","getRight","getBottom","intersects","getLeft","getTop","toString","toVector2","Vector2","toPoint","Point","getCenter","getWidth","getHeight","getTopCenter","getBottomCenter","getLeftCenter","getRightCenter","setPosition","setSize","clone","Matrix","values","toArray","Array","M11","M12","M13","M14","M21","M22","M23","M24","M31","M32","M33","M34","M41","M42","M43","M44","getIdentityValues","getZeroValues","setIdentity","getMatrixIdentity","matrix","setLeft","vector","z","Vector3","setRight","setUp","getUp","setDown","getDown","setBackward","getBackward","setForward","getForward","setTranslation","mValues","eValues","matA","matB","createRotationX","rotation","cos","sin","createRotationY","createRotationZ","createScale","sx","sy","sz","createTranslation","Atantis","createLookAt","target","upVector","zAxis","normalize","xAxis","cross","yAxis","dot","createOrthographic","zNear","zFar","createOrthographicOffCenter","right","bottom","top","createPerspectiveFieldOfView","fov","aspect","yScale","tan","xScale","halfWidth","halfHeight","createPerspectiveOffCenter","createPerspetiveFieldOfViewRH","createPerspectiveOffCenterRH","zRange","invert","b0","b1","b2","b3","b4","b5","d11","d12","d13","d14","det","a0","a1","a2","a3","a4","a5","d21","d22","d23","d24","d31","d32","d33","d34","d41","d42","d43","d44","mat","createWorld","forward","m11","m12","m13","m14","m21","m22","m23","m24","m31","m32","m33","m34","m41","m42","m43","m44","matrixA","matrixB","matrixC","builder","Quaternion","w","fromQuaternion","quaternion","Identity","quaternion1","quaternion2","conjugate","createFromYawPitchRoll","yaw","pitch","roll","halfYaw","halfPitch","halfRoll","sinYaw","cosYaw","sinPitch","cosPitch","sinRoll","cosRoll","fromVector","Zero","One","UnitX","UnitY","vec1","vec2","addToRef","subtractToRef","divideToRef","multiplyToRef","vector2","v1","v2","sqrt","lerpToRef","minToRef","maxToRef","negate","vec","normalizeToRef","reflect","normal","ReflectToRef","reflectToRef","val","smoothStepToRef","transform","transformToRef","transformNormal","transformNormalToRef","UnitZ","Up","Down","Right","Left","Forward","Backward","distanceSquared","dx","dy","dz","factor","transformCoordinate","Vector4","KeyboardState","keys","Input","isKeyDown","key","isKeyUp","Keyboard","maxKeys","onKeyStateChange","preventDefault","keyCode","type","addEventListener","getState","ButtonState","Released","Pressed","MouseState","scrollWheelValue","buttons","leftButton","rightButton","middleButton","Mouse","domElement","HTMLElement","_x","_y","_scroll","_buttons","resetButtonState","onMouseEvent","pageX","offsetLeft","Game","scaleFactor","pageY","offsetTop","button","onMouseScroll","wheelDelta","detail","TouchLocationState","Invalid","Moved","TouchCollection","touchStates","TouchPanelState","create","states","panelState","state","TouchPanel","_states","eventNames","up","down","cancel","move","lastEventType","isPointerEvent","wrapEvent","id","touches","clientX","clientY","onTouchHandler","onPointerHandler","maxTouchPoints","msMaxTouchPoints","PointerEvent","MSPointerEvent","getCapabilities","hasTouch","GamepadButton","A","B","X","Y","LeftShoulder","RightShoulder","LeftTrigger","RightTrigger","Select","Start","L3","R3","DPadUp","DPadDown","DPadLeft","DPadRight","GamepadAxis","Horizontal","Vertical","HorizontalRight","VerticalRight","GamepadState","axis","isButtonDown","isButtonUp","getAxis","Gamepad","_gamepads","getGamepads","webkitGetGamepads","msGetGamepads","webkitGamepads","_gamepadsSupported","_addGamepad","gamepad","_removeGamepad","_updateGamepads","gamepads","j","m","btnVal","pressed","axes","Keys","BackSpace","Tab","Enter","Shift","Control","Alt","Pause","Escape","Space","Home","End","Suppr","PageUp","PageDown","Insert","Num0","Num1","Num2","Num3","Num4","Num5","Num6","Num7","Num8","Num9","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","Z","Super","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","ScaleMode","ScaleToFit","ConserveAspectRatio","NoScaleCenter","GraphicsDevice","settings","preferredBackBufferWidth","backBufferWidth","preferredBackBufferHeight","backBufferHeight","disableSmoothing","forceDisableSmoothing","viewport","scaleMode","_frontBuffer","RenderTarget","canvas","_fbContext","getContext","_backBuffer","_bbCanvas","getCanvas","msTouchAction","backgroundColor","applyChanges","fbWidth","fbHeight","diffPercent","getBackBuffer","getFrontBuffer","clear","color","imageSmoothingEnabled","present","drawImage","toggleFullscreen","element","fs","isFullscreen","requestFullScreen","webkitRequestFullscreen","mozRequestFullScreen","msRequestFullscreen","cancelFullScreen","webkitCancelFullScreen","mozCancelFullScreen","msExitFullscreen","webkitIsFullScreen","mozFullScreen","msFullscreenElement","SpriteSortMode","BackToFront","FrontToBack","Immediate","SpriteEffect","None","FlipHorizontaly","FlipVerticaly","BatchItemType","Texture","Font","SpriteBatch","graphicsDevice","_graphicsDevice","_viewport","_canvas","_context","_batchItems","_batchStarted","_spriteSortMode","_transformMatrix","_cacheColoredTextures","_batchRect","_onResize","bind","begin","spriteSortMode","transformMatrix","save","texture2D","destinationRectangle","sourceRectangle","origin","scale","effect","layerDepth","_drawBatchItem","drawString","spriteFont","text","end","sort","_sortBatchItem","restore","drawTexture","texture","fillStyle","font","getFont","strokeStyle","lineWidth","wrapText","strokeText","_wrapText","size","fillText","oX","oY","translate","rotate","_colorizeTexture","_searchColoredTexture","imageData","getImageData","cColor","_hexaToBytes","r","g","b","a","putImageData","hexa","bColor","parseInt","slice","itemA","itemB","maxWidth","lineHeight","words","line","n","testLine","metrics","measureText","testWidth","_data","_needUpdate","fromImage","rt","setData","getData","getPixelData","clearRect","saveAsPng","toDataURL","saveAsJpg","SpriteFont","fontName","sClone","Preloader","screenWidth","screenHeight","screenWidthPerTwo","screenHeightPerTwo","onProgress","progressMessage","round","mainLoop","_instance","afterDraw","_paused","requestAnimationFrame","onResize","innerWidth","innerHeight","replace","getElementsByClassName","getElementById","HTMLCanvasElement","version","keyboard","mouse","touchPanel","frontBuffer","_internalIntialize","resizeEnabled","autoClear","run","startProcess","focus","pause","cancelAnimationFrame","resume"],"mappings":"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","file":"atlantis.framework.min.js","sourcesContent":["/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\nAtlantis.events = {\r\n    ContentPreloading: \"atlantis.preloading\",\r\n    ResolutionChanged: \"atlantis.graphics.resize\"\r\n};\r\n\r\n/**\r\n * Ajax method for POST and GET calls.\r\n * @method ajax\r\n * @exemple Atlantis.ajax({ url: http://foo.php, data: \"level_id=2&layer=3\", method: \"GET\", async: false, success: myCallback });\r\n */\r\nAtlantis.ajax = function(parameters) {\r\n    var params = parameters || {};\r\n    var url = parameters.url;\r\n    var callback = parameters.success || function() {};\r\n    var xhr = new XMLHttpRequest();\r\n\r\n    if (params.method === \"POST\") {\r\n        xhr.open(\"POST\", url);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4 && xhr.status == 200) {\r\n                callback(xhr.responseText);\r\n            }\r\n        };\r\n        xhr.send(params.data);\r\n    } else {\r\n        var gUrl = params.data ? ([url, \"?\", params.data].join(\"\")) : url;\r\n\r\n        xhr.open(\"GET\", gUrl);\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                callback(xhr.responseText);\r\n            }\r\n        };\r\n        xhr.send(null);\r\n    }\r\n};\r\n\r\n/**\r\n * An event notifier.\r\n * @method notify\r\n * @param {String} name The name of the event to send.\r\n * @param {Object} params An object to send for registered handlers.\r\n */\r\nAtlantis.notify = function(name, params) {\r\n    var event = document.createEvent(\"HTMLEvents\");\r\n    event.initEvent(name, true, false);\r\n\r\n    if (params instanceof Object) {\r\n        for (var i in params) {\r\n            event[i] = params[i];\r\n        }\r\n    }\r\n\r\n    document.dispatchEvent(event);\r\n};\r\n\r\n/**\r\n * Determine whether the current device is a mobile or not by using the userAgent string (They said that's bad)\r\n * @method isMobileDevice\r\n * @return {Boolean} Returns `true` for a mobile device otherwise it returns `false`.  \r\n */\r\nAtlantis.isMobileDevice = function() {\r\n    return navigator.userAgent.match(/Android|iPhone|iPad|iPod|BlackBerry|Windows Phone/i);\r\n};\r\n\r\n/**\r\n * Create a property\r\n * @method _createProperty\r\n * @private\r\n */\r\nAtlantis._createProperty = function(object, property, fn0, fn1) {\r\n    Object.defineProperty(object, property, {\r\n        get: fn0,\r\n        set: fn1,\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a content manager that manage _assets.\r\n * @constructor\r\n * @class ContentManager\r\n * @param {String} rootDirectory The root folder to load _assets (default is the current folder).\r\n */\r\nAtlantis.ContentManager = function(rootDirectory) {\r\n    this.rootDirectory = rootDirectory || \"\";\r\n    this._assets = {};\r\n    this.preloader = [];\r\n};\r\n\r\nAtlantis.ContentManager.PreloadTimerInterval = 250;\r\n\r\n/**\r\n * Start the preloading process by using the `preloader` Array.\r\n * @method preload\r\n * @param {Function} progressCallback The callback to call when an asset has been loaded.\r\n * @param {Function} doneCallback The callback to call when all the assets are loaded.\r\n */\r\nAtlantis.ContentManager.prototype.preload = function(progressCallback, doneCallback) {\r\n    var countAssets = this.preloader.length,\r\n        nbLoaded = 0;\r\n\r\n    var progressCallback = (typeof(progressCallback) === \"function\") ? progressCallback : function() {};\r\n    var doneCallback = (typeof(doneCallback) === \"function\") ? doneCallback : function() {};\r\n    var onLoaded = function(asset) {\r\n        nbLoaded++;\r\n    };\r\n\r\n    for (var i = 0; i < countAssets; i++) {\r\n        this.load(this.preloader[i], onLoaded);\r\n    }\r\n\r\n    var that = this;\r\n    var progress = {\r\n        status: \"Loading\",\r\n        progress: 0\r\n    };\r\n\r\n    var timer = setInterval(function() {\r\n        progress.progress = (nbLoaded * 100.0) / countAssets;\r\n\r\n        if (nbLoaded === countAssets) {\r\n            clearInterval(timer);\r\n            progress.status = \"Complete\";\r\n            that.preloader.length = 0;\r\n            doneCallback();\r\n        }\r\n\r\n        Atlantis.notify(Atlantis.events.ContentPreloading, progress);\r\n        progressCallback(progress);\r\n    }, Atlantis.ContentManager.PreloadTimerInterval);\r\n};\r\n\r\n/**\r\n * Load an asset from the root directory.\r\n * Supported formats are :\r\n *      - Images : png, jpg, bmp\r\n *      - Audio : mp3, ogg, wav\r\n *      - Video : mp4, ogv\r\n *      - Data : xml, json, js\r\n *\r\n *  The type is define with the file extension.\r\n *\r\n * @method load\r\n * @param {String} assetName The asset name\r\n * @param {Function} callback A callback function called when the asset is loaded.\r\n */\r\nAtlantis.ContentManager.prototype.load = function(assetName, callback) {\r\n    var callback = (typeof(callback) === \"function\") ? callback : function() {};\r\n\r\n    var temp = assetName.split(\".\");\r\n    var ext = temp[(temp.length - 1)];\r\n    assetName = this.rootDirectory + assetName;\r\n\r\n    if (this._assets[assetName]) {\r\n        callback(this._assets[assetName]);\r\n        return this._assets[assetName];\r\n    } else {\r\n        switch (ext) {\r\n            case \"png\":\r\n            case \"jpg\":\r\n            case \"bmp\":\r\n                this.loadImage(assetName, callback);\r\n                break;\r\n            case \"mp3\":\r\n            case \"ogg\":\r\n            case \"wav\":\r\n                this.loadAudio(assetName, callback);\r\n                break;\r\n            case \"mp4\":\r\n            case \"ogv\":\r\n                this.loadVideo(assetName, callback);\r\n            case \"xml\":\r\n            case \"json\":\r\n            case \"js\":\r\n                this.loadResource(assetName, ext, callback);\r\n                break;\r\n        }\r\n\r\n        return this._assets[assetName];\r\n    }\r\n};\r\n\r\n/**\r\n * Load and store an image.\r\n * @method loadImage\r\n * @param {String} imageName The path of the image.\r\n * @param {Function} callback (optional) The callback to call when the image is loaded.\r\n * @return {Image} Returns the image.\r\n */\r\nAtlantis.ContentManager.prototype.loadImage = function(imageName, callback) {\r\n    var image = new Image();\r\n    image.onload = function() {\r\n        this.style.position = \"absolute\";\r\n        this.style.left = \"-9999px\";\r\n\r\n        document.body.appendChild(image);\r\n        document.body.removeChild(image);\r\n\r\n        this.style.position = \"\";\r\n        this.style.left = \"\";\r\n        callback(this);\r\n    };\r\n    image.src = imageName;\r\n    this._assets[imageName] = image;\r\n    return image;\r\n};\r\n\r\n/**\r\n * Load and store a sound or a music.\r\n * @method loadAudio\r\n * @param {String} audioName The path of the media.\r\n * @param {Function} callback (optional) The callback to call when the media is loaded.\r\n * @return {HTMLAudioElement} Returns the image.\r\n */\r\nAtlantis.ContentManager.prototype.loadAudio = function(audioName, callback) {\r\n    var audio = document.createElement(\"audio\");\r\n    audio.src = audioName;\r\n    audio.load();\r\n    audio.controls = false;\r\n    this._assets[audioName] = audio;\r\n    callback(audio);\r\n    return audio;\r\n};\r\n\r\n\r\n/**\r\n * Load and store a video.\r\n * @method loadVideo\r\n * @param {String} videoName The path of the video.\r\n * @param {Function} callback (optional) The callback to call when the video is loaded.\r\n * @return {HTMLVideoElement} Returns the video.\r\n */\r\nAtlantis.ContentManager.prototype.loadVideo = function(videoName, callback) {\r\n    var video = document.createElement(\"video\");\r\n    video.onload = callback;\r\n    video.src = videoName;\r\n    this._assets[videoName] = video;\r\n    return video;\r\n};\r\n\r\n/**\r\n * Load and store a resources file. If the file's extension is `.json` then it's parsed using `JSON.parse` function.\r\n * @method loadResource\r\n * @param {String} resourceUrl The path of the resource file.\r\n * @param {String} ext The extension of the resource file.\r\n * @param {Function} callback (optional) The callback to call when the resource file is loaded.\r\n * @return {HTMLVideoElement} Returns the resource.\r\n */\r\nAtlantis.ContentManager.prototype.loadResource = function(resourceUrl, ext, callback) {\r\n    var that = this;\r\n    Atlantis.ajax({\r\n        method: \"GET\",\r\n        url: resourceUrl,\r\n        success: function(response) {\r\n            var result = response;\r\n            if (ext == \"json\") {\r\n                result = JSON.parse(response);\r\n            }\r\n            that._assets[resourceUrl] = result;\r\n            callback(result);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Dispose all assets\r\n * @method dispose\r\n */\r\nAtlantis.ContentManager.prototype.dispose = function() {\r\n    this._assets.length = 0;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n// ---------------------- //\r\n// --- Game Component --- //\r\n// ---------------------- //\r\n\r\n/**\r\n * Create a game component.\r\n * @constructor\r\n * @class GameComponent\r\n * @param {Atlantis.Game} game A game instance.\r\n */\r\nAtlantis.GameComponent = function(game) {\r\n    this.game = game;\r\n    this.enabled = true;\r\n    this.initialized = false;\r\n};\r\n\r\n/**\r\n * Initialize the logic of the component.\r\n * @method initialize\r\n */\r\nAtlantis.GameComponent.prototype.initialize = function() {\r\n    this.initialized = true;\r\n};\r\n\r\n/**\r\n * Update the logic of the component.\r\n * @method update\r\n * @param {Atlantis.GameTime} gameTime\r\n */\r\nAtlantis.GameComponent.prototype.update = function(gameTime) {};\r\n\r\n// ---\r\n// --- Getters and setters\r\n// ---\r\n\r\n/**\r\n * Gets the status of the component.\r\n * @method isEnabled\r\n * @return {Boolean} The status of the component.\r\n */\r\nAtlantis.GameComponent.prototype.isEnabled = function() {\r\n    return this.enabled;\r\n};\r\n\r\n/**\r\n * Flags used to determine if the initialization processes is done.\r\n * @method isInitialized\r\n * @return {Boolean}\r\n */\r\nAtlantis.GameComponent.prototype.isInitialized = function() {\r\n    return this.initialized;\r\n};\r\n\r\n/**\r\n * Gets the status of the component.\r\n * @method @setEnabled\r\n * @param {Boolean} enabled Sets to true to enable\r\n */\r\nAtlantis.GameComponent.prototype.setEnabled = function(enabled) {\r\n    this.enabled = enabled;\r\n};\r\n\r\n// ------------------------------------------------ //\r\n// ---  Drawable Game Component implementation  --- //\r\n// ------------------------------------------------ //\r\n\r\n/**\r\n * Create a drawable game component.\r\n * @constructor\r\n * @class DrawableGameComponent\r\n * @extends Atlantis.GameComponent\r\n * @param {Atlantis.Game} game A game instance.\r\n */\r\nAtlantis.DrawableGameComponent = function(game) {\r\n    Atlantis.GameComponent.call(this, game);\r\n    this.visible = true;\r\n    this.assetLoaded = false;\r\n};\r\n\r\nAtlantis.DrawableGameComponent.prototype = new Atlantis.GameComponent();\r\n\r\n/**\r\n * Load assets of the component.\r\n * @method loadContent\r\n */\r\nAtlantis.DrawableGameComponent.prototype.loadContent = function() {\r\n    this.assetLoaded = true;\r\n};\r\n\r\n/**\r\n * Unload and dispose all assets of the component.\r\n * @method unloadContent\r\n */\r\nAtlantis.DrawableGameComponent.prototype.unloadContent = function() {\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/** \r\n * Draw the component on screen.\r\n * @method draw\r\n * @param {Atlantis.GameTime} gameTime\r\n * @param {Object} context The canvas context.\r\n */\r\nAtlantis.DrawableGameComponent.prototype.draw = function(gameTime, context) {};\r\n\r\n/**\r\n * Gets the visibility of the component.\r\n * @method isVisible\r\n * @return {Boolean} Return true if visible otherwise return false\r\n */\r\nAtlantis.DrawableGameComponent.prototype.isVisible = function() {\r\n    return this.isVisible;\r\n};\r\n\r\n/**\r\n * Set the component visible or invisible\r\n * @method setVisible\r\n * @param visible\r\n */\r\nAtlantis.DrawableGameComponent.prototype.setVisible = function(visible) {\r\n    this.isVisible = visible;\r\n};\r\n\r\n// ------------------------------------------------ //\r\n// --- Game Component Collection implementation --- //\r\n// ------------------------------------------------ //\r\n\r\n/**\r\n * Create a collection of game components.\r\n * @constructor\r\n */\r\nAtlantis.GameComponentCollection = function() {\r\n    this.components = [];\r\n    this.drawables = [];\r\n    this.initialized = false;\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/**\r\n * Initialize logic.\r\n * @method initialize\r\n */\r\nAtlantis.GameComponentCollection.prototype.initialize = function(content) {\r\n    for (var i = 0, l = this.components.length; i < l; i++) {\r\n        this.components[i].initialize();\r\n    }\r\n    this.initialized = true;\r\n};\r\n\r\n/**\r\n * Load assets\r\n * @method loadContent\r\n */\r\nAtlantis.GameComponentCollection.prototype.loadContent = function() {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        this.drawables[i].loadContent();\r\n    }\r\n    this.assetLoaded = true;\r\n};\r\n\r\n/**\r\n * Unload assets\r\n * @method unloadContent\r\n */\r\nAtlantis.GameComponentCollection.prototype.unloadContent = function() {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        this.drawables[i].unloadContent();\r\n    }\r\n    this.assetLoaded = false;\r\n};\r\n\r\n/**\r\n * Update all components\r\n * @method update\r\n * @param {Atlantis.GameTime} gameTime\r\n */\r\nAtlantis.GameComponentCollection.prototype.update = function(gameTime) {\r\n    for (var i = 0, l = this.components.length; i < l; i++) {\r\n        if (this.components[i].isEnabled()) {\r\n            this.components[i].update(gameTime);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw all components\r\n * @method draw\r\n */\r\nAtlantis.GameComponentCollection.prototype.draw = function(gameTime, context) {\r\n    for (var i = 0, l = this.drawables.length; i < l; i++) {\r\n        if (this.drawables[i].isVisible()) {\r\n            this.drawables[i].draw(gameTime, context);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Add a component to the collection\r\n * @method add\r\n * @param {Atlantis.GameComponent} A component or drawable gameComponent to add.\r\n */\r\nAtlantis.GameComponentCollection.prototype.add = function(gameComponent) {\r\n    if (this.components.indexOf(gameComponent) == -1) {\r\n        this.components.push(gameComponent);\r\n\r\n        if (this.initialized) {\r\n            gameComponent.initialize();\r\n        }\r\n\r\n        if (gameComponent instanceof Atlantis.DrawableGameComponent) {\r\n            this.drawables.push(gameComponent);\r\n\r\n            if (this.assetLoaded) {\r\n                gameComponent.loadContent();\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Remove a component from the collection\r\n * @method remove\r\n * @return {Boolean} Return true if the component has been successfully removed.\r\n */\r\nAtlantis.GameComponentCollection.prototype.remove = function(gameComponent) {\r\n    var index = this.components.indexOf(gameComponent);\r\n    if (index > -1) {\r\n        this.components.splice(index, 1);\r\n        if (gameComponent instanceof Atlantis.DrawableGameComponent) {\r\n            index = this.drawables.indexOf(gameComponent);\r\n            if (index > -1) {\r\n                this.drawables.splice(index, 1);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\r\n/**\r\n * Get a component from the collection\r\n * @method get\r\n */\r\nAtlantis.GameComponentCollection.prototype.get = function(index) {\r\n    var component = null;\r\n    var pIndex = this.components.indexOf(gameComponent);\r\n    if (pIndex > -1) {\r\n        component = this.components[index];\r\n    }\r\n\r\n    return null;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a game time object who's responsible to get time informations.\r\n * @constructor\r\n * @class GameTime\r\n */\r\nAtlantis.GameTime = function() {\r\n    this.reset();\r\n};\r\n\r\n/**\r\n * Reset the game timer.\r\n * @method reset\r\n */\r\nAtlantis.GameTime.prototype.reset = function() {\r\n    this.elapsedTime = 0;\r\n    this.totalGameTime = 0;\r\n    this.currentTime = +new Date();\r\n    this.fps = 0;\r\n};\r\n\r\n/**\r\n * Update the game time.\r\n * @method update\r\n */\r\nAtlantis.GameTime.prototype.update = function() {\r\n    var now = +new Date();\r\n    this.elapsedTime = now - this.currentTime;\r\n    this.totalGameTime += this.elapsedTime;\r\n    this.fps = 1000 / (now - this.currentTime);\r\n    this.currentTime = now;\r\n};\r\n\r\n/**\r\n * Gets the elapsed time since last frame.\r\n * @method getElapsedTime\r\n * @return {Number} The elapsed time since last frame.\r\n */\r\nAtlantis.GameTime.prototype.getElapsedTime = function() {\r\n    return this.elapsedTime;\r\n};\r\n\r\n/**\r\n * Gets the total elapsed time since the begining.\r\n * @method getTotalGameTime\r\n * @return {Number} The total elapsed time.\r\n */\r\nAtlantis.GameTime.prototype.getTotalGameTime = function() {\r\n    return this.totalGameTime;\r\n};\r\n\r\n/**\r\n * Gets the current FPS indice.\r\n * @method getFPS\r\n * @return {Number} Return the current FPS.\r\n */\r\nAtlantis.GameTime.prototype.getFPS = function() {\r\n    return this.fps;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * @class MathHelpers\r\n */\r\nAtlantis.MathHelper = {\r\n    /**\r\n     * Gets PI value.\r\n     * @attribute Pi\r\n     * @readOnly\r\n     * @type {Number}\r\n     */\r\n    Pi: Math.PI,\r\n\r\n    /**\r\n     * Gets PI over 2 value.\r\n     * @attribute PiOver2\r\n     * @readOnly\r\n     * @type {Number}\r\n     */\r\n    PiOver2: Math.PI / 2,\r\n\r\n    /**\r\n     * Gets PI over 4 value.\r\n     * @attribute PiOver4\r\n     * @readOnly\r\n     * @type {Number}\r\n     */\r\n    PiOver4: Math.PI / 4,\r\n\r\n    /**\r\n     * Gets PI * 2 value.\r\n     * @attribute TwoPi\r\n     * @readOnly\r\n     * @type {Number}\r\n     */\r\n    TwoPi: Math.PI * 2,\r\n\r\n    /**\r\n     *\r\n     * @method clamp\r\n     */\r\n    clamp: function(value, min, max) {\r\n        value = (value > max) ? max : value;\r\n        value = (value < min) ? min : value;\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @method distance\r\n     */\r\n    distance: function(value1, value2) {\r\n        return Math.abs(value1 - value2);\r\n    },\r\n\r\n    hermite: function(value1, tangent1, value2, tangent2, amount) {\r\n        var sCubed = amount * amount * amount;\r\n        var sSquared = amount * amount;\r\n\r\n        if (amount === 0) {\r\n            return value1;\r\n        } else if (amount === 1) {\r\n            return value2;\r\n        }\r\n\r\n        return (2 * value1 - 2 * value2 + tangent2 + tangent1) * sCubed + (3 * value2 - 3 * value1 - 2 * tangent1 - tangent2) * sSquared + tangent1 * amount + value1;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @method lerp\r\n     */\r\n    lerp: function(value1, value2, amount) {\r\n        amount = amount < 0 ? 0 : amount;\r\n        amount = amount > 1 ? 1 : amount;\r\n        return value1 + (value2 - value1) * amount;\r\n    },\r\n\r\n    smoothStep: function(value1, value2, amount) {\r\n        var result = this.clamp(amount, 0, 1);\r\n        result = this.hermite(value1, 0, value2, 0, result);\r\n        return result;\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @method toDegrees\r\n     */\r\n    toDegrees: function(radians) {\r\n        return (radians * (180 / Math.PI));\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @method toRadians\r\n     */\r\n    toRadians: function(degrees) {\r\n        return (degrees * (Math.PI / 180));\r\n    },\r\n\r\n    /**\r\n     *\r\n     * @method isPowerOfTwo\r\n     */\r\n    isPowerOfTwo: function(value) {\r\n        return (value > 0) && ((value & (value - 1)) == 0);\r\n    }\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = Atlantis || {};\r\n\r\n/**\r\n * Create a rectangle structure.\r\n * @constructor\r\n * @class Rectangle\r\n * @param {Number} x A value for X coordinate.\r\n * @param {Number} y A value for Y coordinate.\r\n * @param {Number} width A value for the width of the rectangle.\r\n * @param {Number} height A value for the height of the rectangle\r\n */\r\nAtlantis.Rectangle = function(x, y, width, height) {\r\n    this.x = x || 0;\r\n    this.y = y || 0;\r\n    this.width = width || 0;\r\n    this.height = height || 0;\r\n};\r\n\r\n/**\r\n * Add a rectangle to this rectangle.\r\n * @method add\r\n * @param {Atlantis.Rectangle} rectangle The rectangle to add.\r\n */\r\nAtlantis.Rectangle.prototype.add = function(rectangle) {\r\n    this.x += rectangle.x;\r\n    this.y += rectangle.y;\r\n    this.width += rectangle.width;\r\n    this.height += rectangle.height;\r\n};\r\n\r\n/**\r\n * Divide a rectangle to this rectangle.\r\n * @method divide\r\n * @param {Atlantis.Rectangle} rectangle The rectangle to divide.\r\n */\r\nAtlantis.Rectangle.prototype.divide = function(rectangle) {\r\n    this.x /= rectangle.x;\r\n    this.y /= rectangle.y;\r\n    this.width /= rectangle.width;\r\n    this.height /= rectangle.height;\r\n};\r\n\r\nAtlantis.Rectangle.prototype.fromRectangle = function(rectangle) {\r\n    this.x = rectangle.x ? +rectangle.x : 0;\r\n    this.y = rectangle.y ? +rectangle.y : 0;\r\n    this.width = rectangle.width ? +rectangle.width : 0;\r\n    this.height = rectangle.height ? +rectangle.height : 0;\r\n};\r\n\r\n/**\r\n * Multiply a rectangle to this rectangle.\r\n * @method multiply\r\n * @param {Atlantis.Rectangle} rectangle The rectangle to multiply.\r\n */\r\nAtlantis.Rectangle.prototype.multiply = function(rectangle) {\r\n    this.x *= rectangle.x;\r\n    this.y *= rectangle.y;\r\n    this.width *= rectangle.width;\r\n    this.height *= rectangle.height;\r\n};\r\n\r\n/**\r\n * Subtract a rectangle to this rectangle.\r\n * @method subtract\r\n * @param {Atlantis.Rectangle} rectangle The rectangle to subtract.\r\n */\r\nAtlantis.Rectangle.prototype.subtract = function(rectangle) {\r\n    this.x -= rectangle.x;\r\n    this.y -= rectangle.y;\r\n    this.width -= rectangle.width;\r\n    this.height -= rectangle.height;\r\n};\r\n\r\n/**\r\n * Determine if a Rectangle, Point or coordinates are contains in rectangle\r\n * @method contains\r\n * @param {Number|Point|Rectangle} X coordinate or an instance of Point or an instance of Rectangle.\r\n * @param {Number} Y coordinate.\r\n */\r\nAtlantis.Rectangle.prototype.contains = function(value1, value2) {\r\n    if (value1 instanceof Atlantis.Rectangle) {\r\n        return (this.x <= value1.x) && (value1.getRight() <= this.getRight()) && (this.y <= value1.y) && (value1.getBottom() <= this.getBottom());\r\n    } else {\r\n        return (this.x <= value1) && (value1 < this.getRight()) && (this.y <= value2) && (value2 < this.getBottom());\r\n    }\r\n};\r\n\r\n/**\r\n *\r\n * @method contains\r\n */\r\nAtlantis.Rectangle.prototype.intersects = function(rectangle) {\r\n    return (rectangle.getLeft() < this.getRight()) && (this.getLeft() < rectangle.getRight()) && (rectangle.getTop() < this.getBottom()) && (this.getTop() < rectangle.getBottom());\r\n};\r\n\r\nAtlantis.Rectangle.prototype.toString = function() {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" width: \", this.width, \" height: \", this.height].toString();\r\n}\r\n\r\n/**\r\n * gets the position.\r\n * @return The position.\r\n */\r\nAtlantis.Rectangle.prototype.toVector2 = function() {\r\n    return new Atlantis.Vector2(this.x, this.y);\r\n};\r\n\r\n/**\r\n * Gets the position.\r\n * @return The position.\r\n */\r\nAtlantis.Rectangle.prototype.toPoint = function() {\r\n    return new Atlantis.Point(this.x, this.y);\r\n}\r\n\r\n// ---\r\n// --- Getters and setters\r\n// ---\r\n\r\n/**\r\n * Gets the top value.\r\n * @method getTop\r\n * @return {Number} Top coordinate (y)\r\n */\r\nAtlantis.Rectangle.prototype.getTop = function() {\r\n    return this.y;\r\n};\r\n\r\n/**\r\n * Gets the bottom value.\r\n * @method getBottom\r\n * @return {Number} Bottom coordinate (y + height)\r\n */\r\nAtlantis.Rectangle.prototype.getBottom = function() {\r\n    return this.y + this.height;\r\n};\r\n\r\n/**\r\n * Gets the left value.\r\n * @method getLeft\r\n * @return {Number} Left coordinate (x)\r\n */\r\nAtlantis.Rectangle.prototype.getLeft = function() {\r\n    return this.x;\r\n};\r\n\r\n/**\r\n * Gets the right value.\r\n * @method getRight\r\n * @return {Number} Right value (x + width)\r\n */\r\nAtlantis.Rectangle.prototype.getRight = function() {\r\n    return this.x + this.width;\r\n};\r\n\r\n/**\r\n * Gets the center of the rectangle.\r\n * @method getCenter\r\n * @return {Number} Center of the rectangle.\r\n * @return {Atlantis.Point} A point of the center of the rectangle.\r\n */\r\nAtlantis.Rectangle.prototype.getCenter = function() {\r\n    return new Atlantis.Point(this.x + (this.width / 2), this.y + (this.height / 2));\r\n};\r\n\r\n/**\r\n * Gets width\r\n * @return {Number} Return the with.\r\n */\r\nAtlantis.Rectangle.prototype.getWidth = function() {\r\n    return this.width;\r\n};\r\n\r\n/**\r\n * Gets height\r\n * @return {Number} Return the height\r\n */\r\nAtlantis.Rectangle.prototype.getHeight = function() {\r\n    return this.height;\r\n};\r\n\r\n/**\r\n * Gets the top center.\r\n * @return {Atlantis.Vector2} The top center of the rectangle\r\n */\r\nAtlantis.Rectangle.prototype.getTopCenter = function() {\r\n    return new Atlantis.Vector2(this.x + this.width / 2, this.y);\r\n};\r\n\r\n/**\r\n * Gets the bottom center.\r\n * @return {Atlantis.Vector2} The bottom center.\r\n */\r\nAtlantis.Rectangle.prototype.getBottomCenter = function() {\r\n    return new Atlantis.Vector2(this.x + this.width / 2, this.y + this.height);\r\n};\r\n\r\n/**\r\n * Gets the left center.\r\n * @return {Atlantis.Vector2} The left center.\r\n */\r\nAtlantis.Rectangle.prototype.getLeftCenter = function() {\r\n    return new Atlantis.Vector2(this.x, this.y + this.height / 2);\r\n};\r\n\r\n/**\r\n * Gets the right center.\r\n * @return {Atlantis.Vector2} The right center.\r\n */\r\nAtlantis.Rectangle.prototype.getRightCenter = function() {\r\n    return new Atlantis.Vector2(this.x + this.width, this.y + this.height / 2);\r\n};\r\n\r\n/**\r\n * Sets values to rectangle.\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} width\r\n * @param {Number} height\r\n */\r\nAtlantis.Rectangle.prototype.set = function(x, y, width, height) {\r\n    if (x instanceof Atlantis.Rectangle) {\r\n        this.x = x.x;\r\n        this.y = x.y;\r\n        this.width = x.width;\r\n        this.height = x.height;\r\n    } else {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.width = width;\r\n        this.height = height;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets the position of the rectangle\r\n * @param {Number|Altantis.Vector2|Atlantis.Point} x\r\n * @param {Number} y\r\n */\r\nAtlantis.Rectangle.prototype.setPosition = function(x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\n\r\n/**\r\n * Sets the size of the rectangle.\r\n * @param {Number} width\r\n * @param {Number} height\r\n */\r\nAtlantis.Rectangle.prototype.setSize = function(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n};\r\n\r\nAtlantis.Rectangle.prototype.clone = function() {\r\n    return new Atlantis.Rectangle(this.x, this.y, this.width, this.height);\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Rectangle.prototype.toString = function() {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" width: \", this.width, \" height: \", this.height].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a matrix. Parameter can be a matrix, an array of 16 floats or nothing (all fields case are sets to 0).\r\n * @class Matrix\r\n * @constructor\r\n * @param {Atlantis.Matrix|Array} \r\n */\r\nAtlantis.Matrix = function(values) {\r\n    if (values instanceof Atlantis.Matrix) {\r\n        var values = values.toArray();\r\n        this.set(values);\r\n    } else if (values instanceof Array && values.length == 16) {\r\n        this.set(values);\r\n    } else {\r\n        this.M11 = 0;\r\n        this.M12 = 0;\r\n        this.M13 = 0;\r\n        this.M14 = 0;\r\n        this.M21 = 0;\r\n        this.M22 = 0;\r\n        this.M23 = 0;\r\n        this.M24 = 0;\r\n        this.M31 = 0;\r\n        this.M32 = 0;\r\n        this.M33 = 0;\r\n        this.M34 = 0;\r\n        this.M41 = 0;\r\n        this.M42 = 0;\r\n        this.M43 = 0;\r\n        this.M44 = 0;\r\n    }\r\n};\r\n\r\nAtlantis.Matrix.prototype.clone = function() {\r\n    return new Atlantis.Matrix(this.toArray());\r\n};\r\n\r\n/**\r\n * Set all values of the matrix.\r\n * @method set\r\n * @param {Array} values An array of 16 values who start at M11 and stop at M44\r\n */\r\nAtlantis.Matrix.prototype.set = function(values) {\r\n    if (values.length == 16) {\r\n        this.M11 = values[0];\r\n        this.M12 = values[1];\r\n        this.M13 = values[2];\r\n        this.M14 = values[3];\r\n        this.M21 = values[4];\r\n        this.M22 = values[5];\r\n        this.M23 = values[6];\r\n        this.M24 = values[7];\r\n        this.M31 = values[8];\r\n        this.M32 = values[9];\r\n        this.M33 = values[10];\r\n        this.M34 = values[11];\r\n        this.M41 = values[12];\r\n        this.M42 = values[13];\r\n        this.M43 = values[14];\r\n        this.M44 = values[15];\r\n    }\r\n};\r\n\r\n/**\r\n * Gets identity value for push it into matrix.\r\n * @method getIdentityValues\r\n * @return {Array} Return an array that correspond of identity matrix.\r\n */\r\nAtlantis.Matrix.prototype.getIdentityValues = function() {\r\n    var values = [\r\n        1, 0, 0, 0,\r\n        0, 1, 0, 0,\r\n        0, 0, 1, 0,\r\n        0, 0, 0, 1\r\n    ];\r\n    return values;\r\n};\r\n\r\n/**\r\n * Gets an array of values setted to 0.\r\n * @method getZeroValues\r\n * @return {Array} Return an array with 0.\r\n */\r\nAtlantis.Matrix.prototype.getZeroValues = function() {\r\n    var values = [];\r\n    for (var i = 0; i < 16; i++) {\r\n        values.push(0.0);\r\n    }\r\n    return values;\r\n};\r\n\r\n/**\r\n * Sets the matrix to identity.\r\n * @method setIdentity\r\n */\r\nAtlantis.Matrix.prototype.setIdentity = function() {\r\n    this.set(this.getIdentityValues());\r\n};\r\n\r\n/**\r\n * Gets an identity matrix.\r\n * @method getMatrixIdentity\r\n * @static\r\n * @return {Atlantis.Matrix} Return an identity matrix.\r\n */\r\nAtlantis.Matrix.getMatrixIdentity = function() {\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.setIdentity();\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Gets values of matrix in array. Start at M11 to M44.\r\n * @method toArray\r\n * @return {Array} An array of values.\r\n */\r\nAtlantis.Matrix.prototype.toArray = function() {\r\n    var values = [];\r\n    values.push(this.M11);\r\n    values.push(this.M12);\r\n    values.push(this.M13);\r\n    values.push(this.M14);\r\n    values.push(this.M21);\r\n    values.push(this.M22);\r\n    values.push(this.M23);\r\n    values.push(this.M24);\r\n    values.push(this.M31);\r\n    values.push(this.M32);\r\n    values.push(this.M33);\r\n    values.push(this.M34);\r\n    values.push(this.M41);\r\n    values.push(this.M42);\r\n    values.push(this.M43);\r\n    values.push(this.M44);\r\n    return values;\r\n};\r\n\r\n/**\r\n * Sets the left of the matrix.\r\n * @method setLeft\r\n * @param {Atlantis.Vector3} vector A vector to use.\r\n */\r\nAtlantis.Matrix.prototype.setLeft = function(vector) {\r\n    this.M11 = -vector.x;\r\n    this.M12 = -vector.y;\r\n    this.M13 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the left of the matrix.\r\n * @method getLeft\r\n * @return {Atlantis.Matrix} Return a the left vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getLeft = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M11;\r\n    vector.y = -this.M12;\r\n    vector.z = -this.M13;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the right of the matrix.\r\n * @method setRight\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setRight = function(vector) {\r\n    this.M11 = vector.x;\r\n    this.M12 = vector.y;\r\n    this.M13 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the right of the matrix.\r\n * @method getRight\r\n * @return {Atlantis.Matrix} Return a the right vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getRight = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M11;\r\n    vector.y = this.M12;\r\n    vector.z = this.M13;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the up of the matrix.\r\n * @method setUp\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setUp = function(vector) {\r\n    this.M21 = vector.x;\r\n    this.M22 = vector.y;\r\n    this.M23 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the up of the matrix.\r\n * @method getUp\r\n * @return {Atlantis.Matrix} Return a the up vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getUp = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M21;\r\n    vector.y = this.M22;\r\n    vector.z = this.M23;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the down of the matrix.\r\n * @method setDown\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setDown = function(vector) {\r\n    this.M21 = -vector.x;\r\n    this.M22 = -vector.y;\r\n    this.M23 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the down of the matrix.\r\n * @method getDown\r\n * @return {Atlantis.Matrix} Return a the down vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getDown = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M21;\r\n    vector.y = -this.M22;\r\n    vector.z = -this.M23;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the backward of the matrix.\r\n * @method setBackward\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setBackward = function(vector) {\r\n    this.M31 = vector.x;\r\n    this.M32 = vector.y;\r\n    this.M33 = vector.z;\r\n};\r\n\r\n/**\r\n * Gets the backward of the matrix.\r\n * @method getBackward\r\n * @return {Atlantis.Matrix} Return a the backward vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getBackward = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = this.M31;\r\n    vector.y = this.M32;\r\n    vector.z = this.M33;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets the forward of the matrix.\r\n * @method setForward\r\n * @param {Atlantis.Vector3} vector\r\n */\r\nAtlantis.Matrix.prototype.setForward = function(vector) {\r\n    this.M31 = -vector.x;\r\n    this.M32 = -vector.y;\r\n    this.M33 = -vector.z;\r\n};\r\n\r\n/**\r\n * Gets the forward of the matrix.\r\n * @method getForward\r\n * @return {Atlantis.Matrix} Return a the forward vector of the matrix.\r\n */\r\nAtlantis.Matrix.prototype.getForward = function() {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = -this.M31;\r\n    vector.y = -this.M32;\r\n    vector.z = -this.M33;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Sets translation.\r\n * @method setTranslation\r\n * @param {Atlantis.Vetor3} position The position to set.\r\n */\r\nAtlantis.Matrix.prototype.setTranslation = function(position) {\r\n    this.M41 = position.x;\r\n    this.M42 = position.y;\r\n    this.M43 = position.z;\r\n};\r\n\r\n/**\r\n * Add a matrix to this matrix.\r\n * @method add\r\n * @param {Atlantis.Matrix} matrix A matrix to add.\r\n */\r\nAtlantis.Matrix.prototype.add = function(matrix) {\r\n    var mValues = this.toArray();\r\n    var eValues = matrix.toArray();\r\n\r\n    for (var i = 0; i < 16; i++) {\r\n        mValues[i] += eValues[i];\r\n    }\r\n    this.set(mValues);\r\n}\r\n\r\n/**\r\n * Add two matrix.\r\n * @method add\r\n * @static\r\n * @param {Atlantis.Matrix} matA A matrix\r\n * @param {Atlantis.Matrix} matB Another matrix to add with the first\r\n * @return {Atlantis.Matrix} Return a new matrix.\r\n */\r\nAtlantis.Matrix.add = function(matA, matB) {\r\n    var matrix = new Atlantis.Matrix(matA);\r\n    matrix.add(matB);\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a rotation matrix on X axis.\r\n * @method createRotationX\r\n * @static\r\n * @param {Atlantis.Vector3} rotation An angle in radians\r\n * @return {Atlantis.Matrix} Return a rotation matrix on X axis.\r\n */\r\nAtlantis.Matrix.createRotationX = function(rotation) {\r\n    var matrix = getMatrixIdentity();\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M22 = cos;\r\n    matrix.M23 = sin;\r\n    matrix.M32 = -sin;\r\n    matrix.M33 = cos;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a rotation matrix on Y axis.\r\n * @method createRotationY\r\n * @static\r\n * @param {Atlantis.Vector3} rotation An angle in radians\r\n * @return {Atlantis.Matrix} Return a rotation matrix on Y axis.\r\n */\r\nAtlantis.Matrix.createRotationY = function(rotation) {\r\n    var matrix = getMatrixIdentity();\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M11 = cos;\r\n    matrix.M13 = -sin;\r\n    matrix.M31 = sin;\r\n    matrix.M33 = cos;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a rotation matrix on Z axis.\r\n * @method createRotationX\r\n * @static\r\n * @param {Atlantis.Vector3} rotation An angle in radians\r\n * @return {Atlantis.Matrix} Return a rotation matrix on Z axis.\r\n */\r\nAtlantis.Matrix.createRotationZ = function(rotation) {\r\n    var matrix = this.getMatrixIdentity();\r\n\r\n    var cos = Math.cos(rotation);\r\n    var sin = Math.sin(rotation);\r\n\r\n    matrix.M11 = cos;\r\n    matrix.M13 = sin;\r\n    matrix.M31 = -sin;\r\n    matrix.M33 = cos;\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a scale matrix.\r\n * @method createScale\r\n * @static\r\n * @param {Number} sx Desired scale on X axis.\r\n * @param {Number} sy Desired scale on Y axis.\r\n * @param {Number} sz Desired scale on Z axis.\r\n * @return {Atlantis.Matrix} Return a scale matrix.\r\n */\r\nAtlantis.Matrix.createScale = function(sx, sy, sz) {\r\n    var matrix = Atlantis.Matrix.getMatrixIdentity();\r\n    matrix.M11 = sx;\r\n    matrix.M22 = sy || sx;\r\n    matrix.M33 = sz || sx;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a translation matrix.\r\n * @method createTranslation\r\n * @static\r\n * @param x Position on X axis.\r\n * @param y Position on Y axis.\r\n * @param z Position on Z axis.\r\n * @return Return a matrix translation.\r\n */\r\nAtlantis.Matrix.createTranslation = function(x, y, z) {\r\n    var matrix = Atantis.Matrix.getMatrixIdentity();\r\n    matrix.M41 = x;\r\n    matrix.M42 = y || x;\r\n    matrix.M43 = z || x;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a view matrix.\r\n * @metod createLookAt\r\n * @static\r\n * @param {Atlantis.Vector3} position The position of the camera.\r\n * @param Atlantis.Vector3} target The target of the camera.\r\n * @param Atlantis.Vector3} upVector Vector up\r\n * @return {Atlantis.Matrix} Return a view camera.\r\n */\r\nAtlantis.Matrix.createLookAt = function(position, target, upVector) {\r\n    var zAxis = Atlantis.Vector3.subtract(target, position);\r\n    zAxis.normalize();\r\n    var xAxis = Atlantis.Vector3.cross(upVector, zAxis);\r\n    xAxis.normalize();\r\n    var yAxis = Atlantis.Vector3.cross(zAxis, xAxis);\r\n    yAxis.normalize();\r\n\r\n    var matrix = Atlantis.Matrix.getMatrixIdentity();\r\n\r\n    matrix.M11 = xAxis.x;\r\n    matrix.M21 = xAxis.y;\r\n    matrix.M31 = xAxis.z;\r\n\r\n    matrix.M12 = yAxis.x;\r\n    matrix.M22 = yAxis.y;\r\n    matrix.M32 = yAxis.z;\r\n\r\n    matrix.M13 = zAxis.x;\r\n    matrix.M23 = zAxis.y;\r\n    matrix.M33 = zAxis.z;\r\n\r\n    matrix.M41 = -Atlantis.Vector3.dot(xAxis, position);\r\n    matrix.M42 = -Atlantis.Vector3.dot(yAxis, position);\r\n    matrix.M43 = -Atlantis.Vector3.dot(zAxis, position);\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create an orthogonal projection matrix.\r\n * @method createOrthograhic\r\n * @static\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Number} zNear\r\n * @param {Number} zFar\r\n * @return {Atlantis.Matrix}\r\n */\r\nAtlantis.Matrix.createOrthographic = function(width, height, zNear, zFar) {\r\n    var matrix = new Matrix();\r\n    matrix.M11 = 2.0 / width;\r\n    matrix.M12 = matrix.M13 = matrix.M14 = 0.0;\r\n    matrix.M22 = 2.0 / height;\r\n    matrix.M21 = matrix.M23 = matrix.M24 = 0.0;\r\n    matrix.M33 = 1.0 / (zNear - zFar);\r\n    matrix.M31 = matrix.M32 = matrix.M34 = 0.0;\r\n    matrix.M41 = matrix.M42 = 0.0;\r\n    matrix.M43 = zNear / (zNear - zFar);\r\n    matrix.M44 = 1.0;\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Create a customized orthogonal projection matrix.\r\n * @method createOrthographicOffCenter\r\n * @static\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Number} zNear\r\n * @param {Number} zFar\r\n * @return {Atlantis.Matrix}\r\n */\r\nAtlantis.Matrix.createOrthographicOffCenter = function(left, right, bottom, top, zNear, zFar) {\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.M11 = (2.0 / (right - left));\r\n    matrix.M12 = 0.0;\r\n    matrix.M13 = 0.0;\r\n    matrix.M14 = 0.0;\r\n    matrix.M21 = 0.0;\r\n    matrix.M22 = (2.0 / (top - bottom));\r\n    matrix.M23 = 0.0;\r\n    matrix.M24 = 0.0;\r\n    matrix.M31 = 0.0;\r\n    matrix.M32 = 0.0;\r\n    matrix.M33 = (1.0 / (zNear - zFar));\r\n    matrix.M34 = 0.0;\r\n    matrix.M41 = ((left + right) / (left - right));\r\n    matrix.M42 = ((top + bottom) / (bottom - top));\r\n    matrix.M43 = (zNear / (zNear - zFar));\r\n    matrix.M44 = 1.0;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a perspective field of view matrix with Left hand notation.\r\n * @method createPerspectiveFieldOfView\r\n * @static\r\n * @param {Number} fov Desired field of view (Math.PI / 4 is a good value)\r\n * @param {Number} aspect Desired aspect ratio (Screen width / height)\r\n * @param {Number} near Near clip\r\n * @param {Number} far Far clip\r\n * @return {Atlantis.Matrix} Return a matrix of this type of perspective.\r\n */\r\nAtlantis.Matrix.createPerspectiveFieldOfView = function(fov, aspect, zNear, zFar) {\r\n    var yScale = (1.0 / Math.tan(fov * 0.5));\r\n    var xScale = yScale / aspect;\r\n    var halfWidth = zNear / xScale;\r\n    var halfHeight = zNear / yScale;\r\n\r\n    return Atlantis.Matrix.createPerspectiveOffCenter(-halfWidth, halfWidth, -halfHeight, halfHeight, zNear, zFar);\r\n};\r\n\r\n/**\r\n * Create a perspective field of view matrix with Right hand notation.\r\n * @method createPerspectiveFieldOfViewRH\r\n * @static\r\n * @param {Number} fov Desired field of view (Math.PI / 4 is a good value)\r\n * @param {Number} aspect Desired aspect ratio (Screen width / height)\r\n * @param {Number} near Near clip\r\n * @param {Number} far Far clip\r\n * @return {Atlantis.Matrix} Return a matrix of this type of perspective.\r\n */\r\nAtlantis.Matrix.createPerspetiveFieldOfViewRH = function(fov, aspect, zNear, zFar) {\r\n    var yScale = (1.0 / Math.tan(fov * 0.5));\r\n    var xScale = yScale / aspect;\r\n    var halfWidth = zNear / xScale;\r\n    var halfHeight = zNear / yScale;\r\n\r\n    return Matrix.createPerspectiveOffCenterRH(-halfWidth, halfWidth, -halfHeight, halfHeight, zNear, zFar);\r\n};\r\n\r\n/**\r\n * Create a custom perspective matrix.\r\n * @method createPerspectiveOffCenter\r\n * @static\r\n * @param {Number} left Minimum X value of the viewing volume.\r\n * @param {Number} right Maximum X value of the viewing volume.\r\n * @param {Number} bottom Minimum Y value of the viewing volume.\r\n * @param {Number} top Maximum Y value of the viewing volume.\r\n * @param {Number} zNear Minimum Z value of the viewing volume.\r\n * @param {Number} zFar Maximum Z value of the viewing volume.\r\n * @return {Atlantis.Matrix} Return a new custom perspective matrix.\r\n */\r\nAtlantis.Matrix.createPerspectiveOffCenter = function(left, right, bottom, top, zNear, zFar) {\r\n    var zRange = zFar / (zFar - zNear);\r\n    var matrix = new Atlantis.Matrix();\r\n    matrix.M11 = 2.0 * zNear / (right - left);\r\n    matrix.M22 = 2.0 * zNear / (top - bottom);\r\n    matrix.M31 = (left + right) / (left - right);\r\n    matrix.M32 = (top + bottom) / (bottom - top);\r\n    matrix.M33 = zRange;\r\n    matrix.M34 = 1.0;\r\n    matrix.M43 = -zNear * zRange;\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Create a custom perspective matrix (Right hand).\r\n * @method createPerspectiveOffCenter\r\n * @static\r\n * @param {Number} left Minimum X value of the viewing volume.\r\n * @param {Number} right Maximum X value of the viewing volume.\r\n * @param {Number} bottom Minimum Y value of the viewing volume.\r\n * @param {Number} top Maximum Y value of the viewing volume.\r\n * @param {Number} zNear Minimum Z value of the viewing volume.\r\n * @param {Number} zFar Maximum Z value of the viewing volume.\r\n * @return {Atlantis.Matrix} Return a new custom perspective matrix.\r\n */\r\nAtlantis.Matrix.createPerspectiveOffCenterRH = function(left, right, bottom, top, zNear, zFar) {\r\n    var matrix = createPerspectiveOffCenter(left, right, bottom, top, zNear, zFar);\r\n    matrix.M31 *= -1.0;\r\n    matrix.M32 *= -1.0;\r\n    matrix.M33 *= -1.0;\r\n    matrix.M34 *= -1.0;\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Invert the current Matrix.\r\n * @method invert\r\n */\r\nAtlantis.Matrix.prototype.invert = function() {\r\n    var b0 = (this.M31 * this.M42) - (this.M32 * this.M41);\r\n    var b1 = (this.M31 * this.M43) - (this.M33 * this.M41);\r\n    var b2 = (this.M34 * this.M41) - (this.M31 * this.M44);\r\n    var b3 = (this.M32 * this.M43) - (this.M33 * this.M42);\r\n    var b4 = (this.M34 * this.M42) - (this.M32 * this.M44);\r\n    var b5 = (this.M33 * this.M44) - (this.M34 * this.M43);\r\n\r\n    var d11 = this.M22 * b5 + this.M23 * b4 + this.M24 * b3;\r\n    var d12 = this.M21 * b5 + this.M23 * b2 + this.M24 * b1;\r\n    var d13 = this.M21 * -b4 + this.M22 * b2 + this.M24 * b0;\r\n    var d14 = this.M21 * b3 + this.M22 * -b1 + this.M23 * b0;\r\n\r\n    var det = this.M11 * d11 - this.M12 * d12 + this.M13 * d13 - this.M14 * d14;\r\n\r\n    if (Math.abs(det) == 0.0) {\r\n        this.set(this.getZeroValues());\r\n        return;\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    var a0 = (this.M11 * this.M22) - (this.M12 * this.M21);\r\n    var a1 = (this.M11 * this.M23) - (this.M13 * this.M21);\r\n    var a2 = (this.M14 * this.M21) - (this.M11 * this.M24);\r\n    var a3 = (this.M12 * this.M23) - (this.M13 * this.M22);\r\n    var a4 = (this.M14 * this.M22) - (this.M12 * this.M24);\r\n    var a5 = (this.M13 * this.M24) - (this.M14 * this.M23);\r\n\r\n    var d21 = this.M12 * b5 + this.M13 * b4 + this.M14 * b3;\r\n    var d22 = this.M11 * b5 + this.M13 * b2 + this.M14 * b1;\r\n    var d23 = this.M11 * -b4 + this.M12 * b2 + this.M14 * b0;\r\n    var d24 = this.M11 * b3 + this.M12 * -b1 + this.M13 * b0;\r\n\r\n    var d31 = this.M42 * a5 + this.M43 * a4 + this.M44 * a3;\r\n    var d32 = this.M41 * a5 + this.M43 * a2 + this.M44 * a1;\r\n    var d33 = this.M41 * -a4 + this.M42 * a2 + this.M44 * a0;\r\n    var d34 = this.M41 * a3 + this.M42 * -a1 + this.M43 * a0;\r\n\r\n    var d41 = this.M32 * a5 + this.M33 * a4 + this.M34 * a3;\r\n    var d42 = this.M31 * a5 + this.M33 * a2 + this.M34 * a1;\r\n    var d43 = this.M31 * -a4 + this.M32 * a2 + this.M34 * a0;\r\n    var d44 = this.M31 * a3 + this.M32 * -a1 + this.M33 * a0;\r\n\r\n    this.M11 = +d11 * det;\r\n    this.M12 = -d21 * det;\r\n    this.M13 = +d31 * det;\r\n    this.M14 = -d41 * det;\r\n    this.M21 = -d12 * det;\r\n    this.M22 = +d22 * det;\r\n    this.M23 = -d32 * det;\r\n    this.M24 = +d42 * det;\r\n    this.M31 = +d13 * det;\r\n    this.M32 = -d23 * det;\r\n    this.M33 = +d33 * det;\r\n    this.M34 = -d43 * det;\r\n    this.M41 = -d14 * det;\r\n    this.M42 = +d24 * det;\r\n    this.M43 = -d34 * det;\r\n    this.M44 = +d44 * det;\r\n};\r\n\r\n/**\r\n * Calculate the inverse of the specified matrix.\r\n * @method invert\r\n * @static\r\n * @param matrix The matrix to use.\r\n * @return {Atlantis.Matrix} Return the inverse of the matrix.\r\n */\r\nAtlantis.Matrix.invert = function(matrix) {\r\n    var mat = new Matrix(matrix);\r\n    mat.invert();\r\n    return mat;\r\n};\r\n\r\n/**\r\n * Create a world matrix.\r\n * @method createWorld\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Vector3} forward\r\n * @param {Atlantis.Vector3} upVector\r\n * @return {Atlantis.Matrix} Return a world matrix.\r\n */\r\nAtlantis.Matrix.createWorld = function(position, forward, upVector) {\r\n    var matrix = new Atlantis.Matrix();\r\n\r\n    var x = Atlantis.Vector3.cross(forward, upVector);\r\n    var y = Atlantis.Vector3.cross(x, forward);\r\n    var z = Atlantis.Vector3.normalize(forward);\r\n    x.normalize();\r\n    y.normalize();\r\n\r\n    //matrix.setRight(x);\r\n    //matrix.setUp(y);\r\n    //matrix.setForward(z);\r\n    matrix.setTranslation(position);\r\n    matrix.M44 = 1.0;\r\n\r\n    return matrix;\r\n}\r\n\r\n/**\r\n * Multiply this matrix by another matrix.\r\n * @method multiply\r\n * @param {Atlantis.Matrix} matrix A matrix to multiply.\r\n */\r\nAtlantis.Matrix.prototype.multiply = function(matrix) {\r\n    var m11 = (((this.M11 * matrix.M11) + (this.M12 * matrix.M21)) + (this.M13 * matrix.M31)) + (this.M14 * matrix.M41);\r\n    var m12 = (((this.M11 * matrix.M12) + (this.M12 * matrix.M22)) + (this.M13 * matrix.M32)) + (this.M14 * matrix.M42);\r\n    var m13 = (((this.M11 * matrix.M13) + (this.M12 * matrix.M23)) + (this.M13 * matrix.M33)) + (this.M14 * matrix.M43);\r\n    var m14 = (((this.M11 * matrix.M14) + (this.M12 * matrix.M24)) + (this.M13 * matrix.M34)) + (this.M14 * matrix.M44);\r\n    var m21 = (((this.M21 * matrix.M11) + (this.M22 * matrix.M21)) + (this.M23 * matrix.M31)) + (this.M24 * matrix.M41);\r\n    var m22 = (((this.M21 * matrix.M12) + (this.M22 * matrix.M22)) + (this.M23 * matrix.M32)) + (this.M24 * matrix.M42);\r\n    var m23 = (((this.M21 * matrix.M13) + (this.M22 * matrix.M23)) + (this.M23 * matrix.M33)) + (this.M24 * matrix.M43);\r\n    var m24 = (((this.M21 * matrix.M14) + (this.M22 * matrix.M24)) + (this.M23 * matrix.M34)) + (this.M24 * matrix.M44);\r\n    var m31 = (((this.M31 * matrix.M11) + (this.M32 * matrix.M21)) + (this.M33 * matrix.M31)) + (this.M34 * matrix.M41);\r\n    var m32 = (((this.M31 * matrix.M12) + (this.M32 * matrix.M22)) + (this.M33 * matrix.M32)) + (this.M34 * matrix.M42);\r\n    var m33 = (((this.M31 * matrix.M13) + (this.M32 * matrix.M23)) + (this.M33 * matrix.M33)) + (this.M34 * matrix.M43);\r\n    var m34 = (((this.M31 * matrix.M14) + (this.M32 * matrix.M24)) + (this.M33 * matrix.M34)) + (this.M34 * matrix.M44);\r\n    var m41 = (((this.M41 * matrix.M11) + (this.M42 * matrix.M21)) + (this.M43 * matrix.M31)) + (this.M44 * matrix.M41);\r\n    var m42 = (((this.M41 * matrix.M12) + (this.M42 * matrix.M22)) + (this.M43 * matrix.M32)) + (this.M44 * matrix.M42);\r\n    var m43 = (((this.M41 * matrix.M13) + (this.M42 * matrix.M23)) + (this.M43 * matrix.M33)) + (this.M44 * matrix.M43);\r\n    var m44 = (((this.M41 * matrix.M14) + (this.M42 * matrix.M24)) + (this.M43 * matrix.M34)) + (this.M44 * matrix.M44);\r\n\r\n    this.M11 = m11;\r\n    this.M12 = m12;\r\n    this.M13 = m13;\r\n    this.M14 = m14;\r\n    this.M21 = m21;\r\n    this.M22 = m22;\r\n    this.M23 = m23;\r\n    this.M24 = m24;\r\n    this.M31 = m31;\r\n    this.M32 = m32;\r\n    this.M33 = m33;\r\n    this.M34 = m34;\r\n    this.M41 = m41;\r\n    this.M42 = m42;\r\n    this.M43 = m43;\r\n    this.M44 = m44;\r\n};\r\n\r\n/**\r\n * Multiply a two matrix.\r\n * @method multiply\r\n * @static\r\n * @param {Atlantis.Matrix} matrixA A matrix.\r\n * @param {Atlantis.Matrix} matrixB Another matrix.\r\n * @param {Atlantis.Matrix} matrixC Another matrix (optional).\r\n * @return {Atlantis.Matrix} Return a new matrix.\r\n */\r\nAtlantis.Matrix.multiply = function(matrixA, matrixB, matrixC) {\r\n    var matrix = new Atlantis.Matrix(matrixA);\r\n    matrix.multiply(matrixB);\r\n\r\n    if (matrixC instanceof Atlantis.Matrix) {\r\n        matrix.multiply(matrixC);\r\n    }\r\n\r\n    return matrix;\r\n};\r\n\r\n/**\r\n * Subtract a matrix to this matrix.\r\n * @method subtract\r\n * @param {Atlantis.Matrix} matrix A matrix to add.\r\n */\r\nAtlantis.Matrix.prototype.subtract = function(matrix) {\r\n    var mValues = this.toArray();\r\n    var eValues = matrix.toArray();\r\n\r\n    for (var i = 0; i < 16; i++) {\r\n        mValues[i] -= eValues[i];\r\n    }\r\n    this.set(mValues);\r\n}\r\n\r\n/**\r\n * Subtract two matrix.\r\n * @method subtract\r\n * @static\r\n * @param {Atlantis.Matrix} matA A matrix.\r\n * @param {Atlantis.Matrix} matB Another matrix to use to subtract with the first matrix.\r\n * @return {Atlantis.Matrix} Return a new matrix.\r\n */\r\nAtlantis.Matrix.subtract = function(matA, matB) {\r\n    var mat = new Atlantis.Matrix(matA);\r\n    mat.subtract(matB);\r\n    return mat;\r\n}\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Matrix.prototype.toString = function() {\r\n    var values = this.toArray();\r\n    var builder = [];\r\n\r\n    for (var i = 0; i < 16; i += 4) {\r\n        builder.push(\"[\");\r\n        builder.push(values[i] + \" \");\r\n        builder.push(values[i + 1] + \" \");\r\n        builder.push(values[i + 2] + \" \");\r\n        builder.push(values[i + 3]);\r\n        builder.push(\"] \");\r\n    }\r\n    return builder.join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = Atlantis || {};\r\n\r\n/**\r\n * Define a quaternion.\r\n * @class Quaternion\r\n * @constructor\r\n * @param {Number|Quaternion} x Value for X coordinate.\r\n * @param {Quaternion} y Value for Y coordinate.\r\n * @param {Quaternion} z Value for Z coordinate.\r\n * @param {Quaternion} w Value for W coordinate.\r\n */\r\nAtlantis.Quaternion = function(x, y, z, w) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n    this.z = z ? +z : 0;\r\n    this.z = w ? +w : 0;\r\n};\r\n\r\nAtlantis.Quaternion.prototype.fromQuaternion = function(quaternion) {\r\n    this.x = quaternion.x;\r\n    this.y = quaternion.y;\r\n    this.z = quaternion.z;\r\n    this.w = quaternion.w;\r\n};\r\n\r\n/**\r\n * Gets an Quaternion sets to identity.\r\n * @method Identity\r\n * @return {Atlantis.Quaternion} Return a new Quaternion sets to identity.\r\n */\r\nAtlantis.Quaternion.Identity = function() {\r\n    return new Atlantis.Quaternion(0, 0, 0, 1);\r\n};\r\n\r\n/**\r\n * Add a Quaternion to this quaternion.\r\n * @method add\r\n */\r\nAtlantis.Quaternion.prototype.add = function(quaternion) {\r\n    this.x += quaternion.x;\r\n    this.y += quaternion.y;\r\n    this.z += quaternion.z;\r\n    this.w += quaternion.w;\r\n};\r\n\r\n/**\r\n * Add two quaternions.\r\n * @method add\r\n * @static\r\n * @method {Atlantis.Quaternion} quaternion1\r\n * @method {Atlantis.Quaternion} quaternion1\r\n * @return {Atlantis.Quaternion} Return a new quaternion.\r\n */\r\nAtlantis.Quaternion.add = function(quaternion1, quaternion2) {\r\n    var result = new Quaternion(quaternion1);\r\n    result.add(quaternion2);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Conjugate the Quaternion.\r\n * @method conjugate\r\n */\r\nAtlantis.Quaternion.prototype.conjugate = function() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n};\r\n\r\n/**\r\n * Gets a quaternion who's the conjugate of the quaternion passed to parameter.\r\n * @method conjugate\r\n * @static\r\n * @param {Atlantis.Quaternion} A quaterion to conjugate.\r\n * @return {Atlantis.Quaternion} Return a new conjugate Quaternion.\r\n */\r\nAtlantis.Quaternion.conjugate = function(quaternion) {\r\n    var result = new Quaternion(quaternion);\r\n    result.conjugate();\r\n    return result;\r\n};\r\n\r\n/**\r\n * Create a quaternion with three rotations\r\n * @param yaw Value of yaw rotation (Y)\r\n * @param pitch Value of pitch rotation (X)\r\n * @param roll Value of roll rotation (Z)\r\n * @return Return a quaternion with three rotations.\r\n */\r\nAtlantis.Quaternion.createFromYawPitchRoll = function(yaw, pitch, roll) {\r\n    var result = new Quaternion();\r\n\r\n    var halfYaw = yaw * 0.5;\r\n    var halfPitch = pitch * 0.5;\r\n    var halfRoll = roll * 0.5;\r\n\r\n    var sinYaw = Math.sin(halfYaw);\r\n    var cosYaw = Math.cos(halfYaw);\r\n    var sinPitch = Math.sin(halfPitch);\r\n    var cosPitch = Math.cos(halfPitch);\r\n    var sinRoll = Math.sin(halfRoll);\r\n    var cosRoll = Math.cos(halfRoll);\r\n\r\n    result.x = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\r\n    result.y = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\r\n    result.z = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\r\n    result.w = (cosYaw * cosPitch * cosRoll) - (sinYaw * sinPitch * sinRoll);\r\n\r\n    return result;\r\n};\r\n\r\nAtlantis.Quaternion.prototype.clone = function() {\r\n    return new Atlantis.Quaternion(this.x, this.y, this.z, this.w);\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Quaternion.prototype.toString = function() {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z, \" w: \", this.w].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a point structure.\r\n * @constructor\r\n * @class Point\r\n * @param {Number} x A value for X coordinate.\r\n * @param {Number} y A value for Y coordinate.\r\n */\r\nAtlantis.Point = function (x, y) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n};\r\n\r\nAtlantis.Point.clone = function (x, y) {\r\n    return new Atlantis.Point(this.x, this.y);\r\n};\r\n\r\n/**\r\n* Gets a string from this object.\r\n* @method toString\r\n* @return {String}\r\n*/\r\nAtlantis.Point.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y].join(\"\");\r\n};\r\n\r\n/**\r\n* Create a new Vector2\r\n* @constructor\r\n* @class Vector2\r\n*/\r\nAtlantis.Vector2 = function (x, y) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n};\r\n\r\nAtlantis.Vector2.prototype.fromVector = function(vector) {\r\n    this.x = vector.x;\r\n    this.y = vector.y;\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to zero.\r\n * @method Zero\r\n */\r\nAtlantis.Vector2.Zero = function () {\r\n    return new Vector2();\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to one.\r\n * @method One\r\n */\r\nAtlantis.Vector2.One = function () {\r\n    return new Vector2(1.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method UnitX\r\n */\r\nAtlantis.Vector2.UnitX = function () {\r\n    return new Vector2(1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method UnitY\r\n */\r\nAtlantis.Vector2.UnitY = function () {\r\n    return new Vector2(0.0, 1.0);\r\n};\r\n\r\n/**\r\n* Add this vector by another vector or value.\r\n* @method add\r\n* @param {Atlantis.Vector2} value A vector or a value to add to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.add = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x += value;\r\n        this.y += value;\r\n    }\r\n    else {\r\n        this.x += value.x;\r\n        this.y += value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Add two vectors.\r\n* @method add\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.add = function (vec1, vec2) {\r\n    var vector = vec1.clone();\r\n    vector.add(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.addToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x + vec2.x;\r\n    result.y = vec1.y + vec2.y;\r\n};\r\n\r\n/**\r\n* Substract this vector by another vector or value.\r\n* @method subtract\r\n* @param {Atlantis.Vector2} value A vector or a value to subtract to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.subtract = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x -= value;\r\n        this.y -= value;\r\n    }\r\n    else {\r\n        this.x -= value.x;\r\n        this.y -= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Subtract two vectors.\r\n* @method subtract\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.subtract = function (vec1, vec2) {\r\n    var vector = vec1.clone();\r\n    vector.subtract(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.subtractToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x - vec2.x;\r\n    result.y = vec1.y - vec2.y;\r\n};\r\n\r\n/**\r\n* Divide this vector by another vector\r\n* @method divide\r\n* @param {Atlantis.Vector2} value A vector or a value to divide to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.divide = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x /= value;\r\n        this.y /= value;\r\n    }\r\n    else {\r\n        this.x /= value.x;\r\n        this.y /= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Divide two vectors.\r\n* @method divide\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.divide = function (vec1, vec2) {\r\n    var vector = vec1.clone();\r\n    vector.divide(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.divideToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x / vec2.x;\r\n    result.y = vec1.y / vec2.y;\r\n};\r\n\r\n/**\r\n* Multiply this vector by another vector or a value.\r\n* @method multiply\r\n* @param {Atlantis.Vector2} value A vector or a value to multiply to this vector.\r\n*/\r\nAtlantis.Vector2.prototype.multiply = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x *= value;\r\n        this.y *= value;\r\n    }\r\n    else {\r\n        this.x *= value.x;\r\n        this.y *= value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Multiply two vectors.\r\n* @method multiply\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.multiply = function (vec1, vec2) {\r\n    var vector = vec1.clone();\r\n    vector.multiply(vec2);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.multiplyToRef = function (vec1, vec2, result) {\r\n    result.x = vec1.x * vec2.x;\r\n    result.y = vec1.y * vec2.y;\r\n};\r\n\r\n/**\r\n* Gets distance between this vector and the vector passed in parameter.\r\n* @method getDistance\r\n* @param {Atlantis.Vector2} vector2 The vector2 to use to determine the distance.\r\n* @return {Number} The distance between this vector and the vector passed in parameter.\r\n*/\r\nAtlantis.Vector2.prototype.distance = function (vector2) {\r\n    return Atlantis.Vector2.distance(this, vector2);\r\n};\r\n\r\n/**\r\n* Gets the distance between two vectors.\r\n* @method distance\r\n* @static\r\n* @param {Atlantis.Vector2} A vector.\r\n* @param {Atlantis.Vector2} Another vector.\r\n*/\r\nAtlantis.Vector2.distance = function (vec1, vec2) {\r\n    var v1 = vec1.x - vec2.x;\r\n    var v2 = vec1.y - vec2.y;\r\n    return Math.sqrt((v1 * v1) + (v2 * v2));\r\n};\r\n\r\nAtlantis.Vector2.prototype.dot = function (vec2) {\r\n    return Atlantis.Vector2.dot(this, vec2);\r\n};\r\n\r\n/**\r\n* Calculate the dot product of two vectors.\r\n* @method dot\r\n* @static\r\n* @param {Atlantis.Vector2} First vector to use.\r\n* @param {Atlantis.Vector2} Second vector to use.\r\n* @return {Number} Return the dot product of the two vectors.\r\n*/\r\nAtlantis.Vector2.dot = function (vec1, vec2) {\r\n    return (vec1.x * vec2.x) + (vec1.y * vec2.y);\r\n};\r\n\r\n/**\r\n* Gets the length of the vector.\r\n* @return {Number} Return the length of the vector.\r\n*/\r\nAtlantis.Vector2.prototype.length = function () {\r\n    return Atlantis.Vector2.length(this);\r\n};\r\n\r\nAtlantis.Vector2.length = function (vec2) {\r\n    return Math.sqrt((vec2.x * vec2.x) + (vec2.y * vec2.y));\r\n};\r\n\r\n/**\r\n* Performs a linear interpolation between to vectors.\r\n* @method lerp\r\n* @static\r\n* @param {Atlantis.Vector2} First vector to use.\r\n* @param {Atlantis.Vector2} Second vector to use.\r\n* @param amount\r\n* @return\r\n*/\r\nAtlantis.Vector2.lerp = function (vec1, vec2, amount) {\r\n    Atlantis.Vector2.lerpToRef(vec1, vec2, amount, new Atlantis.Vector2());\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.lerpToRef = function (vec1, vec2, amount, result) {\r\n    result.x = Atlantis.MathHelper.lerp(vec1.x, vec2.x, amount);\r\n    result.y = Atlantis.MathHelper.lerp(vec1.y, vec2.y, amount);\r\n};\r\n\r\n/**\r\n* Gets a vector of the minimum of the two vectors.\r\n* @method min\r\n* @static\r\n* @param vec1\r\n* @param vec2\r\n* @return Return a vector that correspond of the minimum of the two vectors.\r\n*/\r\nAtlantis.Vector2.min = function (vec1, vec2) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.Vector2.minToRef(vec1, vec2, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.minToRef = function (vec1, vec2, result) {\r\n    result.x = (vec1.x < vec2.x) ? vec1.x : vec2.x;\r\n    result.y = (vec1.y < vec2.y) ? vec1.y : vec2.y;\r\n};\r\n\r\n/**\r\n* Gets a vector of the maximum of the two vectors.\r\n* @method max\r\n* @static\r\n* @param vec1\r\n* @param vec2\r\n* @return Return a vector that correspond of the maximum of the two vectors.\r\n*/\r\nAtlantis.Vector2.max = function (vec1, vec2) {\r\n    var result = new Vector2();\r\n    Atlantis.Vector2.maxToRef(vec1, vec2, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.maxToRef = function (vec1, vec2, result) {\r\n    result.x = (vec1.x > vec2.x) ? vec1.x : vec2.x;\r\n    result.y = (vec1.y > vec2.y) ? vec1.y : vec2.y;\r\n};\r\n\r\n/**\r\n* Negate this vector\r\n* @method negate\r\n*/\r\nAtlantis.Vector2.prototype.negate = function (value) {\r\n    if (typeof(value) === \"number\") {\r\n        this.x = -value;\r\n        this.y = -value;\r\n    }\r\n    else {\r\n        this.x = -value.x;\r\n        this.y = -value.y;\r\n    }\r\n};\r\n\r\n/**\r\n* Negate a vector.\r\n* @method negate\r\n* @static\r\n* @param {Atlantis.Vector2} A vector to use.\r\n* @return {Atlantis.Vector2} Return the negated vector.\r\n*/\r\nAtlantis.Vector2.negate = function (vector) {\r\n    var vec = vector.clone();\r\n    vec.x *= -1;\r\n    vec.y *= -1;\r\n    return vec;\r\n};\r\n\r\n/**\r\n* Normalize this vector.\r\n* @method normalize\r\n*/\r\nAtlantis.Vector2.prototype.normalize = function () {\r\n    Atlantis.Vector2.normalizeToRef(this);\r\n};\r\n\r\n/** Gets a normalized vector.\r\n* \r\n* @method normalize\r\n* @static\r\n* @param {Atlantis.Vector2} A vector to normalize.\r\n*/\r\nAtlantis.Vector2.normalize = function (vector) {\r\n    var vec = vector.clone();\r\n    vec.normalize();\r\n    return vec;\r\n};\r\n\r\nAtlantis.Vector2.normalizeToRef = function (vector) {\r\n    var distance = Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\r\n\r\n    if (!distance) {\r\n        vector.x = 0;\r\n        vector.y = 0;\r\n    }\r\n\r\n    var value = 1.0 / distance;\r\n    \r\n    vector.x *= value;\r\n    vector.y *= value;\r\n};\r\n\r\nAtlantis.Vector2.reflect = function (vector, normal) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.ReflectToRef(vector, normal, result);\r\n    return result;\r\n};\r\n\r\nAtlantis.Vector2.reflectToRef = function (vector, normal, result) {\r\n    var val = 2 * ((vector.x * normal.x) + (vector.y * normal.y));\r\n    result.x = vector.x - (normal.x * val);\r\n    result.y = vector.y - (normal.y * val);\r\n};\r\n\r\nAtlantis.Vector2.smoothStep = function (value1, value2, amount) {\r\n    var result = new Atlantis.Vector2();\r\n    Atlantis.Vector2.smoothStepToRef(value1, value2, amount, result);\r\n    return result;\r\n}\r\n\r\nAtlantis.Vector2.smoothStepToRef = function (value1, value2, amount, result) {\r\n    result.x = Atlantis.MathHelper.smoothStep(value1.x, value2.x, amount);\r\n    result.y = Atlantis.MathHelper.smoothStep(value1.y, value2.y, amount);\r\n}\r\n\r\n/**\r\n* Gets a transformed vector from a position and a matrix.\r\n* @method transform\r\n* @param {Atlantis.Vector2} position\r\n* @param {Atlantis.Matrix} matrix\r\n* @return {Atlantis.Vector2} A tranformed vector.\r\n*/\r\nAtlantis.Vector2.transform = function (position, matrix) {\r\n    var vector = new Atlantis.Vector3();\r\n    Atlantis.Vector2.transformToRef(position, matrix, vector);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.transformToRef = function (position, matrix, result) {\r\n    var x = (position.x * matrix.M11) + (position.y * matrix.M21) + matrix.M41;\r\n    var y = (position.x * matrix.M12) + (position.y * matrix.M22) + matrix.M42;\r\n    result.x = x;\r\n    result.x = y;\r\n};\r\n\r\nAtlantis.Vector2.transformNormal = function (normal, matrix) {\r\n    var vector = new Atlantis.Vector3();\r\n    Atlantis.Vector2.transformNormalToRef(normal, matrix, vector);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector2.transformNormalToRef = function (normal, matrix, result) {\r\n    var x = (normal.x * matrix.M11) + (normal.y * matrix.M21);\r\n    var y = (normal.x * matrix.M12) + (normal.y * matrix.M22);\r\n    result.x = x;\r\n    result.y = y;\r\n};\r\n\r\n/**\r\n* Sets the coordinates.\r\n* @method set\r\n* @param {Number} X value.\r\n* @param {Number} Y value.\r\n*/\r\nAtlantis.Vector2.prototype.set = function (x, y) {\r\n    this.x = x;\r\n    this.y = y;\r\n};\r\n\r\nAtlantis.Vector2.prototype.clone = function () {\r\n    return new Atlantis.Vector2(this.x, this.y);\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector2.prototype.toString = function () {\r\n    return [\"x: \", this.x, \" y: \", this.y].join(\"\");\r\n};\r\n\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Create a vector with three coordinates. If you pass a Vector3 in first parameter,\r\n * its filed are copied to the new vector (work like a copy constructor).\r\n * @constructor\r\n * @class Vector3\r\n * @param {Number|Atlantis.Vector3} The X value or a Vector3 object     * @param {Number} The Y value.\r\n * @param {Number} The Z value.\r\n */\r\nAtlantis.Vector3 = function(x, y, z) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n    this.z = z ? +z : 0;\r\n};\r\n\r\nAtlantis.Vector3.prototype.fromVector = function (vector) {\r\n   this.x = vector.x;\r\n   this.y = vector.y;\r\n   this.z = vector.z;\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to zero.\r\n * @method Zero\r\n */\r\nAtlantis.Vector3.Zero = function() {\r\n    return new Atlantis.Vector3(0, 0, 0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with all coordinates sets to one.\r\n * @method One\r\n */\r\nAtlantis.Vector3.One = function() {\r\n    return new Atlantis.Vector3(1.0, 1.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method UnitX\r\n */\r\nAtlantis.Vector3.UnitX = function() {\r\n    return new Atlantis.Vector3(1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method UnitY\r\n */\r\nAtlantis.Vector3.UnitY = function() {\r\n    return new Atlantis.Vector3(0.0, 1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to one.\r\n * @method UnitZ\r\n */\r\nAtlantis.Vector3.UnitZ = function() {\r\n    return new Atlantis.Vector3(0.0, 0.0, 1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to one.\r\n * @method Up\r\n */\r\nAtlantis.Vector3.Up = function() {\r\n    return new Atlantis.Vector3(0.0, 1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Y coordinate set to -1.\r\n * @method Down\r\n */\r\nAtlantis.Vector3.Down = function() {\r\n    return new Atlantis.Vector3(0.0, -1.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to one.\r\n * @method Right\r\n */\r\nAtlantis.Vector3.Right = function() {\r\n    return new Atlantis.Vector3(1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with X coordinate set to -1.\r\n * @method Left\r\n */\r\nAtlantis.Vector3.Left = function() {\r\n    return new Atlantis.Vector3(-1.0, 0.0, 0.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to -1.\r\n * @method Forward\r\n */\r\nAtlantis.Vector3.Forward = function() {\r\n    return new Atlantis.Vector3(0.0, 0.0, -1.0);\r\n};\r\n\r\n/**\r\n * Gets a Vector3 with Z coordinate set to one.\r\n * @method Backward\r\n */\r\nAtlantis.Vector3.Backward = function() {\r\n    return new Atlantis.Vector3(0.0, 0.0, 1.0);\r\n};\r\n\r\n/**\r\n * Add a Vector3 to the current vector.\r\n * @method add\r\n * @param {Number|Atlantis.Vector3} vector The Vector3 to add.\r\n */\r\nAtlantis.Vector3.prototype.add = function(vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n        this.z += vector.z;\r\n    } else {\r\n        this.x += vector;\r\n        this.y += vector;\r\n        this.z += vector;\r\n    }\r\n};\r\n\r\n/**\r\n * Add two vectors.\r\n * @method add\r\n * @static\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Atlantis.Vector3} Return a new Vector3\r\n */\r\nAtlantis.Vector3.add = function(vec1, vec2) {\r\n    var result = new Vector3(vec1);\r\n    result.add(vec2);\r\n    return result;\r\n};\r\n\r\n/**\r\n * Subtract a Vector3 to the current vector.\r\n * @method subtract\r\n * @param {Number|Atlantis.Vector3} vector The Vector3 to Subtract.\r\n */\r\nAtlantis.Vector3.prototype.subtract = function(vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n        this.z -= vector.z;\r\n    } else {\r\n        this.x -= vector;\r\n        this.y -= vector;\r\n        this.z -= vector;\r\n    }\r\n};\r\n\r\n/**\r\n * Subtract two vectors.\r\n * @method subtract\r\n * @static\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Atlantis.Vector3} Return a news Vector3.\r\n */\r\nAtlantis.Vector3.subtract = function(vec1, vec2) {\r\n    var result = new Atlantis.Vector3(vec1);\r\n    result.subtract(vec2);\r\n    return result;\r\n}\r\n\r\n/**\r\n * divide a Vector3 to the current vector.\r\n * @method divide\r\n * @param {Atlantis.Vector3} vector The Vector3 to divide.\r\n */\r\nAtlantis.Vector3.prototype.divide = function(vector) {\r\n    if (vector.x != 0) {\r\n        this.x /= vector.x;\r\n    }\r\n    if (vector.y != 0) {\r\n        this.y /= vector.y;\r\n    }\r\n    if (vector.z != 0) {\r\n        this.z /= vector.z;\r\n    }\r\n};\r\n\r\n/**\r\n * Divide two vectors.\r\n * @method divide\r\n * @static\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Atlantis.Vector3} Return a new Vector3.\r\n */\r\nAtlantis.Vector3.divide = function(vec1, vec2) {\r\n    var vector = new Atlantis.Vector3(vec1);\r\n    vector.divide(vec2);\r\n    return vector;\r\n}\r\n\r\n/**\r\n * multiply a Vector3 to the current vector.\r\n * @method multiply\r\n * @param {Number|Atlantis.Vector3} vector The Vector3 to multiply.\r\n */\r\nAtlantis.Vector3.prototype.multiply = function(vector) {\r\n    if (vector instanceof Atlantis.Vector3) {\r\n        this.x *= vector.x;\r\n        this.y *= vector.y;\r\n        this.z *= vector.z;\r\n    } else {\r\n        this.x *= vector;\r\n        this.y *= vector;\r\n        this.z *= vector;\r\n    }\r\n};\r\n\r\n/**\r\n * Multiply a two vectors.\r\n * @method multiply\r\n * @param {Atlantis.Vector3} A vector.\r\n * @param {Atlantis.Vector3} Another vector.\r\n * @return {Atlantis.Vector3} Return a new vector.\r\n */\r\nAtlantis.Vector3.multiply = function(vec1, vec2) {\r\n    var vector = new Atlantis.Vector3(vec1);\r\n    vector.multiply(vec2);\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Calculates the cross products of two vectors.\r\n * @method cross\r\n * @static\r\n * @param {Atlantis.Vector3} vec1 Fist vector to use.\r\n * @param {Atlantis.Vector3} vec2 Second vector to use.\r\n * @return {Atlantis.Vector3} the cross products of the two vectors.\r\n */\r\nAtlantis.Vector3.cross = function(vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.y * vec2.z) - (vec2.y * vec1.z);\r\n    vector.y = -((vec1.x * vec2.z) - (vec2.x * vec1.z));\r\n    vector.z = (vec1.x * vec2.y) - (vec2.x * vec1.y);\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Gets the distance between two vectors.\r\n * @method distance\r\n * @static\r\n * @param {Atlantis.Vector3} vector\r\n * @return {Number} Return the distance between two vectors.\r\n */\r\nAtlantis.Vector3.distance = function(vec1, vec2) {\r\n    return Math.sqrt(Atlantis.Vector3.distanceSquared(vec1, vec2));\r\n};\r\n\r\n/**\r\n * Gets the distance squared between to vectors.\r\n * @method distanceSquared\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Number}\r\n */\r\nAtlantis.Vector3.distanceSquared = function(vec1, vec2) {\r\n    var dx = vec1.x - vec2.x;\r\n    var dy = vec1.y - vec2.y;\r\n    var dz = vec1.z - vec2.z;\r\n    return (dx * dx) + (dy * dy) + (dz * dz);\r\n};\r\n\r\n/**\r\n * Calculates the dot product of two vectors.\r\n * @method dot\r\n * @static\r\n * @param {Atlantis.Vector3} vec1 First vector to use.\r\n * @param {Atlantis.Vector3} vec2 Second vector to use.\r\n * @return {Number} Return the dot product of two vectors.\r\n */\r\nAtlantis.Vector3.dot = function(vec1, vec2) {\r\n    return (vec1.x * vec2.x) + (vec1.y * vec2.y) + (vec1.z * vec2.z);\r\n};\r\n\r\n/**\r\n * Gets the length of the vector.\r\n * @method length\r\n * @return {Number} Return the length of the vector.\r\n */\r\nAtlantis.Vector3.prototype.length = function() {\r\n    return Math.sqrt((this.x * this.x) + (this.y * this.y) + (this.z * this.z));\r\n};\r\n\r\n/**\r\n * Linear interpolation between this vector and the vector passed in parameter.\r\n * @method lerp\r\n * @param {Atlantis.Vector3} vector A vector to use for interpolation\r\n * @param {Number} amount Value between 0 and 1 indicating the weight of vector.\r\n */\r\nAtlantis.Vector3.prototype.lerp = function(vector, amount) {\r\n    this.x = Atlantis.MathHelper.lerp(this.x, vector.x, amount);\r\n    this.y = Atlantis.MathHelper.lerp(this.y, vector.y, amount);\r\n    this.z = Atlantis.MathHelper.lerp(this.z, vector.z, amount);\r\n};\r\n\r\n/**\r\n * Linearly interpolates between two vectors.\r\n * @method lerp\r\n * @static\r\n * @param {Atlantis.Vector3} vec1 First vector\r\n * @param {Atlantis.Vector3} vec2 Second vector\r\n * @param amount Value between 0 and 1 indicating the weight of vec2.\r\n * @return {Atlantis.Vector3} Return a interpolated Vector3.\r\n */\r\nAtlantis.Vector3.lerp = function(vec1, vec2) {\r\n    var x = Atlantis.MathHelper.lerp(vec1.x, vec2.x, amount);\r\n    var y = Atlantis.MathHelper.lerp(vec1.y, vec2.y, amount);\r\n    var z = Atlantis.MathHelper.lerp(vec1.z, vec2.z, amount);\r\n    return new Atlantis.Vector3(x, y, z);;\r\n};\r\n\r\n/**\r\n * Gets a vector of the minimum of the two vectors.\r\n * @method min\r\n * @static\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Atlantis.Vector3} Return a vector that correspond of the minimum of the two vectors.\r\n */\r\nAtlantis.Vector3.min = function(vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.x < vec2.x) ? vec1.x : vec2.x;\r\n    vector.y = (vec1.y < vec2.y) ? vec1.y : vec2.y;\r\n    vector.z = (vec1.z < vec2.z) ? vec1.z : vec2.z;\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Gets a vector of the maximum of the two vectors.\r\n * @method max\r\n * @static\r\n * @param {Atlantis.Vector3} vec1\r\n * @param {Atlantis.Vector3} vec2\r\n * @return {Atlantis.Vector3} Return a vector that correspond of the maximum of the two vectors.\r\n */\r\nAtlantis.Vector3.max = function(vec1, vec2) {\r\n    var vector = new Atlantis.Vector3();\r\n    vector.x = (vec1.x > vec2.x) ? vec1.x : vec2.x;\r\n    vector.y = (vec1.y > vec2.y) ? vec1.y : vec2.y;\r\n    vector.z = (vec1.z > vec2.z) ? vec1.z : vec2.z;\r\n    return vector;\r\n}\r\n\r\n/**\r\n * Negate the vector.\r\n * @method negate\r\n */\r\nAtlantis.Vector3.prototype.negate = function() {\r\n    this.x *= -1;\r\n    this.y *= -1;\r\n    this.z *= -1;\r\n};\r\n\r\n/**\r\n * Negate a vector.\r\n * @method negate\r\n * @static\r\n * @param {Atlantis.Vector3} vector The vector to negate.\r\n * @return {Atlantis.Vector3} Return a negated vector.\r\n */\r\nAtlantis.Vector3.negate = function(vector) {\r\n    var vec = new Atlantis.Vector3(vector);\r\n    vec.negate();\r\n    return vec;\r\n};\r\n\r\n/**\r\n * Normalize vector.\r\n * @static\r\n * @method normalize\r\n */\r\nAtlantis.Vector3.prototype.normalize = function() {\r\n    var factor = distance(this, new Atlantis.Vector3());\r\n\r\n    if (factor != 0) {\r\n        factor = 1.0 / factor;\r\n        this.set(this.x * factor, this.y * factor, this.z * factor);\r\n    }\r\n};\r\n\r\n/**\r\n * Normalize a vector.\r\n * @method normalize\r\n * @param {Atlantis.Vector3} vector A vector to normalize.\r\n * @return {Atlantis.Vector3} result A normalized vector.\r\n */\r\nAtlantis.Vector3.normalize = function(vector) {\r\n    var result = new Vector3(vector);\r\n    result.normalize();\r\n    return result;\r\n};\r\n\r\n/**\r\n * Gets a transformed Vector3 from a position and a matrix.\r\n * @method tranform\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Matrix} matrix\r\n * @return {Atlantis.Vector3} A tranformed vector.\r\n */\r\nAtlantis.Vector3.transform = function(position, matrix) {\r\n    var vector = new Vector3(\r\n        (position.x * matrix.M11) + (position.y * matrix.M21) + (position.z * matrix.M31) + matrix.M41, (position.x * matrix.M12) + (position.y * matrix.M22) + (position.z * matrix.M32) + matrix.M42, (position.x * matrix.M13) + (position.y * matrix.M23) + (position.z * matrix.M33) + matrix.M43\r\n    );\r\n\r\n    return vector;\r\n};\r\n\r\n/**\r\n * Gets an homogeneous transformed vector from a position and a matrix.\r\n * @method transformCoordinate\r\n * @static\r\n * @param {Atlantis.Vector3} position\r\n * @param {Atlantis.Matrix} matrix\r\n * @return {Atlantis.Vector4} A tranformed vector.\r\n */\r\nAtlantis.Vector3.transformCoordinate = function(position, transform) {\r\n    var vector = new Atlantis.Vector4();\r\n    vector.x = (position.x * transform.M11) + (position.y * transform.M21) + (position.z * transform.M31) + transform.M41;\r\n    vector.y = (position.x * transform.M12) + (position.y * transform.M22) + (position.z * transform.M32) + transform.M42;\r\n    vector.z = (position.x * transform.M13) + (position.y * transform.M23) + (position.z * transform.M33) + transform.M43;\r\n    vector.w = 1.0 / ((position.x * transform.M14) + (position.y * transform.M24) + (position.z * transform.M34) + transform.M44);\r\n    return new Atlantis.Vector3(vector.x * vector.w, vector.y * vector.w, vector.z * vector.w);\r\n};\r\n\r\n/**\r\n * Changes the 3 coordinates.\r\n * @method set\r\n * @param x The new X coordinate.\r\n * @param y The new Y coordinate.\r\n * @param z The new Z coordinate.\r\n */\r\nAtlantis.Vector3.prototype.set = function(x, y, z) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.z = z;\r\n};\r\n\r\nAtlantis.Vector3.prototype.clone = function () {\r\n    return new Atlantis.Vector3(this.x, this.y, this.z);\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector3.prototype.toString = function() {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * A vector4 class.\r\n * @constructor\r\n * @class Vector4\r\n * @param {Number|Atlantis.Vector4} Value for x coordinate or a Vector4 object.\r\n * @param {Number} Value for y coordinate\r\n * @param {Number} Value for z coordinate.\r\n * @param {Number} Value for w coordinate.\r\n */\r\nAtlantis.Vector4 = function(x, y, z, w) {\r\n    this.x = x ? +x : 0;\r\n    this.y = y ? +y : 0;\r\n    this.z = z ? +z : 0;\r\n    this.z = w ? +w : 0;\r\n};\r\n\r\nAtlantis.Vector4.prototype.fromVector = function(vector) {\r\n    this.x = vector.x;\r\n    this.y = vector.y;\r\n    this.z = vector.z;\r\n    this.w = vector.w;\r\n};\r\n\r\n/**\r\n * Linear interpolation.\r\n * @method lerp\r\n * @param {Atlantis.Vector4} vector A vector to use for interpolation\r\n * @param {Number} amount Value between 0 and 1 indicating the weight of vector.\r\n */\r\nAtlantis.Vector4.prototype.lerp = function(vector, amount) {\r\n    this.x = Atlantis.MathHelper.lerp(this.x, vector.x, amount);\r\n    this.y = Atlantis.MathHelper.lerp(this.y, vector.y, amount);\r\n    this.z = Atlantis.MathHelper.lerp(this.z, vector.z, amount);\r\n    this.w = Atlantis.MathHelper.lerp(this.w, vector.w, amount);\r\n};\r\n\r\n/**\r\n * Linearly interpolates between two vectors.\r\n * @method lerp\r\n * @static\r\n * @param {Atlantis.Vector4} vec1 First vector\r\n * @param {Atlantis.Vector4} vec2 Second vector\r\n * @param {Number} amount Value between 0 and 1 indicating the weight of vec2.\r\n * @return {Atlantis.Vector4} Return a interpolated Vector3.\r\n */\r\nAtlantis.Vector4.lerp = function(vec1, vec2, amount) {\r\n    var vector = new Vector4(vec1);\r\n    vector.lerp(vec2, amount);\r\n    return vector;\r\n};\r\n\r\nAtlantis.Vector4.prototype.clone = function() {\r\n    return new Atlantis.Vector4(this.x, this.y, this.z, this.w);\r\n};\r\n\r\n/**\r\n * Gets a string from this object.\r\n * @method toString\r\n * @return {String}\r\n */\r\nAtlantis.Vector4.prototype.toString = function() {\r\n    return [\"x: \", this.x, \" y: \", this.y, \" z: \", this.z, \" w: \", this.w].join(\"\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n// --------------------------------------- //\r\n// ---  Keyboard State implementation  --- //\r\n// --------------------------------------- //\r\n\r\n/**\r\n * Define a keyboard state.\r\n * @class KeyboardState\r\n * @constructor\r\n */\r\nAtlantis.KeyboardState = function(keys) {\r\n    this.keys = [];\r\n    // Cloning the array\r\n    for (var i = 0, l = keys.length; i < l; i++) {\r\n        this.keys.push(keys[i]);\r\n    }\r\n};\r\n\r\nAtlantis.KeyboardState.prototype.clone = function() {\r\n    return new Atlantis.Input.KeyboardState(this.keys);\r\n};\r\n\r\n/**\r\n * Determine if the key is pressed.\r\n * @method isKeyDown\r\n * @param {Number} button The button to test.\r\n * @return {Boolean} Return true if the key is pressed.\r\n */\r\nAtlantis.KeyboardState.prototype.isKeyDown = function(key) {\r\n    return this.keys[key] === true;\r\n};\r\n\r\n/**\r\n * Determine if the key is pressed.\r\n * @method isKeyUp\r\n * @param {Number} button The button to test.\r\n * @return {Boolean} Return true if the key is released.\r\n */\r\nAtlantis.KeyboardState.prototype.isKeyUp = function(key) {\r\n    return this.keys[key] === false;\r\n};\r\n\r\n// --------------------------------------- //\r\n// --- Keyboard Manager implementation --- //\r\n// --------------------------------------- //\r\n\r\n/**\r\n * A keyboard input manager.\r\n * @constructor\r\n * @class KeyboardManager\r\n */\r\nAtlantis.Keyboard = function(maxKeys) {\r\n    this.keys = [];\r\n    this.maxKeys = maxKeys || 130;\r\n\r\n    for (var i = 0; i < maxKeys; i++) {\r\n        this.keys[i] = false;\r\n    }\r\n\r\n    var that = this;\r\n\r\n    var onKeyStateChange = function(event) {\r\n        if (Atlantis.Keyboard.preventDefault) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        that.keys[event.keyCode] = (event.type === \"keydown\") ? true : false;\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", onKeyStateChange, false);\r\n    document.addEventListener(\"keyup\", onKeyStateChange, false);\r\n};\r\n\r\nAtlantis.Keyboard.preventDefault = false;\r\n\r\n/**\r\n * Gets the current state of the keyboard.\r\n * @method getState\r\n * @return {Atlantis.KeyboardState} Return the state of the keyboard.\r\n */\r\nAtlantis.Keyboard.prototype.getState = function() {\r\n    return new Atlantis.KeyboardState(this.keys);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define a button state which is released or pressed.\r\n * @class ButtonState\r\n * @static\r\n */\r\nAtlantis.ButtonState = {\r\n\tReleased: 0,\r\n\tPressed: 1\r\n};\r\n\r\n// ---\r\n// --- MouseState implementation\r\n// ---\r\n\r\n/**\r\n * Define a mouse state.\r\n * @class MouseState\r\n * @constructor\r\n * @param {Number} x The position of the cursor on X axis.\r\n * @param {Number} y The position of the cursor on Y axis.\r\n * @param {Number} scroolWheelValue The value of the scroll\r\n * @param {Array} buttons An array with the states of each buttons\r\n */\r\nAtlantis.MouseState = function(x, y, scrollWheelValue, buttons) {\r\n\tthis.x = x;\r\n\tthis.y = y;\r\n\tthis.scrollWheelValue = scrollWheelValue;\r\n\tthis.leftButton = buttons[0];\r\n\tthis.rightButton = buttons[2];\r\n\tthis.middleButton = buttons[1];\r\n};\r\n\r\n/**\r\n * Clone the current state.\r\n * @method clone\r\n * @return {Atlantis.MouseState} Return a clone of this instance.\r\n */\r\nAtlantis.MouseState.prototype.clone = function() {\r\n\treturn new Atlantis.MouseState(this.x, this.y, this.scrollWheelValue, [this.leftButton, this.middleButton, this.rightButton]);\r\n};\r\n\r\n// ---\r\n// --- Mouse implementation\r\n// ---\r\n\r\n/**\r\n * The Mouse class is responsible to manage mouse events.\r\n * @class Mouse\r\n * @constructor\r\n * @param {HTMLElement} domElement The DOM element to use (default is document.body).\r\n */\r\nAtlantis.Mouse = function(domElement) {\r\n\tvar domElement = (domElement instanceof HTMLElement) ? domElement : document.body;\r\n\tthis._x = 0;\r\n\tthis._y = 0;\r\n\tthis._scroll = 0;\r\n\tthis._buttons = [];\r\n\tthis._buttons[0] = false; // Left\r\n\tthis._buttons[1] = false; // Middle\r\n\tthis._buttons[2] = false; // Right\r\n\tthis.preventDefault = true;\r\n\r\n\tvar that = this;\r\n\r\n\tvar resetButtonState = function() {\r\n\t\tthat._buttons[0] = false;\r\n\t\tthat._buttons[1] = false;\r\n\t\tthat._buttons[2] = false;\r\n\t};\r\n\r\n\tvar onMouseEvent = function(event) {\r\n\t\tthat._x = (event.pageX - domElement.offsetLeft) * Atlantis.Game.scaleFactor.x;\r\n\t\tthat._y = (event.pageY - domElement.offsetTop) * Atlantis.Game.scaleFactor.y;\r\n\r\n\t\tif (event.type === \"mousemove\" || event.type === \"pointermove\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresetButtonState();\r\n\r\n\t\tif ((event.type === \"mousedown\") || (event.type === \"pointerdown\")) {\r\n\t\t\tthat._buttons[event.button] = true;\r\n\t\t} else {\r\n\t\t\tthat._buttons[event.button] = false;\r\n\t\t}\r\n\t};\r\n\r\n\tvar onMouseScroll = function(event) {\r\n\t\tthat._scroll = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));\r\n\t};\r\n\r\n\tdomElement.addEventListener(\"mousedown\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mousemove\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mouseup\", onMouseEvent, false);\r\n\r\n\t//domElement.addEventListener(\"click\", onMouseEvent, false);\r\n\tdomElement.addEventListener(\"mousewheel\", onMouseScroll, false);\r\n\tdomElement.addEventListener(\"DOMMouseScroll\", onMouseScroll, false);\r\n};\r\n\r\n/**\r\n * Gets the state of the mouse.\r\n * @method getState\r\n * @return {Atlantis.MouseState} Return the state of the mouse at this time.\r\n */\r\nAtlantis.Mouse.prototype.getState = function() {\r\n\treturn new Atlantis.MouseState(this._x, this._y, this._scroll, this._buttons);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define the type of touch event\r\n * - Invalid\r\n * - Moved\r\n * - Pressed\r\n * - Released\r\n * @class TouchLocationState\r\n * @static\r\n */\r\nAtlantis.TouchLocationState = {\r\n\tInvalid: 1,\r\n\tMoved: 2,\r\n\tPressed: 3,\r\n\tReleased: 4\r\n};\r\n\r\nAtlantis.TouchCollection = function(touchStates) {\r\n\tArray.call(this);\r\n\r\n\tvar touchStates = touchStates || [];\r\n\tfor (var i = 0, l = touchStates.length; i < l; i++) {\r\n\t\tthis.push(new Atlantis.TouchPanelState(touchStates[i]));\r\n\t}\r\n};\r\n\r\nAtlantis.TouchCollection.prototype = Object.create(Array.prototype);\r\n\r\nAtlantis.TouchCollection.prototype.clone = function() {\r\n\tvar states = [];\r\n\r\n\tfor (var i = 0, l = this.length; i < l; i++) {\r\n\t\tstates.push(this[i].clone());\r\n\t}\r\n\r\n\treturn new Atlantis.TouchCollection(states);\r\n};\r\n\r\n/**\r\n * Define a touch state with a position and a touch state.\r\n * @class TouchPanelState\r\n * @constructor\r\n * @param {Object} panelState An object that contains states and position of the touch event.\r\n */\r\nAtlantis.TouchPanelState = function(panelState) {\r\n\tthis.state = panelState.state || Atlantis.TouchLocationState.Invalid;\r\n\tthis.position = panelState.position ? panelState.position : new Atlantis.Vector2(0, 0);\r\n};\r\n\r\n/**\r\n * Gets a clone of this state.\r\n * @method clone\r\n * @return {Atlantis.TouchPanelState} Return a clone of this instance.\r\n */\r\nAtlantis.TouchPanelState.prototype.clone = function() {\r\n\treturn new Atlantis.TouchPanelState({\r\n\t\tstate: this.state,\r\n\t\tposition: {\r\n\t\t\tx: this.position.x,\r\n\t\t\ty: this.position.y\r\n\t\t}\r\n\t});\r\n};\r\n\r\n/**\r\n * This class is responsible to manage touch events.\r\n * @class TouchPanel\r\n * @constructor\r\n * @param {HTMLElement} The DOM element to use for events (default is document.body).\r\n */\r\nAtlantis.TouchPanel = function(domElement) {\r\n\tthis._states = [\r\n\t\tnew Atlantis.TouchPanelState({}),\r\n\t\tnew Atlantis.TouchPanelState({}),\r\n\t\tnew Atlantis.TouchPanelState({})\r\n\t];\r\n\r\n\tvar eventNames = {\r\n\t\tup: \"touchend\",\r\n\t\tdown: \"touchstart\",\r\n\t\tcancel: \"touchcancel\",\r\n\t\tmove: \"touchmove\",\r\n\t\tcallback: null\r\n\t};\r\n\r\n\tvar that = this;\r\n\tvar lastEventType = null;\r\n\tvar isPointerEvent = false;\r\n\r\n\tvar wrapEvent = function(id, event) {\r\n\t\tif (!that._states[id]) {\r\n\t\t\tthat._states[id] = new Atlantis.TouchPanelState();\r\n\t\t}\r\n\r\n\t\tif (event.touches) {\r\n\t\t\tthat._states[id].position.x = event.touches[id].pageX - domElement.offsetLeft;\r\n\t\t\tthat._states[id].position.y = event.touches[id].pageY - domElement.offsetTop;\r\n\t\t} else {\r\n\t\t\tthat._states[id].position.x = event.clientX - domElement.offsetLeft;\r\n\t\t\tthat._states[id].position.y = event.clientY - domElement.offsetTop;\r\n\t\t}\r\n\r\n\t\tthat._states[id].position.x *= Atlantis.Game.scaleFactor.x;\r\n\t\tthat._states[id].position.y *= Atlantis.Game.scaleFactor.y;\r\n\r\n\t\t// Special hack for pointer event because in lot of cases, a pointermove event\r\n\t\t// is triggered.\r\n\t\tif (isPointerEvent) {\r\n\t\t\tvar result = (lastEventType === eventNames.down && event.type === eventNames.move);\r\n\t\t\tlastEventType = event.type;\r\n\r\n\t\t\tif (result) {\r\n\t\t\t\tlastEventType = null;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.type == eventNames.down) {\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Pressed;\r\n\t\t} else if (event.type == eventNames.move) {\r\n\t\t\tevent.preventDefault();\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Moved;\r\n\t\t} else if (event.type == eventNames.up) {\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Released;\r\n\t\t} else {\r\n\t\t\tthat._states[id].state = Atlantis.TouchLocationState.Invalid;\r\n\t\t}\r\n\t};\r\n\r\n\tvar onTouchHandler = function(event) {\r\n\t\tif (event.type === \"touchend\" || event.type === \"touchcancel\") {\r\n\t\t\tfor (var i = 0, l = that._states.length; i < l; i++) {\r\n\t\t\t\tthat._states[i].state = event.type === \"touchend\" ? Atlantis.TouchLocationState.Released : Atlantis.TouchLocationState.Invalid;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tfor (var i = 0, l = event.touches.length; i < l; i++) {\r\n\t\t\t\twrapEvent(i, event);\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tvar onPointerHandler = function(event) {\r\n\t\tevent.preventDefault();\r\n\t\tif (event.type === \"MSPointerUp\" || event.type === \"MSPointerCancel\" || event.type === \"pointerup\" || event.type === \"pointercancel\") {\r\n\t\t\tthat._states[0].state = (event.type === \"MSPointerUp\" || event.type === \"pointerup\") ? Atlantis.TouchLocationState.Released : Atlantis.TouchLocationState.Invalid;\r\n\t\t} else {\r\n\t\t\twrapEvent(0, event);\r\n\t\t}\r\n\t};\r\n\r\n\tvar maxTouchPoints = +navigator.maxTouchPoints || +navigator.msMaxTouchPoints;\r\n\tif (maxTouchPoints === 0) {\r\n\t\treturn;\r\n\t}\r\n\r\n\t// IE11+\r\n\tif (window.PointerEvent) { // IE11+\r\n\t\teventNames.up = \"pointerup\";\r\n\t\teventNames.down = \"pointerdown\";\r\n\t\teventNames.move = \"pointermove\";\r\n\t\teventNames.cancel = \"pointercancel\";\r\n\t\teventNames.callback = onPointerHandler;\r\n\t} else if (window.MSPointerEvent) { // IE10\r\n\t\teventNames.up = \"MSPointerUp\";\r\n\t\teventNames.down = \"MSPointerDown\";\r\n\t\teventNames.move = \"MSPointerMove\";\r\n\t\teventNames.cancel = \"MSPointerCancel\";\r\n\t\teventNames.callback = onPointerHandler;\r\n\t} else { // Touch events\r\n\t\teventNames.callback = onTouchHandler;\r\n\t}\r\n\r\n\tisPointerEvent = (eventNames.down !== \"touchstart\");\r\n\r\n\tdomElement.addEventListener(eventNames.down, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.move, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.up, eventNames.callback, false);\r\n\tdomElement.addEventListener(eventNames.cancel, eventNames.callback, false);\r\n};\r\n\r\n/**\r\n * Gets the capabilities of the touch panel.\r\n * @method getCapabilities\r\n * @return {Object} Return an object which contains touch panel capabilities.\r\n */\r\nAtlantis.TouchPanel.prototype.getCapabilities = function() {\r\n\treturn {\r\n\t\thasTouch: !!(\"ontouchstart\" in window) || !!(\"ongesturechange\" in window)\r\n\t}\r\n};\r\n\r\n/** \r\n * Get the state of the touch panel at this time.\r\n * @method getState\r\n * @param {Number} id (optional) A finger id.\r\n * @return {Atlantis.TouchCollection|Atlantis.TouchPanelState} if no finger is passed, it return an array of Atlantis.TouchPanelState,\r\n *         otherwise it returns an Atlantis.TouchPanelState of the finger id passed in parameter.\r\n */\r\nAtlantis.TouchPanel.prototype.getState = function(id) {\r\n\tif (typeof(id) === \"number\") {\r\n\t\treturn new Atlantis.TouchPanelState(this._states[id] ? this._states[id] : {});\r\n\t} else {\r\n\t\treturn new Atlantis.TouchCollection(this._states);\r\n\t}\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define buttons for the gamepad\r\n * @class GamepadButton\r\n * @static\r\n */\r\nAtlantis.GamepadButton = {\r\n    A: 0,\r\n    B: 1,\r\n    X: 2,\r\n    Y: 3,\r\n    LeftShoulder: 4,\r\n    RightShoulder: 5,\r\n    LeftTrigger: 6,\r\n    RightTrigger: 7,\r\n    Select: 8,\r\n    Start: 9,\r\n    L3: 10,\r\n    R3: 11,\r\n    DPadUp: 12,\r\n    DPadDown: 13,\r\n    DPadLeft: 14,\r\n    DPadRight: 15\r\n};\r\n\r\n/**\r\n * Define axis for the gamepad\r\n * @class GamepadAxis\r\n * @static\r\n */\r\nAtlantis.GamepadAxis = {\r\n    Horizontal: 0,\r\n    Vertical: 1,\r\n    HorizontalRight: 2,\r\n    VerticalRight: 3\r\n};\r\n\r\n// ---\r\n// --- GamepadState implementation\r\n// ---\r\n\r\n/**\r\n * Define the state of the gamepad at a specified time\r\n * @class GamepadState\r\n * @constructor\r\n * @param {Array} axis An array of axis values\r\n * @param {Array} buttons An array of buttons values (true/false)\r\n */\r\nAtlantis.GamepadState = function(axis, buttons) {\r\n    this.axis = [];\r\n    this.buttons = [];\r\n\r\n    if (axis) {\r\n        for (var i = 0, l = axis.length; i < l; i++) {\r\n            this.axis.push(axis[i]);\r\n        }\r\n    } else {\r\n        for (var i = 0; i < 6; i++) {\r\n            this.axis.push(0);\r\n        }\r\n    }\r\n\r\n    if (buttons) {\r\n        for (var i = 0, l = buttons.length; i < l; i++) {\r\n            this.buttons.push(buttons[i]);\r\n        }\r\n    } else {\r\n        for (var i = 0; i < 15; i++) {\r\n            this.buttons.push(false);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Indicate if the button is down.\r\n * @method isButtonDown\r\n * @param (Number|Atlantis.GamepadButton) The identifier of the button\r\n * @param {Boolean|Number} Return the value of the button.\r\n */\r\nAtlantis.GamepadState.prototype.isButtonDown = function(button) {\r\n    return this.buttons[button];\r\n};\r\n\r\n/**\r\n * Indicate if the button is up.\r\n * @method isButtonUp\r\n * @param (Number|Atlantis.GamepadButton) The identifier of the button\r\n * @param {Boolean|Number} Return the value of the button.\r\n */\r\nAtlantis.GamepadState.prototype.isButtonUp = function(button) {\r\n    return !this.buttons[button];\r\n};\r\n\r\n/**\r\n * Gets the value of an axis.\r\n * @method getAxis\r\n * @param (Number|Atlantis.GamepadAxis) The identifier of the axis\r\n * @param {Number} Return the value of the axis between -1 and 1.\r\n */\r\nAtlantis.GamepadState.prototype.getAxis = function(axis) {\r\n    return this.axis[axis];\r\n};\r\n\r\n// ---\r\n// --- Gamepad implementation\r\n// ---\r\n\r\n/**\r\n * The gamepad class is responsible to manage gamepads connected to the device.\r\n * @class Gamepad\r\n * @constructor\r\n * @extends Atlantis.GameComponent\r\n */\r\nAtlantis.Gamepad = function() {\r\n    Atlantis.GameComponent.call(this);\r\n    this._gamepads = [];\r\n    this._states = {};\r\n};\r\n\r\nAtlantis.Gamepad.prototype = Object.create(Atlantis.GameComponent.prototype);\r\n\r\n/**\r\n * Initialize the component and start event listeners\r\n * @method initialize\r\n */\r\nAtlantis.Gamepad.prototype.initialize = function() {\r\n    var that = this;\r\n\r\n    navigator.getGamepads = navigator.getGamepads || navigator.webkitGetGamepads || navigator.msGetGamepads || navigator.webkitGamepads;\r\n\r\n    this._gamepadsSupported = navigator.getGamepads ? true : false;\r\n\r\n    window.addEventListener(\"gamepadconnected\", function(event) {\r\n        that._addGamepad(event.gamepad);\r\n    }, false);\r\n\r\n    window.addEventListener(\"gamepaddisconnected\", function(event) {\r\n        that._removeGamepad(event.gamepad);\r\n    }, false);\r\n};\r\n\r\n// Add a gamepad\r\nAtlantis.Gamepad.prototype._addGamepad = function(gamepad) {\r\n    this._gamepads.push(gamepad);\r\n    this._states[gamepad.index] = new Atlantis.GamepadState();\r\n};\r\n\r\n// Remove a gamepad\r\nAtlantis.Gamepad.prototype._removeGamepad = function(gamepad) {\r\n    delete this._gamepads[gamepad.index];\r\n    delete this._states[gamepad.index];\r\n};\r\n\r\nAtlantis.Gamepad.prototype._updateGamepads = function() {\r\n    var gamepads = navigator.getGamepads();\r\n\r\n    for (var i = 0; i < gamepads.length; i++) {\r\n        if (gamepads[i]) {\r\n            if (this._gamepads.indexOf(gamepads[i]) === -1) {\r\n                this._addGamepad(gamepads[i]);\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Update states of connected gamepads\r\n * @method update\r\n * @param {Atlantis.GameTime} gameTime\r\n */\r\nAtlantis.Gamepad.prototype.update = function(gameTime) {\r\n    if (this._gamepadsSupported) {\r\n        this._updateGamepads();\r\n\r\n        for (var i = 0, l = this._gamepads.length; i < l; i++) {\r\n            var gamepad = this._gamepads[i];\r\n\r\n            for (var j = 0, m = gamepad.buttons.length; j < m; j++) {\r\n                var btnVal = gamepad.buttons[j];\r\n                var pressed = (btnVal === 1.0) ? true : false;\r\n\r\n                if (typeof(btnVal) == \"object\") {\r\n                    pressed = btnVal.pressed;\r\n                    btnVal = btnVal.value;\r\n                }\r\n\r\n                this._states[gamepad.index].buttons[j] = pressed;\r\n            }\r\n\r\n            for (var j = 0, m = gamepad.axes.length; j < m; j++) {\r\n                this._states[gamepad.index].axis[j] = +gamepad.axes[j] | 0;\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the state of the gamepad\r\n * @method getState\r\n * @return {Atlantis.GamepadState} Return the state at this time.\r\n */\r\nAtlantis.Gamepad.prototype.getState = function(index) {\r\n    var index = (typeof(index) !== \"undefined\") ? index : 0;\r\n    if (this._gamepads[index]) {\r\n        return new Atlantis.GamepadState(this._states[index].axis, this._states[index].buttons);\r\n    } else {\r\n        return new Atlantis.GamepadState()\r\n    };\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * An enumeration of keys who can be pressed/released\r\n * @class Keys\r\n */\r\nAtlantis.Keys = {\r\n    BackSpace: 8,\r\n    Tab: 9,\r\n    Enter: 13,\r\n    Shift: 16,\r\n    Control: 17,\r\n    Alt: 18,\r\n    Pause: 19,\r\n    Escape: 27,\r\n    Space: 32,\r\n    Home: 36,\r\n    End: 35,\r\n    Left: 37,\r\n    Up: 38,\r\n    Right: 39,\r\n    Down: 40,\r\n    Suppr: 46,\r\n    PageUp: 33,\r\n    PageDown: 34,\r\n    Insert: 45,\r\n    Num0: 48,\r\n    Num1: 49,\r\n    Num2: 50,\r\n    Num3: 51,\r\n    Num4: 52,\r\n    Num5: 53,\r\n    Num6: 54,\r\n    Num7: 55,\r\n    Num8: 56,\r\n    Num9: 57,\r\n    A: 65,\r\n    B: 66,\r\n    C: 67,\r\n    D: 68,\r\n    E: 69,\r\n    F: 70,\r\n    G: 71,\r\n    H: 72,\r\n    I: 73,\r\n    J: 74,\r\n    K: 75,\r\n    L: 76,\r\n    M: 77,\r\n    N: 78,\r\n    O: 79,\r\n    P: 80,\r\n    Q: 81,\r\n    R: 82,\r\n    S: 83,\r\n    T: 84,\r\n    U: 85,\r\n    V: 86,\r\n    W: 87,\r\n    X: 88,\r\n    Y: 89,\r\n    Z: 90,\r\n    Super: 91,\r\n    Numpad0: 96,\r\n    Numpad1: 97,\r\n    Numpad2: 98,\r\n    Numpad3: 99,\r\n    Numpad4: 100,\r\n    Numpad5: 101,\r\n    Numpad6: 102,\r\n    Numpad7: 103,\r\n    Numpad8: 104,\r\n    Numpad9: 105,\r\n    F1: 112,\r\n    F2: 113,\r\n    F3: 114,\r\n    F4: 115,\r\n    F5: 116,\r\n    F6: 117,\r\n    F7: 118,\r\n    F8: 119,\r\n    F9: 120,\r\n    F10: 121,\r\n    F11: 122,\r\n    F12: 123\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n\r\n/**\r\n * An enumeration to define the scale mode\r\n * - ScaleToFit: Take all the space on the screen.\r\n * - ConserveAspectRatio: Take the maximum space but conserve the ratio.\r\n * - NoScaleCenter: Center the content on the screen.\r\n *\r\n * @static\r\n */\r\nAtlantis.ScaleMode = {\r\n    ScaleToFit: 0,\r\n    ConserveAspectRatio: 1,\r\n    NoScaleCenter: 2\r\n};\r\n\r\n/**\r\n * The graphics device is response to manage screen (canvas) and draws (render target).\r\n * @class GraphicsDevice\r\n * @constructor\r\n * @param {Number} width The desired screen width\r\n * @param {Number} height The desired screen height\r\n * @param {Object} settings A list of options (webGL, backBufferWidth/Height, canvas).\r\n */\r\nAtlantis.GraphicsDevice = function(width, height, settings) {\r\n    var settings = settings || {};\r\n    settings.width = width;\r\n    settings.height = height;\r\n\r\n    this.preferredBackBufferWidth = settings.backBufferWidth || width;\r\n    this.preferredBackBufferHeight = settings.backBufferHeight || height;\r\n\r\n    this.disableSmoothing = false;\r\n    this.forceDisableSmoothing = false;\r\n\r\n    this.viewport = new Atlantis.Rectangle();\r\n    this.scaleMode = Atlantis.ScaleMode.ScaleToFit;\r\n\r\n    if (width && height) {\r\n        // The front buffer (what you see).\r\n        this._frontBuffer = new Atlantis.RenderTarget(width, height, settings.canvas);\r\n        this._fbContext = this._frontBuffer.getContext();\r\n\r\n        // The back buffer (what you don't see).\r\n        this._backBuffer = new Atlantis.RenderTarget(this.preferredBackBufferWidth, this.preferredBackBufferHeight);\r\n        this._bbCanvas = this._backBuffer.getCanvas();\r\n\r\n        var canvas = this._frontBuffer.getCanvas();\r\n        canvas.style.msTouchAction = \"none\";\r\n        canvas.style.backgroundColor = \"#000\";\r\n        canvas.id = canvas.id ? canvas.id : \"AtlantisCanvas\";\r\n\r\n        this.viewport.setSize(this.preferredBackBufferWidth, this.preferredBackBufferHeight);\r\n    }\r\n};\r\n\r\n/**\r\n * Apply the values of preferredBackBufferWidth/Height to the screen.\r\n * The back buffer is moved according to the scale mode.\r\n * Note that an event of type Atlantis.event.ResolutionChanged is fired at the end of the process.\r\n * @method applyChanges\r\n */\r\nAtlantis.GraphicsDevice.prototype.applyChanges = function() {\r\n    this._backBuffer.setSize(this.preferredBackBufferWidth, this.preferredBackBufferHeight);\r\n\r\n    var fbWidth = this._frontBuffer.getWidth(),\r\n        fbHeight = this._frontBuffer.getHeight();\r\n\r\n    // If the screen size AND the backbuffer size are the same OR the scale mode is scale to fit.\r\n    if (this.scaleMode == Atlantis.ScaleMode.ScaleToFit || ((fbWidth === this.preferredBackBufferWidth) && (fbHeight === this.preferredBackBufferHeight))) {\r\n        this.viewport.set(0, 0, fbWidth, fbHeight);\r\n    } else if (this.scaleMode == Atlantis.ScaleMode.ConserveAspectRatio) {\r\n        var diffPercent = 0;\r\n\r\n        if (this.preferredBackBufferWidth > this.preferredBackBufferHeight) {\r\n            diffPercent = (this.preferredBackBufferWidth / fbWidth);\r\n            this.viewport.width = fbWidth;\r\n            this.viewport.height = this.preferredBackBufferHeight * (1 + diffPercent);\r\n        } else {\r\n            diffPercent = (this.preferredBackBufferHeight / fbHeight);\r\n            this.viewport.width = this.preferredBackBufferWidth * (1 + diffPercent);\r\n            this.viewport.height = fbHeight;\r\n        }\r\n\r\n        this.viewport.x = fbWidth / 2 - this.viewport.width / 2;\r\n        this.viewport.y = fbHeight / 2 - this.viewport.height / 2;\r\n    } else if (this.scaleMode == Atlantis.ScaleMode.NoScaleCenter) {\r\n        this.viewport.x = (fbWidth / 2) - (this.preferredBackBufferWidth / 2);\r\n        this.viewport.y = (fbHeight / 2) - (this.preferredBackBufferHeight / 2);\r\n        this.viewport.width = this.preferredBackBufferWidth;\r\n        this.viewport.height = this.preferredBackBufferHeight;\r\n    }\r\n\r\n    Atlantis.Game.scaleFactor.x = this.preferredBackBufferWidth / this._frontBuffer.getWidth();\r\n    Atlantis.Game.scaleFactor.y = this.preferredBackBufferHeight / this._frontBuffer.getHeight();\r\n\r\n    Atlantis.notify(Atlantis.events.ResolutionChanged, {\r\n        width: this.preferredBackBufferWidth,\r\n        height: this.preferredBackBufferHeight\r\n    });\r\n};\r\n\r\n/**\r\n * Gets the back buffer renderTarget.\r\n * @method getBackBuffer\r\n * @return {Atlantis.RenderTarget} Return the renderTarget of the back buffer.\r\n */\r\nAtlantis.GraphicsDevice.prototype.getBackBuffer = function() {\r\n    return this._backBuffer;\r\n};\r\n\r\n/**\r\n * Gets the front buffer renderTarget.\r\n * @method getFrontBuffer\r\n * @return {Atlantis.RenderTarget} Return the renderTarget of the front buffer.\r\n */\r\nAtlantis.GraphicsDevice.prototype.getFrontBuffer = function() {\r\n    return this._frontBuffer;\r\n};\r\n\r\n/**\r\n * Clear all buffers\r\n * @method clear\r\n * @param {String} color The clear color (default black).\r\n */\r\nAtlantis.GraphicsDevice.prototype.clear = function(color) {\r\n    this._backBuffer.clear(color);\r\n    this._frontBuffer.clear(color);\r\n\r\n    if (this.disableSmoothing) {\r\n        this._backBuffer.getContext().imageSmoothingEnabled = false;\r\n        this._fbContext.imageSmoothingEnabled = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Draw the back buffer into the front buffer.\r\n * @method present\r\n */\r\nAtlantis.GraphicsDevice.prototype.present = function() {\r\n    this._fbContext.drawImage(this._bbCanvas, this.viewport.x, this.viewport.y, this.viewport.width, this.viewport.height);\r\n};\r\n\r\n/**\r\n * Toggle the passed element in fullscreen mode if the browser support this feature.\r\n * @method toggleFullscreen\r\n * @param {HTMLElement} The node to use (default is the canvas element).\r\n */\r\nAtlantis.GraphicsDevice.prototype.toggleFullscreen = function(element) {\r\n    var element = element instanceof HTMLElement ? element : this._frontBuffer.getCanvas();\r\n    var fs = this.isFullscreen();\r\n\r\n    element.requestFullScreen = element.requestFullScreen || element.webkitRequestFullscreen || element.mozRequestFullScreen || element.msRequestFullscreen || function() {\r\n        return false;\r\n    };\r\n    document.cancelFullScreen = document.cancelFullScreen || document.webkitCancelFullScreen || document.mozCancelFullScreen || document.msExitFullscreen || function() {\r\n        return false;\r\n    };\r\n\r\n    if (fs) {\r\n        document.cancelFullScreen();\r\n    } else {\r\n        element.requestFullScreen();\r\n    }\r\n};\r\n\r\n/**\r\n * Indicate if the fullscreen mode is active\r\n * @method isFullscreen\r\n * @return {Boolean} Return true if the fullscreen mode is active, o\r\n */\r\nAtlantis.GraphicsDevice.prototype.isFullscreen = function() {\r\n    return document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement || false;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define the sort mode of a sprite batch.\r\n * - BackToFront: All items of the batch are drawn to the smallest to the biggest layer depth\r\n * - FrontToBack: All items of the batch are drawn to the biggest to the smallest layer depth\r\n * - Immediate: No sorting, all is drawn without layer depth sorting.\r\n * @class SpriteSortMode\r\n * @static\r\n */\r\nAtlantis.SpriteSortMode = {\r\n    BackToFront: 0,\r\n    FrontToBack: 1,\r\n    Immediate: 2\r\n};\r\n\r\n/**\r\n * Define an effect to apply on a sprite.\r\n * @class SpriteEffect\r\n * @static\r\n */\r\nAtlantis.SpriteEffect = {\r\n    None: 0,\r\n    FlipHorizontaly: 1,\r\n    FlipVerticaly: 2\r\n};\r\n\r\nAtlantis.BatchItemType = {\r\n    Texture: 0,\r\n    Font: 1\r\n};\r\n\r\n/**\r\n * Define a SpriteBatch that is responsible to draw multiple elements on screen on one pass.\r\n * @class SpriteBatch\r\n * @constructor\r\n * @param {Atlantis.Graphics.GraphicsDevice} The graphics device.\r\n */\r\nAtlantis.SpriteBatch = function(graphicsDevice) {\r\n    this._graphicsDevice = graphicsDevice;\r\n\r\n    // Canvas used to render all item of the batch.\r\n    this._viewport = new Atlantis.Rectangle(0, 0, graphicsDevice.preferredBackBufferWidth, graphicsDevice.preferredBackBufferHeight);\r\n    this._canvas = this._graphicsDevice.getBackBuffer().getCanvas();\r\n    this._context = this._graphicsDevice.getBackBuffer().getContext();\r\n\r\n    this._batchItems = [];\r\n    this._batchStarted = false;\r\n    this._spriteSortMode = Atlantis.SpriteSortMode.Immediate;\r\n    this._transformMatrix = null;\r\n    this._cacheColoredTextures = [];\r\n    this._batchRect = new Atlantis.Rectangle();\r\n\r\n    document.addEventListener(Atlantis.events.ResolutionChanged, this._onResize.bind(this), false);\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._onResize = function(event) {\r\n    this._viewport.width = event.width;\r\n    this._viewport.height = event.height;\r\n};\r\n\r\n/**\r\n * Begin the batch operation.\r\n * @method begin\r\n * @param {Atlantis.SpriteSortMode} The type of sorting to use (option, default is Immediate).\r\n * @param {Array} A transform matrix to apply for all items (optional). The matrix is a 3x3 matrix in a single array.\r\n *        - [ScaleX, SkewX, SkewY, ScaleY, TranslationX, TranslationY]\r\n */\r\nAtlantis.SpriteBatch.prototype.begin = function(spriteSortMode, transformMatrix) {\r\n    if (!this._batchStarted) {\r\n        this._batchStarted = true;\r\n        this._spriteSortMode = typeof(spriteSortMode) === \"number\" ? spriteSortMode : Atlantis.SpriteSortMode.Immediate;\r\n\r\n        this._transformMatrix = transformMatrix;\r\n\r\n        if (this._transformMatrix) {\r\n            this._context.save();\r\n\r\n            this._context.transform(\r\n                this._transformMatrix[0], this._transformMatrix[1], this._transformMatrix[2],\r\n                this._transformMatrix[3], this._transformMatrix[4], this._transformMatrix[5]);\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a texture on the screen\r\n * @method draw\r\n * @param {Image} The image or canvas to draw.\r\n * @param {Atlantis.Rectangle|Atlantis.Vector2} The position or the rectangle of the image.\r\n * @param {Atlantis.Rectangle} A source rectangle.\r\n * @param {String} A color to apply on the image in hex format.\r\n * @param {Number} Rotation of the image.\r\n * @param {Atlantis.Vector2} Origin of the image (defaut is 0, 0 on top/left).\r\n * @param {Atlantis.Vector2} Scale of the image (default is 1/1);\r\n * @param {Atlantis.SpriteEffect} An effect to apply (default is none).\r\n * @param {Number} The layer depth (Important when SpriteSortMode is set to BackToFront or FrontToBack).\r\n */\r\nAtlantis.SpriteBatch.prototype.draw = function(texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth) {\r\n    if (this._batchStarted) {\r\n        if (!destinationRectangle.width) {\r\n            destinationRectangle.width = texture2D.width;\r\n            destinationRectangle.height = texture2D.height;\r\n        }\r\n\r\n        if (this._spriteSortMode == Atlantis.SpriteSortMode.Immediate) {\r\n            this._drawBatchItem(texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth, Atlantis.BatchItemType.Texture);\r\n        } else {\r\n            this._batchItems.push({\r\n                type: Atlantis.BatchItemType.Texture,\r\n                texture2D: texture2D,\r\n                sourceRectangle: sourceRectangle,\r\n                destinationRectangle: destinationRectangle,\r\n                color: color,\r\n                rotation: rotation,\r\n                origin: origin,\r\n                scale: scale,\r\n                effect: effect ? effect : Atlantis.SpriteEffect.None,\r\n                layerDepth: +layerDepth | 0\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a string on the screen\r\n * @method drawString\r\n * @param {Atlantis.SpriteFont} The SpriteFont to use.\r\n * @param {String} The string to draw.\r\n * @param {Atlantis.Vector2} The position of the string.\r\n * @param {String} The color of the string in hex format.\r\n * @param {Number} Rotation of the image.\r\n * @param {Atlantis.Vector2} Origin of the image (defaut is 0, 0 on top/left).\r\n * @param {Atlantis.Vector2} Scale of the image (default is 1/1);\r\n * @param {Atlantis.SpriteEffect} An effect to apply (default is none).\r\n * @param {Number} The layer depth (Important when SpriteSortMode is set to BackToFront or FrontToBack).\r\n */\r\nAtlantis.SpriteBatch.prototype.drawString = function(spriteFont, text, position, color, rotation, origin, scale, effect, layerDepth) {\r\n    if (this._batchStarted) {\r\n        if (this._spriteSortMode === Atlantis.SpriteSortMode.Immediate) {\r\n            this._drawBatchItem(spriteFont, position, text, color, rotation, origin, scale, effect, layerDepth, Atlantis.BatchItemType.Font);\r\n        } else {\r\n            this._batchItems.push({\r\n                type: Atlantis.BatchItemType.Font,\r\n                texture2D: spriteFont,\r\n                sourceRectangle: text,\r\n                destinationRectangle: {\r\n                    x: position.x,\r\n                    y: position.y,\r\n                    width: 1,\r\n                    height: 1\r\n                },\r\n                color: color,\r\n                rotation: rotation,\r\n                origin: origin,\r\n                scale: scale,\r\n                effect: effect ? effect : Atlantis.SpriteEffect.None,\r\n                layerDepth: +layerDepth | 0\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Execute the batch process and draw the result in the screen.\r\n * @method end\r\n */\r\nAtlantis.SpriteBatch.prototype.end = function() {\r\n    if (this._batchStarted) {\r\n        if (this._spriteSortMode !== Atlantis.SpriteSortMode.Immediate) {\r\n            this._batchItems = this._batchItems.sort(this._sortBatchItem.bind(this));\r\n\r\n            for (var i = 0, l = this._batchItems.length; i < l; i++) {\r\n                this._drawBatchItem(this._batchItems[i].texture2D, this._batchItems[i].destinationRectangle, this._batchItems[i].sourceRectangle, this._batchItems[i].color, this._batchItems[i].rotation, this._batchItems[i].origin, this._batchItems[i].scale, this._batchItems[i].effect, this._batchItems[i].layerDepth, this._batchItems[i].type);\r\n            }\r\n\r\n            this._batchItems.length = 0;\r\n        }\r\n\r\n        if (this._transformMatrix) {\r\n            this._context.restore();\r\n        }\r\n\r\n        this._batchStarted = false;\r\n    }\r\n};\r\n\r\n/**\r\n * Draw a texture on the screen\r\n * @method drawTexture\r\n * @static\r\n * @param {CanvasContext} The canvas context.\r\n * @param {Image} The image or canvas to draw.\r\n * @param {Number} x coordinate.\r\n * @param {Number} y coordinate.\r\n * @param {Number} width of the image.\r\n * @param {Number} height of the image.\r\n * @param {Atlantis.Rectangle} A source rectangle.\r\n */\r\nAtlantis.SpriteBatch.drawTexture = function(context, texture, x, y, width, height, sourceRectangle) {\r\n    if (sourceRectangle) {\r\n        context.drawImage(texture, sourceRectangle.x, sourceRectangle.y, sourceRectangle.width, sourceRectangle.height, x, y, width, height);\r\n    } else {\r\n        context.drawImage(texture, x, y, width, height);\r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch.drawString = function(context, spriteFont, text, position, color) {\r\n    context.fillStyle = color;\r\n    context.font = spriteFont.getFont();\r\n\r\n    if (spriteFont.strokeStyle && spriteFont.lineWidth) {\r\n        context.lineWidth = spriteFont.lineWidth;\r\n        context.strokeStyle = spriteFont.strokeStyle\r\n\r\n        if (!spriteFont.wrapText) {\r\n            context.strokeText(text, position.x, position.y);\r\n        }\r\n    }\r\n\r\n    if (!spriteFont.wrapText) {\r\n        context.fillText(text, position.x, position.y);\r\n    } else {\r\n        Atlantis.SpriteBatch._wrapText(context, text, position.x, position.y, position.width, spriteFont.size, spriteFont.strokeStyle && spriteFont.lineWidth);\r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._drawBatchItem = function(texture2D, destinationRectangle, sourceRectangle, color, rotation, origin, scale, effect, layerDepth, type) {\r\n    // If the entity is visible on the screen.   \r\n    this._batchRect.fromRectangle(destinationRectangle);\r\n\r\n    if (this._viewport.intersects(this._batchRect)) {\r\n        var oX = origin ? origin.x : 0;\r\n        var oY = origin ? origin.y : 0;\r\n\r\n        this._context.save();\r\n\r\n        this._context.translate(destinationRectangle.x, destinationRectangle.y);\r\n        this._context.translate(oX, oY);\r\n        this._batchRect.x = -oX;\r\n        this._batchRect.y = -oY;\r\n\r\n        if (rotation) {\r\n            this._context.rotate(rotation);\r\n        }\r\n\r\n        if (scale) {\r\n            this._context.scale(scale.x, scale.y);\r\n        }\r\n\r\n        if (effect && effect !== Atlantis.SpriteEffect.None) {\r\n            if (effect == Atlantis.SpriteEffect.FlipHorizontaly) {\r\n                this._context.scale(-1, 1);\r\n                this._batchRect.x -= this._batchRect.width;\r\n            } else {\r\n                this._context.scale(1, -1);\r\n                this._batchRect.y -= this._batchRect.height;\r\n            }\r\n        }\r\n\r\n        if (type === Atlantis.BatchItemType.Texture) {\r\n            if (color && texture2D.width && texture2D.height) {\r\n                Atlantis.SpriteBatch.drawTexture(this._context, this._colorizeTexture(texture2D, color), this._batchRect.x, this._batchRect.y, this._batchRect.width, this._batchRect.height, sourceRectangle);\r\n            } else {\r\n                Atlantis.SpriteBatch.drawTexture(this._context, texture2D, this._batchRect.x, this._batchRect.y, this._batchRect.width, this._batchRect.height, sourceRectangle);\r\n            }\r\n        } else if (type === Atlantis.BatchItemType.Font) {\r\n            // Because JavaScript is so Magic..\r\n            // The prototype become (spriteFont, text, position, color)\r\n            Atlantis.SpriteBatch.drawString(this._context, texture2D, sourceRectangle, this._batchRect, color);\r\n        }\r\n\r\n        this._context.restore();\r\n    }\r\n};\r\n\r\n// Colorize a texture and put it in a cache.\r\nAtlantis.SpriteBatch.prototype._colorizeTexture = function(texture, color) {\r\n    var canvas = this._searchColoredTexture(texture, color);\r\n\r\n    if (!canvas) {\r\n        canvas = document.createElement(\"canvas\");\r\n        canvas.width = texture.width;\r\n        canvas.height = texture.height;\r\n\r\n        var context = canvas.getContext(\"2d\");\r\n        context.drawImage(texture, 0, 0);\r\n\r\n        var imageData = context.getImageData(0, 0, texture.width, texture.height);\r\n        var cColor = this._hexaToBytes(color);\r\n\r\n        for (var i = 0, l = imageData.data.length; i < l; i += 4) {\r\n            imageData.data[i] = cColor.r | imageData.data[i];\r\n            imageData.data[i + 1] = cColor.g | imageData.data[i + 1];\r\n            imageData.data[i + 2] = cColor.b | imageData.data[i + 2];\r\n            imageData.data[i + 3] = cColor.a | imageData.data[i + 3];\r\n        }\r\n\r\n        context.putImageData(imageData, 0, 0);\r\n\r\n        this._cacheColoredTextures.push({\r\n            texture: texture,\r\n            color: color,\r\n            canvas: canvas\r\n        });\r\n    }\r\n\r\n    return canvas;\r\n};\r\n\r\n// Convert an hexa color to byte color.\r\nAtlantis.SpriteBatch.prototype._hexaToBytes = function(color) {\r\n    var hexa = color.split(\"#\")[1];\r\n    var bColor = {\r\n        r: 0,\r\n        g: 0,\r\n        b: 0,\r\n        a: 0\r\n    };\r\n    var size = hexa.length;\r\n\r\n    if (size === 3) {\r\n        bColor.r = parseInt((hexa[0] + hexa[0]), 16);\r\n        bColor.g = parseInt((hexa[1] + hexa[1]), 16);\r\n        bColor.b = parseInt((hexa[2] + hexa[2]), 16);\r\n    } else if (size === 6) {\r\n        bColor.r = parseInt(hexa.slice(0, 2), 16);\r\n        bColor.g = parseInt(hexa.slice(2, 4), 16);\r\n        bColor.b = parseInt(hexa.slice(4, 6), 16);\r\n    } else if (size === 8) {\r\n        bColor.r = parseInt(hexa.slice(0, 2), 16);\r\n        bColor.g = parseInt(hexa.slice(2, 4), 16);\r\n        bColor.b = parseInt(hexa.slice(4, 6), 16);\r\n        bColor.a = parseInt(hexa.slice(6, 8), 16);\r\n    }\r\n\r\n    return bColor;\r\n};\r\n\r\n// Search if a colored texture is already in the cache.\r\nAtlantis.SpriteBatch.prototype._searchColoredTexture = function(texture, color) {\r\n    var i = 0;\r\n    var size = this._cacheColoredTextures.length;\r\n    var canvas = null;\r\n\r\n    while (i < size && canvas === null) {\r\n        canvas = (this._cacheColoredTextures[i].texture === texture && this._cacheColoredTextures[i].color === color) ? this._cacheColoredTextures[i].canvas : null;\r\n        i++;\r\n    }\r\n\r\n    return canvas;\r\n};\r\n\r\nAtlantis.SpriteBatch.prototype._sortBatchItem = function(itemA, itemB) {\r\n    if (this._spriteSortMode === Atlantis.SpriteSortMode.BackToFront) {\r\n        if (+itemA.layerDepth > +itemB.layerDepth) {\r\n            return 1;\r\n        }\r\n\r\n        if (+itemA.layerDepth < +itemB.layerDepth) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    } else {\r\n        if (+itemA.layerDepth < +itemB.layerDepth) {\r\n            return 1;\r\n        }\r\n\r\n        if (+itemA.layerDepth > +itemB.layerDepth) {\r\n            return -1;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n};\r\n\r\nAtlantis.SpriteBatch._wrapText = function(context, text, x, y, maxWidth, lineHeight, strokeText) {\r\n    var words = text.split(\" \");\r\n    var line = \"\";\r\n\r\n    for (var n = 0; n < words.length; n++) {\r\n        var testLine = line + words[n] + ' ';\r\n        var metrics = context.measureText(testLine);\r\n        var testWidth = metrics.width;\r\n        if (testWidth > maxWidth && n > 0) {\r\n            if (strokeText) {\r\n                context.strokeText(line, x, y);\r\n            }\r\n\r\n            context.fillText(line, x, y);\r\n            line = words[n] + ' ';\r\n            y += lineHeight;\r\n        } else {\r\n            line = testLine;\r\n        }\r\n    }\r\n\r\n    if (strokeText) {\r\n        context.strokeText(line, x, y);\r\n    }\r\n\r\n    context.fillText(line, x, y);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * A render target is a graphics surface where we can draw\r\n * @constructor\r\n * @class RenderTarget\r\n * @param {Number} width Desired width.\r\n * @param {Number} height Desired height.\r\n * @param {HTMLCanvas} (optional) A canvas to use with this renderTarget\r\n */\r\nAtlantis.RenderTarget = function(width, height, canvas) {\r\n    this._canvas = canvas\r\n\r\n    if (!this._canvas) {\r\n        this._canvas = document.createElement(\"canvas\");\r\n        this.setSize(width, height);\r\n    }\r\n\r\n    this._context = null;\r\n    this._data = null;\r\n    this._needUpdate = false;\r\n    this._context = this._canvas.getContext(\"2d\");\r\n    this.setSize(width, height);\r\n};\r\n\r\nAtlantis.RenderTarget.fromImage = function(image) {\r\n    var rt = new Atlantis.RenderTarget(image.width, image.height, false);\r\n    rt._context.drawImage(image, 0, 0, image.width, image.height);\r\n    return rt;\r\n};\r\n\r\n/**\r\n * Set the image data of the canvas.\r\n * @method setData\r\n * @param {Object} imageData Data to put in the canvas.\r\n */\r\nAtlantis.RenderTarget.prototype.setData = function(imageData) {\r\n    this._context.putImageData(imageData, 0, 0);\r\n};\r\n\r\n/**\r\n * Gets the image data of the canvas.\r\n * @method getData\r\n * @return {Object} Return the ImageData of the context.\r\n */\r\nAtlantis.RenderTarget.prototype.getData = function() {\r\n    if (!this._data || this._needUpdate) {\r\n        this._data = this._context.getImageData(0, 0, this._canvas.width, this._canvas.height);\r\n    }\r\n    return this._data;\r\n};\r\n\r\nAtlantis.RenderTarget.prototype.getPixelData = function(x, y) {\r\n    var color = this._context.getImageData(x, y, 1, 1).data;\r\n    return {\r\n        r: color[0],\r\n        g: color[1],\r\n        b: color[2],\r\n        a: color[3]\r\n    };\r\n};\r\n\r\n/**\r\n * Get the context of the canvas used to draw.\r\n * @method\r\n * @return {CanvasContext} Return the canvas context.\r\n */\r\nAtlantis.RenderTarget.prototype.getContext = function() {\r\n    return this._context;\r\n};\r\n\r\n/**\r\n * Gets the canvas used to draw.\r\n * @method getCanvas\r\n * @return {HTMLCanvas} Return the canvas used to draw.\r\n */\r\nAtlantis.RenderTarget.prototype.getCanvas = function() {\r\n    return this._canvas;\r\n};\r\n\r\n/**\r\n * Gets the width of the drawing surface.\r\n * @method getWidth\r\n * @return {Number} Return the width of the drawing surface.\r\n */\r\nAtlantis.RenderTarget.prototype.getWidth = function() {\r\n    return this._canvas.width;\r\n};\r\n\r\n/**\r\n * Gets the height of the drawing surface.\r\n * @method getHeight\r\n * @return {Number} Return the height of the drawing surface.\r\n */\r\nAtlantis.RenderTarget.prototype.getHeight = function() {\r\n    return this._canvas.height;\r\n};\r\n\r\n/**\r\n * Change the size of the drawing surface.\r\n * @method setSize\r\n * @param {Number} width The new width.\r\n * @param {Number} height The new height.\r\n */\r\nAtlantis.RenderTarget.prototype.setSize = function(width, height) {\r\n    this._canvas.width = width;\r\n    this._canvas.height = height;\r\n};\r\n\r\n/**\r\n * Clear the entire surface\r\n * @method clear\r\n */\r\nAtlantis.RenderTarget.prototype.clear = function(color) {\r\n    this._context.clearRect(0, 0, this._canvas.width, this._canvas.height);\r\n};\r\n\r\n/**\r\n * Save the content of the renderTarget to an image\r\n * @method saveAsPng\r\n * @return {String} Return a base64 of the image with mime type \"image/png\"\r\n */\r\nAtlantis.RenderTarget.prototype.saveAsPng = function() {\r\n    return this._canvas.toDataURL(\"image/png\");\r\n};\r\n\r\n/**\r\n * Save the content of the renderTarget to an image\r\n * @method saveAsJpg\r\n * @return {String} Return a base64 of the image with mime type \"image/jpg\"\r\n */\r\nAtlantis.RenderTarget.prototype.saveAsJpg = function() {\r\n    return this._canvas.toDataURL(\"image/jpg\");\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * Define a drawable text.\r\n * @class SpriteFont\r\n * @constructor\r\n * @param {String} The font name to use (default Arial). You can use a webfont loaded in CSS.\r\n * @param {Number} The size of the font.\r\n * @param {String} The style of the font (normal, italic, bold)\r\n */\r\nAtlantis.SpriteFont = function(fontName, size, style) {\r\n    this.fontName = fontName || \"Arial\";\r\n    this.size = size || 14;\r\n    this.style = style || \"normal\";\r\n    this.strokeStyle = null;\r\n    this.lineWidth = 0;\r\n};\r\n\r\n/**\r\n * Gets the string passed to drawing context.\r\n * @method getFont\r\n * @return {String} Return the string passed to the drawing context.\r\n */\r\nAtlantis.SpriteFont.prototype.getFont = function() {\r\n    return [this.style, \" \", this.size, \"px \", this.fontName].join(\"\");\r\n};\r\n\r\nAtlantis.SpriteFont.prototype.clone = function() {\r\n    var sClone = new Atlantis.SpriteFont(this.fontName, this.size, this.style);\r\n    sClone.strokeStyle = this.strokeStyle;\r\n    sClone.lineWidth = this.lineWidth;\r\n    return sClone;\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\n/**\r\n * The Preloader is used during asset loading in game class.\r\n * @class Preloader\r\n * @constructor\r\n * @param {Atlantis.Game} game\r\n */\r\nAtlantis.Preloader = function(game) {\r\n    this.screenWidth = game.graphicsDevice.preferredBackBufferWidth;\r\n    this.screenHeight = game.graphicsDevice.preferredBackBufferHeight;\r\n    this.screenWidthPerTwo = this.screenWidth / 2;\r\n    this.screenHeightPerTwo = this.screenHeight / 2;\r\n    this.spriteFont = new Atlantis.SpriteFont(\"Arial\", 32);\r\n};\r\n\r\n/**\r\n * Called when an asset is loaded.\r\n * @method onProgress\r\n * @param {Object} context The canvas context.\r\n * @param {Number} progress The loading progression in percent.\r\n */\r\nAtlantis.Preloader.prototype.onProgress = function(context, progress) {\r\n    var progressMessage = [\"Game loading \", Math.round(progress.progress), \"%\"].join(\"\");\r\n    var size = context.measureText(progressMessage),\r\n        x = (this.screenWidthPerTwo) - (size.width / 2),\r\n        y = (this.screenHeightPerTwo) - (this.spriteFont.size / 2);\r\n\r\n    context.clearRect(0, 0, this.screenWidth, this.screenHeight);\r\n    context.fillStyle = \"#fafafa\";\r\n    context.font = this.spriteFont.getFont();\r\n    context.fillText(progressMessage, x, y);\r\n};\n/**\r\n * AtlantisEngine.js a lightweight JavaScript game engine.\r\n *\r\n * @module Atlantis\r\n * @submodule Framework\r\n * @namespace Atlantis\r\n */\r\n\r\nvar Atlantis = window.Atlantis || {};\r\n\r\nAtlantis.Game = (function() {\r\n    var _instance = null;\r\n\r\n    /**\r\n     * Create a game instance who is the starting point of the Framework.\r\n     * @constructor\r\n     * @class Game\r\n     * @param {Number} width Desired screen width.\r\n     * @param {height} height Desired screen height.\r\n     * @param {domElement} (optional) domElement Sepecify a DOM element to attach the canvas.\r\n     * @param {params} (optional) params\r\n     */\r\n    var game = function(width, height, domElement, params) {\r\n        this.settings = params || {};\r\n        \r\n        var width = width || window.innerWidth;\r\n        var height = height || window.innerHeight;\r\n        this.domElement = document.body;\r\n\r\n        // FIXME : This part is totaly awefull\r\n        if (typeof(domElement) instanceof HTMLElement) {\r\n            this.domElement = domElement;\r\n        } else if (typeof(domElement) === \"string\") {\r\n            if (domElement[0] === \".\") {\r\n                domElement = domElement.replace(\".\", \"\");\r\n                this.domElement = document.getElementsByClassName(domElement)[0];\r\n            } else {\r\n                domElement = (domElement[0] === \"#\") ? domElement.replace(\"#\", \"\") : domElement;\r\n                this.domElement = document.getElementById(domElement);\r\n            }\r\n        }\r\n\r\n        if (this.domElement instanceof HTMLCanvasElement) {\r\n            this.settings.canvas = this.domElement;\r\n        }\r\n\r\n        this.version = \"0.0.0.1\";\r\n        this.gameTime = new Atlantis.GameTime();\r\n        this.components = new Atlantis.GameComponentCollection();\r\n        this.content = new Atlantis.ContentManager();\r\n        this.keyboard = null;\r\n        this.mouse = null;\r\n        this.touchPanel = null;\r\n        this.gamepad = null;\r\n        this.preloader = null;\r\n\r\n        this.graphicsDevice = new Atlantis.GraphicsDevice(width, height, this.settings);\r\n        this.canvas = this.settings.canvas;\r\n        this.frontBuffer = null;\r\n        this.context = null;\r\n        this.initialized = false;\r\n        this._paused = false;\r\n\r\n        _instance = this;\r\n    };\r\n\r\n    /**\r\n     * Gets the scale factor relative to the backbuffer.\r\n     * @property {Atlantis.Vector2} scaleFactor\r\n     */\r\n    game.scaleFactor = new Atlantis.Vector2(1, 1);\r\n\r\n    game.prototype._internalIntialize = function() {\r\n        this.frontBuffer = this.graphicsDevice.getFrontBuffer();\r\n        this.context = this.frontBuffer.getContext();\r\n\r\n        if (!this.canvas) {\r\n            this.canvas = this.frontBuffer.getCanvas();\r\n        }\r\n\r\n        this.keyboard = new Atlantis.Keyboard();\r\n        this.mouse = new Atlantis.Mouse(this.frontBuffer.getCanvas());\r\n        this.touchPanel = new Atlantis.TouchPanel(this.frontBuffer.getCanvas());\r\n        this.gamepad = new Atlantis.Gamepad();\r\n\r\n        this.components.add(this.gamepad);\r\n\r\n        if (this.settings.resizeEnabled) {\r\n            window.addEventListener(\"resize\", onResize, false);\r\n        }\r\n\r\n        if (this.domElement && !this.settings.canvas) {\r\n            this.domElement.appendChild(this.frontBuffer.getCanvas());\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Initialize the game logic and components.\r\n     * @method initialize\r\n     */\r\n    game.prototype.initialize = function() {\r\n        this.components.initialize();\r\n    };\r\n\r\n    /**\r\n     * Load the content.\r\n     * @method loadContent\r\n     */\r\n    game.prototype.loadContent = function() {\r\n        this.components.loadContent(this.content);\r\n    };\r\n\r\n    /**\r\n     * Unload the content.\r\n     * @method unloadContent\r\n     */\r\n    game.prototype.unloadContent = function() {\r\n        this.components.unloadContent();\r\n    };\r\n\r\n    /**\r\n     * Update the logic of the game.\r\n     * @method update\r\n     * @param {GameTime} gameTime The game time.\r\n     */\r\n    game.prototype.update = function(gameTime) {\r\n        this.components.update(gameTime);\r\n    };\r\n\r\n    /**\r\n     * Draw the content on the screen.\r\n     * @method draw\r\n     * @param {GameTime} gameTime The game time.\r\n     * @param {CanvasRenderingContext2D} context The 2D context.\r\n     */\r\n    game.prototype.draw = function(gameTime, context) {\r\n        if (this.settings.autoClear) {\r\n            this.graphicsDevice.clear();\r\n        }\r\n\r\n        this.components.draw(gameTime, context);\r\n    };\r\n\r\n    /**\r\n     * Called when the `draw` method has done its work.\r\n     * @method afterDraw\r\n     * @param {GameTime} gameTime The game time.\r\n     */\r\n    game.prototype.afterDraw = function(gameTime) {\r\n        this.graphicsDevice.present();\r\n    };\r\n\r\n    /** \r\n     * Start the game by initializing the engine. The preloader is activated \r\n     * afterwards the components are initialized and the main loop is started.\r\n     * @method run\r\n     */\r\n    game.prototype.run = function() {\r\n        var that = this;\r\n        var startProcess = function() {\r\n            that.initialize();\r\n            that.initialized = true;\r\n            that.loadContent();\r\n            that.frontBuffer.getCanvas().focus();\r\n            mainLoop();\r\n        };\r\n\r\n        if (!this.initialized) {\r\n            this.initialized = true;\r\n            this._internalIntialize();\r\n\r\n            if (this.content.preloader.length) {\r\n\r\n                // If user don't use a custom preloader\r\n                if (this.preloader === null) {\r\n                    this.preloader = new Atlantis.Preloader(this);\r\n                }\r\n\r\n                this.content.preload(function(progress) {\r\n                    this.preloader.onProgress(this.context, progress);\r\n                }.bind(this), function() {\r\n                    this.context.clearRect(0, 0, this.frontBuffer.getWidth(), this.frontBuffer.getHeight());\r\n                    startProcess();\r\n                }.bind(this));\r\n            } else {\r\n                startProcess();\r\n            }\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Sets the game in pause mode.\r\n     * @method pause\r\n     */\r\n    game.prototype.pause = function() {\r\n        cancelAnimationFrame(mainLoop);\r\n        this._paused = true;\r\n    };\r\n\r\n    /**\r\n     * Resume a paused game.\r\n     * @method resume\r\n     */\r\n    game.prototype.resume = function() {\r\n        if (this._paused) {\r\n            this._paused = false;\r\n            mainLoop();\r\n        }\r\n    };\r\n\r\n    // The mainLoop\r\n    function mainLoop() {\r\n        _instance.gameTime.update();\r\n        _instance.update(_instance.gameTime);\r\n        _instance.draw(_instance.gameTime);\r\n        _instance.afterDraw(_instance.gamepad);\r\n\r\n        if (!_instance._paused) {\r\n            requestAnimationFrame(mainLoop);\r\n        }\r\n    }\r\n\r\n    // Callback for window resize\r\n    function onResize(event) {\r\n        _instance.width = event.target.innerWidth;\r\n        _instance.height = event.target.innerHeight;\r\n        _instance.canvas.width = _instance.width;\r\n        _instance.canvas.height = _instance.height;\r\n    }\r\n\r\n    return game;\r\n})();"],"sourceRoot":"/source/"}